interface Address {
  #  ID of the object
  id: ID!

  #  Type of Address, to support legacy address, the value can be AGENT and ORDER
  type: String

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  Company name
  companyName: String

  #  Name
  name: String

  #  Street
  street: String

  #  City
  city: String

  #  State
  state: String

  #  Postcode
  postcode: String

  #  Region
  region: String

  #  Country
  country: String

  #  Latitude
  latitude: Float

  #  Longitude
  longitude: Float

  #  Location reference
  ref: String

  #  Timezone
  timeZone: String
}

input AddressId {
  #  ID of the object
  id: ID!
}

type AmountType {
  amount: Float
  scale: Int
  unscaledValue: Int
}

input AmountTypeInput {
  amount: Float
  scale: Int
  unscaledValue: Int
}

#  An Article can be created when a fulfilment is fulfilled, or when a dispatch
# occurs. The Article represents the physical parcel that contains the customer
# order items. The Article is the entity received by the customer.
type Article implements Node, Orchestrateable {
  #  ID of the object
  id: ID!

  #  The unique article reference provided by the retailer
  ref: String

  #  Type of the `Article`, typically used by the Orchestration Engine to determine
  # the workflow that should be applied. Unless stated otherwise, no values are
  # enforced by the platform.<br/>
  type: String!

  #  The current status of the `Article`.<br/>By default, the initial value will be
  # CREATED, however no other status values are enforced by the platform.<br/>The
  # status field is also used within ruleset selection during orchestration. For
  # more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  Attributes of article
  attributes: [Attribute]

  #  Description
  description: String

  #  Height
  height: Float!

  #  Length
  length: Float!

  #  Name
  name: String

  #  Weight
  weight: Float!

  #  Width
  width: Float!

  #  Quantity
  quantity: Int

  #  Items within this article
  items(
    createdOn: DateRange
    updatedOn: DateRange

    #  Quantity of article item
    quantity: [Int!]

    #  Barcode of article item
    barcode: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ArticleItemConnection

  #  Fulfilments associated with this article
  fulfilments(
    #  External reference of the object. Recommended to be unique.
    ref: [String]
    status: [String]
    workflowRef: [String!]
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Type of delivery. Supported values are _STANDARD_, _OVERNIGHT_ and _EXPRESS_.
    deliveryType: [String]

    #  Type of fulfilment. Supported types are <br/>
    #  - *CC_PFS* for Click & Collect - Pick from Store
    #  - *CC_PFDC* for Click & Collect - Pick from DC
    #  - *HD_PFS* for Home Delivery - Pick from Store
    #  - *HD_PFDC* for Home Delivery - Pick from DC
    type: [String!]

    #  The estimated time of completing the fulfilment.
    eta: [String]
    expiryTime: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): FulfilmentConnection

  #  Relationships between consignment and article
  consignmentArticles(
    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ConsignmentArticleConnection

  #  Relationships between carrierConsignment and article
  carrierConsignmentArticles(
    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CarrierConsignmentArticleConnection

  #  The storage areas of the article
  storageArea: StorageArea
}

#  A list of results that matched against a Article search query
type ArticleConnection {
  #  A list of edges that links to Article type node
  edges: [ArticleEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Article connection to the Article type
type ArticleEdge {
  #  The item at the end of the Article edge
  node: Article

  #  A cursor for use in pagination
  cursor: String
}

input ArticleId {
  #  ID of the object
  id: ID!
}

#  The item within an article
type ArticleItem implements Node {
  #  ID of the object
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  Quantity of article item
  quantity: Int!

  #  Barcode of article item
  barcode: String

  #  Article associated with this item
  article: Article
}

#  A list of results that matched against a ArticleItem search query
type ArticleItemConnection {
  #  A list of edges that links to ArticleItem type node
  edges: [ArticleItemEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a ArticleItem connection to the ArticleItem type
type ArticleItemEdge {
  #  The item at the end of the ArticleItem edge
  node: ArticleItem

  #  A cursor for use in pagination
  cursor: String
}

#  An `attribute` is a trio of *name*, *type* and *value*. Attributes are useful
# for storing additional information into objects. <br/>
#  <br/><br/>**USAGE**<br/>
#  Attributes should be unique by `name`. If an attribute with a matching `name`
# already exists, then the `type` and `value` fields will be updated, else they
# will be inserted.
type Attribute {
  #  Name of the `attribute`
  name: String!

  #  Type of the attribute's `value`. This is a free string and can be used by the
  # client to interpret and cast the `value` into the appropriate type.
  type: String!

  #  Value of the `attribute`
  value: Json!
}

#  Input type for `attribute`s. Attributes should be unique by `name`. If an
# attribute with a matching `name` already exists, then the `type` and `value`
# fields will be updated, else they will be inserted.
input AttributeInput {
  name: String!
  type: String!
  value: Json!
}

type BillingAccount implements Node, Referenceable, Extendable {
  #  ID of the object.
  id: ID!

  #  External reference to the `BillingAccount`. Must be unique.
  ref: String!

  #  Type of the `BillingAccount`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied.
  type: String

  #  Status of the `BillingAccount`.
  status: String

  #  Retailer associated to the `BillingAccount`.
  retailer: RetailerLink

  #  Customer associated to the `BillingAccount`.
  customer: CustomerLink

  #  A list of attributes associated with the `BillingAccount`. This can be used to
  # extend the existing data structure with additional data.
  attributes: [Attribute]

  #  Name of the `BillingAccount`.
  name: String

  #  Address associated to the `BillingAccount`.
  address: StreetAddress

  #  Address associated to the `BillingAccount`.
  creditMemos(
    #  External reference to the `CreditMemo`. Must be unique.
    ref: [String!]

    #  Type of the `CreditMemo`, typically used by the Orchestration Engine to determine the workflow that should be applied.
    type: [String]

    #  Status of the `CreditMemo`.
    status: [String]
    order: OrderLinkInput
    returnOrder: ReturnOrderLinkInput
    issueDate: DateRange
    currency: CurrencyLinkInput
    workflow: WorkflowLinkInput

    #  DEPRECATED, please use the field `workflow` instead - The reference of the workflow.
    workflowRef: [String]

    #  DEPRECATED, please use the field `workflow` instead - The version of the workflow.
    workflowVersion: [String]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CreditMemoConnection

  #  The reference to the `workflow` associated. 
  workflow: WorkflowLink

  #  DEPRECATED, please use the field `workflow` instead - The reference of the workflow.
  workflowRef: String @deprecated

  #  DEPRECATED, please use the field `workflow` instead - The version of the workflow.
  workflowVersion: String @deprecated

  #  Date and time of creation.
  createdOn: DateTime

  #  Date and time of last update.
  updatedOn: DateTime
}

#  A list of results that matched against a BillingAccount search query
type BillingAccountConnection {
  #  A list of edges that links to BillingAccount type node
  edges: [BillingAccountEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a BillingAccount connection to the BillingAccount type
type BillingAccountEdge {
  #  The item at the end of the BillingAccount edge
  node: BillingAccount

  #  A cursor for use in pagination
  cursor: String
}

#  Input type to uniquely identify a `BillingAccount` object. We use all the fields
# present in the request to look for this object.
input BillingAccountKey {
  #  The client's reference identifier for the object
  ref: String!
}

#  The carrier information
type Carrier implements Node, Referenceable, Orchestrateable, Extendable {
  #  ID of the object
  id: ID!

  #  The carrier name
  name: String!

  #  Type of the `Carrier`, typically used by the Orchestration Engine to determine
  # the workflow that should be applied. Unless stated otherwise, no values are
  # enforced by the platform.<br/>
  #  The type field can be used to differentiate between Inventory Position workflows
  type: String!

  #  The reference identifier used to identify an entity
  ref: String!

  #  The retailer
  retailer: Retailer

  #  A connection to associated Consignments
  carrierConsignments(
    #  External reference of the `Consignment`. Must be unique.
    ref: [String!]

    #  The status of the consignment
    status: [String]

    #  The external consignment reference assigned by the carrier
    consignmentReference: [String]

    #  Tracking label of the consignment
    trackingLabel: [String]

    #  The URL used to retrieve the shipping label
    labelUrl: [String]

    #  A url to represent the order summary. Usually the manifest url from the service provider.
    orderSummaryUrl: [String]

    #  The reference used for workflow identification
    workflowRef: [String!]

    #   The version of the workflow
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CarrierConsignmentConnection

  #  A list of manifests associated with this Carrier.
  manifests: [Manifest]

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  #  The reference used for workflow identification
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  #   The version of the workflow
  workflowVersion: Int!

  #  The current status of the `Carrier`.<br/>By default, the initial value will be
  # CREATED, however no other status values are enforced by the platform.<br/>The
  # status field is also used within ruleset selection during orchestration. For
  # more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Carrier. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [Attribute]

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime
}

#  The attribute of carrier
type CarrierAttribute {
  #  ID of the object
  id: ID!
  name: String!
  value: String!

  #  Carrier details
  carrierDetails: CarrierDetails

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime
}

#  A list of results that matched against a CarrierAttribute search query
type CarrierAttributeConnection {
  #  A list of edges that links to CarrierAttribute type node
  edges: [CarrierAttributeEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a CarrierAttribute connection to the CarrierAttribute type
type CarrierAttributeEdge {
  #  The item at the end of the CarrierAttribute edge
  node: CarrierAttribute

  #  A cursor for use in pagination
  cursor: String
}

#  A list of results that matched against a Carrier search query
type CarrierConnection {
  #  A list of edges that links to Carrier type node
  edges: [CarrierEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  A `Consignment` is the object representing the booking of an article for delivery.
type CarrierConsignment implements Node, Referenceable, Extendable {
  #  ID of the object
  id: ID!

  #  External reference of the `Consignment`. Must be unique.
  ref: String!

  #  The status of the consignment
  status: String

  #  The external consignment reference assigned by the carrier
  consignmentReference: String

  #  Tracking label of the consignment
  trackingLabel: String

  #  The URL used to retrieve the shipping label
  labelUrl: String

  #  A url to represent the order summary. Usually the manifest url from the service provider.
  orderSummaryUrl: String

  #  Relationships between consignment and article
  carrierConsignmentArticles(
    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CarrierConsignmentArticleConnection

  #  Carrier used for the consignment
  carrier: Carrier

  #  Retailer who is booking the consignment
  retailer: Retailer

  #  Manifests that contain the consignment
  manifests(
    #  External reference for the `Manifest`. Must be unique.
    ref: [String!]

    #  The name of the `Manifest`
    name: [String]

    #  The type of `Manifest`
    type: [String!]

    #  The status of the `Manifest`
    status: [String]

    #  The reference used for workflow identification
    workflowRef: [String!]

    #  The version of the workflow
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  The link where the carrier's manifest is stored. Not all the carriers generates one, so this field is optional.
    carrierManifestLink: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ManifestConnection

  #  A list of attributes associated with this Consignment. This can be used to
  # extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [Attribute]

  #  The reference used for workflow identification
  workflowRef: String!

  #   The version of the workflow
  workflowVersion: Int!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime
}

#  The relationship between carrierConsignment and article
type CarrierConsignmentArticle {
  #  Article
  article: Article

  #  Consignment
  carrierConsignment: CarrierConsignment
}

#  A list of results that matched against a CarrierConsignmentArticle search query
type CarrierConsignmentArticleConnection {
  #  A list of edges that links to CarrierConsignmentArticle type node
  edges: [CarrierConsignmentArticleEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a CarrierConsignmentArticle connection to the CarrierConsignmentArticle type
type CarrierConsignmentArticleEdge {
  #  The item at the end of the CarrierConsignmentArticle edge
  node: CarrierConsignmentArticle

  #  A cursor for use in pagination
  cursor: String
}

# CarrierConsignmentArticle
input CarrierConsignmentArticleId {
  article: ArticleId
  carrierConsignment: CarrierConsignmentKey
}

#  A list of results that matched against a CarrierConsignment search query
type CarrierConsignmentConnection {
  #  A list of edges that links to CarrierConsignment type node
  edges: [CarrierConsignmentEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a CarrierConsignment connection to the CarrierConsignment type
type CarrierConsignmentEdge {
  #  The item at the end of the CarrierConsignment edge
  node: CarrierConsignment

  #  A cursor for use in pagination
  cursor: String
}

#  The `CarrierConsignmentKey` input is the external_reference, for identifying a specific ConsignmentNoteEntity.
input CarrierConsignmentKey {
  #  External reference of the `Consignment`. Must be unique.
  ref: String!
}

#  The details of carrier
type CarrierDetails {
  #  ID of the object
  id: ID!

  #  Retailer ID of carrier details
  retailerId: String

  #  Location ID of carrier details
  agentId: String

  #  Carrier ID of carrier details
  carrierId: String
  attributes(
    name: [String!]
    value: [String!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CarrierAttributeConnection

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime
}

#  A list of results that matched against a CarrierDetails search query
type CarrierDetailsConnection {
  #  A list of edges that links to CarrierDetails type node
  edges: [CarrierDetailsEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a CarrierDetails connection to the CarrierDetails type
type CarrierDetailsEdge {
  #  The item at the end of the CarrierDetails edge
  node: CarrierDetails

  #  A cursor for use in pagination
  cursor: String
}

#  The edge in a Carrier connection to the Carrier type
type CarrierEdge {
  #  The item at the end of the Carrier edge
  node: Carrier

  #  A cursor for use in pagination
  cursor: String
}

#  Input type to uniquely identify a `Carrier`
input CarrierId {
  #  ID of the object
  id: ID!
}

#  Input type to uniquely identify a `Carrier`
input CarrierKey {
  #  Reference of the object
  ref: String!
}

type CatalogueLink {
  ref: String
}

#  A `Category` can be associated with Product Catalogues and Products. It has a
# tree-like structure, where each Category may contain a parent category, and / or
# one or more child categories. This new Category structure allows support for
# more advanced category hierarchies. The `ref` field will be the unique
# identifier for this Category within the specified Product Catalogue, as
# identified by the `catalogue` field. <br /><br />
#  The `Category` is an orchestrateable entity. Events for these should specify a
# parent entity of Product Catalogue. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
type Category implements Node, Referenceable, Orchestrateable, Extendable {
  #  ID of the object. For internal use, should not be used externally or by any business logic
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  The unique reference identifier for the Category
  ref: String!

  #  Type of the `Category`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  The current status of the `Category`.<br/>By default, the initial value will
  # be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Category. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [Attribute]

  #  The name of the Category
  name: String!

  #  A short description of the Category
  summary: String

  #  The Product Catalogue in which this Category is managed
  catalogue: ProductCatalogue!

  #  This Category's immediate parent Category
  parentCategory: Category

  #  A connection to the immediate child Categories (NOTE: This currently does not traverse the entire tree)
  childCategories(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Category
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  The name of the Category
    name: [String!]

    #  A short description of the Category
    summary: [String]
    catalogue: ProductCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CategoryConnection
}

#  A list of results that matched against a Category search query
type CategoryConnection {
  #  A list of edges that links to Category type node
  edges: [CategoryEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Category connection to the Category type
type CategoryEdge {
  #  The item at the end of the Category edge
  node: Category

  #  A cursor for use in pagination
  cursor: String
}

#  The `CategoryKey` input is the parameter for identifying a specific Category.
input CategoryKey {
  #  Category reference identifier
  ref: String!

  #  The Product Catalogue in which this Category resides
  catalogue: ProductCatalogueKey!
}

#  Represents a text based comment. A `comment` can be added against an existing entity object. <br /> <br />
#  **Usage**<br /><br/>
#  Use the combination of an entity's `entityType` and `entityId` values to associate a comment against that entity.
type Comment implements Node {
  #  ID of the object
  id: ID!

  #  Type of the entity. For example `ORDER`, `FULFILMENT`, `ORDERITEM`, `PRODUCTCATALOGUE` etc.
  entityType: String!

  #  ID of the entity
  entityId: ID!

  #  Comment text
  text: String!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime
}

#  A list of results that matched against a Comment search query
type CommentConnection {
  #  A list of edges that links to Comment type node
  edges: [CommentEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Comment connection to the Comment type
type CommentEdge {
  #  The item at the end of the Comment edge
  node: Comment

  #  A cursor for use in pagination
  cursor: String
}

input CommentId {
  #  ID of the object
  id: ID!
}

#  A `Consignment` is the object representing the booking of an article for delivery.
type Consignment implements Node {
  #  ID of the object
  id: ID!

  #  External reference of the object. Recommended to be unique.
  ref: String

  #  The status of the consignment
  status: String

  #  The external consignment reference assigned by the carrier
  consignmentReference: String!

  #  Tracking label of the consignment
  trackingLabel: String

  #  The URL used to retrieve the shipping label
  labelUrl: String

  #  A url to represent the order summary. Usually the manifest url from the service provider.
  orderSummaryUrl: String

  #  Relationships between consignment and article
  consignmentArticles(
    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ConsignmentArticleConnection

  #  Carrier used for the consignment
  carrier: Carrier

  #  Retailer who is booking the consignment
  retailer: Retailer

  #  The reference used for workflow identification
  workflowRef: String!

  #   The version of the workflow
  workflowVersion: Int!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime
}

#  The relationship between consignment and article
type ConsignmentArticle {
  #  Article
  article: Article

  #  Consignment
  consignment: Consignment
}

#  A list of results that matched against a ConsignmentArticle search query
type ConsignmentArticleConnection {
  #  A list of edges that links to ConsignmentArticle type node
  edges: [ConsignmentArticleEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a ConsignmentArticle connection to the ConsignmentArticle type
type ConsignmentArticleEdge {
  #  The item at the end of the ConsignmentArticle edge
  node: ConsignmentArticle

  #  A cursor for use in pagination
  cursor: String
}

# ConsignmentArticle
input ConsignmentArticleId {
  article: ArticleId
  consignment: ConsignmentId
}

#  A list of results that matched against a Consignment search query
type ConsignmentConnection {
  #  A list of edges that links to Consignment type node
  edges: [ConsignmentEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Consignment connection to the Consignment type
type ConsignmentEdge {
  #  The item at the end of the Consignment edge
  node: Consignment

  #  A cursor for use in pagination
  cursor: String
}

#  The `ConsignmentId` input is the generated id.
input ConsignmentId {
  #  ID of the object
  id: ID!
}

type Control implements Node, Referenceable, Orchestrateable, Extendable {
  #  ID of the object. For internal use, should not be used externally or by any business logic
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  The reference identifier used to identify an entity
  ref: String!

  #  Type of the `Control`, typically used by the Orchestration Engine to determine
  # the workflow that should be applied. Unless stated otherwise, no values are
  # enforced by the platform.<br/>
  type: String!

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  The current status of the `Control`.<br/>By default, the initial value will be
  # CREATED, however no other status values are enforced by the platform.<br/>The
  # status field is also used within ruleset selection during orchestration. For
  # more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  Name
  name: String

  #  Description
  description: String

  #  values
  values: [Attribute]

  #  List of Attribute containing meta data information for an entity
  attributes: [Attribute]

  #  Order that this control is applied
  executionOrder: Int

  #  Control Group
  controlGroup: ControlGroup
}

#  A list of results that matched against a Control search query
type ControlConnection {
  #  A list of edges that links to Control type node
  edges: [ControlEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Control connection to the Control type
type ControlEdge {
  #  The item at the end of the Control edge
  node: Control

  #  A cursor for use in pagination
  cursor: String
}

type ControlGroup implements Node, Referenceable, Orchestrateable, Extendable {
  #  ID of the object. For internal use, should not be used externally or by any business logic
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  The reference identifier used to identify an entity
  ref: String!

  #  Type of the `ControlGroup`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  The current status of the `ControlGroup`.<br/>By default, the initial value
  # will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  Name
  name: String

  #  Description
  description: String

  #  Retailer refs
  retailerRefs: [String]

  #  List of Attribute containing meta data information for an entity
  attributes: [Attribute]

  #  Controls
  controls(
    createdOn: DateRange
    updatedOn: DateRange

    #  The reference identifier used to identify an entity
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  Name
    name: [String]

    #  Description
    description: [String]

    #  Order that this control is applied
    executionOrder: [Int]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ControlConnection
}

#  A list of results that matched against a ControlGroup search query
type ControlGroupConnection {
  #  A list of edges that links to ControlGroup type node
  edges: [ControlGroupEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a ControlGroup connection to the ControlGroup type
type ControlGroupEdge {
  #  The item at the end of the ControlGroup edge
  node: ControlGroup

  #  A cursor for use in pagination
  cursor: String
}

#  The `ControlGroupKey` input is the parameter for identifying a specific Catalogue Control Group
input ControlGroupKey {
  #  Control Group reference identifier
  ref: String!
}

#  The `ControlKey` input is the parameter for identifying a specific Catalogue Control
input ControlKey {
  #  Control reference identifier
  ref: String!

  #  Control Group
  controlGroup: ControlGroupKey!
}

# Article
input CreateArticleInput {
  ref: String!

  #  Type of the `Article`, typically used by the Orchestration Engine to determine
  # the workflow that should be applied. Unless stated otherwise, no values are
  # enforced by the platform.<br/>
  type: String!
  attributes: [AttributeInput]
  articleNumber: String
  barcodeArticleNumber: String
  description: String
  height: Float!
  length: Float!
  name: String
  purchaseValue: String
  weight: Float!
  width: Float!
  expiryDate: DateTime
  quantity: Int
  items: [CreateArticleItemWithArticleInput]
  fulfilments: [FulfilmentId]!
  storageArea: StorageAreaId
}

# ArticleItem
input CreateArticleItemWithArticleInput {
  quantity: Int!
  barcode: String
}

input CreateBillingAccountInput {
  #  External reference to the `BillingAccount`. Must be unique.
  ref: String!

  #  Type of the `BillingAccount`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied.
  type: String!

  #  Name of the `BillingAccount`.
  name: String!

  #  Retailer associated to the `BillingAccount`.
  retailer: RetailerId!

  #  Customer associated to the `BillingAccount`.
  customer: CustomerKey

  #  A list of attributes associated with the `BillingAccount`. This can be used to
  # extend the existing data structure with additional data.
  attributes: [AttributeInput]

  #  Address associated to the `BillingAccount`.
  address: StreetAddressInput
}

#  Input for creating a `CarrierConsignment` object.
input CreateCarrierConsignmentInput {
  #  External reference of the object. Must be unique.
  ref: String!

  #  The external consignment reference assigned by the carrier
  consignmentReference: String

  #  Tracking label of the consignment
  trackingLabel: String

  #  The URL used to retrieve the shipping label
  labelUrl: String

  #  A url to represent the order summary. Usually the manifest url from the service provider.
  orderSummaryUrl: String

  #  Carrier used for the consignment
  carrier: CarrierId!

  #  Retailer who is booking the consignment
  retailer: RetailerId!

  #  Input for creating `ConsignmentArticle`s for this consignment
  carrierConsignmentArticles: [CreateConsignmentArticleWithConsignmentInput]!

  #  A list of attributes associated with this Consignment. This can be used to
  # extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [AttributeInput]
}

#  Input type to create a `Carrier`
input CreateCarrierInput {
  #  The unique reference identifier for the `Carrier`
  ref: String!

  #  Name of the carrier
  name: String!

  #  ID of the retailer
  retailer: RetailerId!

  #  Type of the `Carrier`, typically used by the Orchestration Engine to determine
  # the workflow that should be applied. Unless stated otherwise, no values are
  # enforced by the platform.<br/>
  type: String!

  #  A list of attributes associated with this Carrier. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]
}

#  Input parameter for the `createCategory` mutation. A category `ref` should be
# unique within the bounds of the specified `catalogue`, which together makes up
# the unique identifier for the `Category` record. <br /><br />
#  The following default values will be set on creation:
#  * `status` = `CREATED`
#  * `workflowRef` = `PRODUCT_CATALOGUE::<product_catalogue.type>`
#  * `workflowVersion` = `<Workflow.majorVersion>.<Workflow.minorVersion>` . <br /><br />
#  After data persistence, an orchestration event will be fired providing the
# opportunity to perform business logic within a workflow. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input CreateCategoryInput {
  #  The reference identifier used to identify an single `Category` within a
  # `ProductCatalogue`. The `ref` must be unique within a `ProductCatalogue`.
  ref: String!

  #  The reference of the `ProductCatalogue` in which this `Category` will reside. The `ProductCatalogue` must already exist.
  catalogue: ProductCatalogueKey!

  #  Type of the `Category`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  A list of attributes associated with this Category. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  The name of the Category
  name: String!

  #  A short description of the Category
  summary: String

  #  The reference to the parent of this `Category`, if any. The parent `Category`
  # must be a part of the same `ProductCatalogue` (see `catalogue` field). The
  # parent `Category` must already exist.
  parentCategory: CategoryKey

  #  List of child `Category` references, if any. Child categories must be a part
  # of the same `ProductCatalogue` (see `catalogue` field). The child `Category`
  # must already exist.
  childCategories: [CategoryKey]
}

#  Input for creating a `comment` against a known entity
input CreateCommentInput {
  #  Type of the entity. For example `ORDER`, `FULFILMENT`, `ORDERITEM`, `PRODUCTCATALOGUE` etc.
  entityType: String!

  #  ID of the entity <br/>
  #  Note: Please note that while the type of this field is `ID`, currently it only supports _Integer_ values.
  entityId: ID!

  #  Comment text
  text: String!
}

#  Input for creating `ConsignmentArticle`s with the `CreateConsignment` request.
input CreateConsignmentArticleWithConsignmentInput {
  article: ArticleId
}

#  Input for creating a `Consignment` object.
input CreateConsignmentInput {
  #  External reference of the object. Recommended to be unique.
  ref: String!

  #  The external consignment reference assigned by the carrier
  consignmentReference: String!

  #  Tracking label of the consignment
  trackingLabel: String

  #  The URL used to retrieve the shipping label
  labelUrl: String

  #  A url to represent the order summary. Usually the manifest url from the service provider.
  orderSummaryUrl: String

  #  Carrier used for the consignment
  carrier: CarrierId!

  #  Retailer who is booking the consignment
  retailer: RetailerId!

  #  Input for creating `ConsignmentArticle`s for this consignment
  consignmentArticles: [CreateConsignmentArticleWithConsignmentInput]!
}

#  Input parameter for the `CreateControlGroup` mutation. The `ref` field will be
# the unique identifier for this catalogue. <br /><br />
#  The following default values will be set on creation:
#  * `status` = `CREATED`
#  * `workflowVersion` = `<Workflow.majorVersion>.<Workflow.minorVersion>` . <br /><br />
#  After data persistence, an orchestration event will be fired providing the
# opportunity to perform business logic within a workflow. <br /><br />
#  For more information, please refer to the https://lingo.fluentretail.com/display/LIN/Global+Inventory
input CreateControlGroupInput {
  #  The reference identifier used to identify an entity
  ref: String!

  #  Type of the `ControlGroup`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  Name
  name: String!

  #  Description
  description: String

  #  List of Attribute containing meta data information for this entity
  attributes: [AttributeInput]

  #  Retailer refs
  retailerRefs: [String]
}

#  Input parameter for the `createControl` mutation. A control `ref` should be
# unique within the bounds of the specified `catalogue`, which together makes up
# the unique identifier for the `catalogue control` record. <br /><br />
#  The following default values will be set on creation:
#  * `status` = `CREATED`
#  * `workflowVersion` = `<Workflow.majorVersion>.<Workflow.minorVersion>` . <br /><br />
#  After data persistence, an orchestration event will be fired providing the
# opportunity to perform business logic within a workflow. <br /><br />
#  For more information, please refer to the https://lingo.fluentretail.com/display/LIN/Global+Inventory
input CreateControlInput {
  #  The reference identifier used to identify an entity
  ref: String!

  #  Type of the `Control`, typically used by the Orchestration Engine to determine
  # the workflow that should be applied. Unless stated otherwise, no values are
  # enforced by the platform.<br/>
  type: String!

  #  Name
  name: String!

  #  Description
  description: String

  #  values
  values: [AttributeInput]

  #  Control Group
  controlGroup: ControlGroupKey!

  #  List of Attribute containing meta data information for this entity
  attributes: [AttributeInput]

  #  Order that this control is applied
  executionOrder: Int
}

input CreateCreditMemoInput {
  #  External reference to the `CreditMemo`. Must be unique.
  ref: String!

  #  Type of the `CreditMemo`, typically used by the Orchestration Engine to determine the workflow that should be applied.
  type: String!

  #  A list of attributes associated with the `CreditMemo`. This can be used to
  # extend the existing data structure with additional data.
  attributes: [AttributeInput]

  #  `BillingAccount` associated with the `CreditMemo`.
  billingAccount: BillingAccountKey!

  #  The `CreditMemoItem`s associated with this `CreditMemo`.
  items: [CreateCreditMemoItemWithCreditMemoInput]

  #  `Invoice` associated with this `CreditMemo`.
  invoice: InvoiceKey

  #  Reference to an `Order` associated with the `CreditMemo`.
  order: OrderLinkInput

  #  Reference to a `ReturnOrder` associated with the `CreditMemo`.
  returnOrder: ReturnOrderKey

  #  Issue date
  issueDate: DateTime!

  #  Reference to the `Currency`.
  #  The default Tax Type for this credit memo. Individual credit memo items can override
  currency: CurrencyKey!

  #  Default tax type
  defaultTaxType: TaxTypeInput!

  #  The total amount of this credit memo excluding tax
  subTotalAmount: AmountTypeInput!

  #  The total amount of tax for this credit memo
  totalTax: AmountTypeInput!

  #  The total amount of this credit memo including tax
  totalAmount: AmountTypeInput!

  #  The total amount of this credit memo yet to be paid. (This caters for multi-part payments and payment milestones)
  totalBalance: AmountTypeInput!
}

input CreateCreditMemoItemInput {
  #  External reference to the `CreditMemoItem`. Must be unique.
  ref: String!

  #  Type of the `CreditMemoItem`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied.
  type: String!

  #  Description of the `CreditMemoItem`.
  description: String

  #  Credit reason code of the `CreditMemoItem`.
  creditReasonCode: SettingValueTypeInput

  #  `CreditMemo` associated with the `CreditMemoItem`.
  creditMemo: CreditMemoKey!

  #  Reference to an `OrderItem` associated with the `CreditMemoItem`.
  orderItem: OrderItemLinkInput

  #  Reference to a `ReturnOrderItem` associated with the `CreditMemoItem`.
  returnOrderItem: ReturnOrderItemKey

  #  Reference to a `Product` associated with the `CreditMemoItem`.
  product: ProductKey

  #  `unitQuantity` holds separately the amount and the unit associated.
  unitQuantity: QuantityTypeInput!

  #  The tax type of this item. Should only be provided if different to the default credit memo tax type.
  unitTaxType: TaxTypeInput

  #  The unit sale price at time of sale or exchange
  unitAmount: AmountTypeInput!

  #  The unit cost price at time of sale or exchange.
  unitCostAmount: AmountTypeInput

  #  The item amount for this item excluding tax. This is a calculated value based
  # on business rules that does not necessarily have to take into account the unit
  # quantity or amounts.
  amount: AmountTypeInput!

  #  The tax amount for this item. If not present at the item level, tax amount
  # should be generated based on the tax type set at the invoice parent level.
  taxAmount: AmountTypeInput!
}

input CreateCreditMemoItemWithCreditMemoInput {
  #  External reference to the `CreditMemoItem`. Must be unique.
  ref: String!

  #  Type of the `CreditMemoItem`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied.
  type: String!

  #  Description of the `CreditMemoItem`.
  description: String

  #  Credit reason code of the `CreditMemoItem`.
  creditReasonCode: SettingValueTypeInput

  #  Reference to an `OrderItem` associated with the `CreditMemoItem`.
  orderItem: OrderItemLinkInput

  #  Reference to a `ReturnOrderItem` associated with the `CreditMemoItem`.
  returnOrderItem: ReturnOrderItemKey

  #  Reference to a `Product` associated with the `CreditMemoItem`.
  product: ProductKey

  #  `unitQuantity` holds separately the amount and the unit associated.
  unitQuantity: QuantityTypeInput!

  #  The tax type of this item. Should only be provided if different to the default credit memo tax type.
  unitTaxType: TaxTypeInput

  #  The unit sale price at time of sale or exchange
  unitAmount: AmountTypeInput!

  #  The unit cost price at time of sale or exchange.
  unitCostAmount: AmountTypeInput

  #  The item amount for this item excluding tax. This is a calculated value based
  # on business rules that does not necessarily have to take into account the unit
  # quantity or amounts.
  amount: AmountTypeInput!

  #  The tax amount for this item. If not present at the item level, tax amount
  # should be generated based on the tax type set at the invoice parent level.
  taxAmount: AmountTypeInput!
}

# CustomerAddress
input CreateCustomerAddressInput {
  ref: String!
  companyName: String
  name: String
  street: String
  city: String
  state: String
  postcode: String
  region: String
  country: String
  latitude: Float
  longitude: Float
  timeZone: String
}

# Customer
input CreateCustomerInput {
  username: String!
  attributes: [AttributeInput]
  title: String
  department: String
  country: String
  firstName: String!
  lastName: String
  primaryEmail: String!
  primaryPhone: String
  timezone: String!
  promotionOptIn: Boolean!
  retailer: RetailerId!
}

# Financial Transaction
input CreateFinancialTransactionInput {
  ref: String!

  #  Type of the `FinancialTransaction`, typically used by the Orchestration Engine
  # to determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!
  amount: Float!
  currency: String!
  externalTransactionCode: String
  externalTransactionId: String
  cardType: String
  paymentMethod: String!
  paymentProvider: String
  order: OrderId!
}

# FulfilmentChoice
input CreateFulfilmentChoiceWithOrderInput {
  currency: String
  deliveryInstruction: String
  deliveryType: String!
  fulfilmentPrice: Float
  fulfilmentTaxPrice: Float
  fulfilmentType: String
  pickupLocationRef: String
  deliveryAddress: CreateCustomerAddressInput
}

#  Input type to create a `Fulfilment`
input CreateFulfilmentInput {
  #  External reference. Recommended to be unique.
  ref: String!

  #  List of `attribute`s
  attributes: [AttributeInput]

  #  Type of delivery. Supported values are _STANDARD_, _OVERNIGHT_ and _EXPRESS_.
  deliveryType: String

  #  Type of the `Fulfilment`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  #  Type of fulfilment. Supported types are <br/>
  #  - *CC_PFS* for Click & Collect - Pick from Store
  #  - *CC_PFDC* for Click & Collect - Pick from DC
  #  - *HD_PFS* for Home Delivery - Pick from Store
  #  - *HD_PFDC* for Home Delivery - Pick from DC
  type: String!

  #  Estimated time of completing this fulfilment
  eta: String

  #  Expiry time of the fulfilment
  expiryTime: DateTime

  #  Represents the associated `Order`
  order: OrderId!

  #  Represents `Address` fulfilling this fulfilment
  fromAddress: AddressId

  #  Represents the delivery `Address`
  toAddress: AddressId

  #  Represents the associated `Customer`
  customer: CustomerId

  #  List of `FulfilmentItem`s
  items: [CreateFulfilmentItemWithFulfilmentInput]
}

#  Input type to create a `FulfilmentItem` with a `Fulfilment`. Intended to be used
# as an inline input in the _createFulfilment_ mutation.
input CreateFulfilmentItemWithFulfilmentInput {
  #  External reference. Recommended to be unique.
  ref: String!

  #  Number of `OrderItem`s assigned to the fulfilment
  requestedQuantity: Int

  #  Number of `OrderItem`s confirmed
  filledQuantity: Int!

  #  Number of `OrderItem`s rejected
  rejectedQuantity: Int!

  #  Associated `OrderItem`
  orderItem: OrderItemId!
}

#  Address type to be used in `FulfilmentOption`
input CreateFulfilmentOptionAddressInput {
  #  Name
  name: String

  #  Company Name
  companyName: String

  #  First address line
  addressLine1: String

  #  Second address line
  addressLine2: String

  #  City or Town
  city: String

  #  Country
  country: String

  #  Postcode or Zipcode
  postcode: String

  #  State or County
  state: String

  #  Geographical coordinate that specifies the north–south position of a point on the Earth's surface
  latitude: Float

  #  Geographical coordinate that specifies the east–west position of a point on the Earth's surface
  longitude: Float
}

#  Input type to create a `FulfilmentOption` object.
input CreateFulfilmentOptionInput {
  #  External reference. Recommended to be unique.
  ref: String!

  #  Type of the `FulfilmentOption`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  ID of the `Retailer`, typically used by the Orchestration Engine to determine the workflow that should be applied.
  retailerId: Int!

  #  Type of order. For example _click & collect (CC)_ or _home delivery (HD)_
  orderType: String

  #  The reference identifier for a location. May be used in orchestration rules to
  # drive custom business logic. For example, you can have a rule to return plans only from this
  #   location or a rule to return plans from all locations but excluding this one.
  locationRef: String

  #  A unique identifier for the clients to group related Fulfilment Plans.
  trackingCode: String

  #  A type for passing address. Can be used as an input in creating Fulfilment Plans.
  address: CreateFulfilmentOptionAddressInput

  #  Products being queried for availability
  products: [CreateFulfilmentOptionProductInput]

  #  A list of attributes associated with this object. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]
}

#  Input type to create a `FulfilmentOptionProduct`.
input CreateFulfilmentOptionProductInput {
  #  A reference to identify a Product
  productRef: String!

  #  A reference to identify the catalogue for the product
  catalogueRef: String

  #  The requested quantity for the product
  requestedQuantity: Int
}

#  Input type to create a new `FulfilmentPlanException` type
input CreateFulfilmentPlanExceptionInput {
  #  The exception code
  code: String

  #  The english like description of the exception
  message: String

  #  Attributes may contain useful information about the exception
  attributes: [AttributeInput]
}

#  Represents a fulfilment under a `FulfilmentPlan`
input CreateFulfilmentPlanFulfilmentInput {
  #  Type of fulfilment.
  fulfilmentType: String

  #  Reference to identify the fulfilment location for this fulfilment.
  locationRef: String

  #  ETA of the `FulfilmentPlan` as configured in the workflow
  eta: String

  #  List of products with their requested and available quantities
  items: [CreateFulfilmentPlanFulfilmentItemInput]
}

#  Input type to create `FulfilmentPlanFulfilmentItem`.
input CreateFulfilmentPlanFulfilmentItemInput {
  #  External reference of the product.
  productRef: String!

  #  A reference to identify the Catalogue
  catalogueRef: String

  #  Quantity of the product available as per the plan
  availableQuantity: Int!

  #  Requested quantity of the product.
  requestedQuantity: Int!
}

#  Input type to create a `FulfilmentPlan` object.
input CreateFulfilmentPlanInput {
  #  External reference. Recommended to be unique.
  ref: String!

  #  Type of the `FulfilmentPlan`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  Order split limits
  splits: Int

  #  ETA of the `FulfilmentPlan`. Although this can be set explicitly, we recommend
  # that this be determined and set in the workflow.
  eta: String

  #  ID of the retailer
  retailerId: Int!

  #  A list of attributes associated with this object. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  associated `FulfilmentOption` object
  fulfilmentOptionId: FulfilmentOptionId!

  #  Represents fulfilments under this Fulfilment Plan
  fulfilments: [CreateFulfilmentPlanFulfilmentInput]

  #  A list of exceptions.
  exceptions: [CreateFulfilmentPlanExceptionInput]
}

#  Input parameter for the `createGroupProduct` mutation. A group product `ref`
# should be unique within the bounds of the specified `catalogue`, which together
# makes up the unique identifier for the `GroupProduct` record. <br /><br />
#  The following default values will be set on creation:
#  * `status` = `CREATED`
#  * `workflowRef` = `PRODUCT_CATALOGUE::<product_catalogue.type>`
#  * `workflowVersion` = `<Workflow.majorVersion>.<Workflow.minorVersion>` . <br /><br />
#  After data persistence, an orchestration event will be fired providing the
# opportunity to perform business logic within a workflow. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input CreateGroupProductInput {
  #  The unique reference identifier for the Product
  ref: String!

  #  The Product Catalogue in which this Product is managed
  catalogue: ProductCatalogueKey!

  #  Type of the `GroupProduct`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  A list of attributes associated with this Product. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  The name of the Product
  name: String!

  #  A short description of the Product (max 255 chars)
  summary: String

  #  A list of references to the `Category`'s to which this `Product` relates.
  # Product categories must be a part of the same `ProductCatalogue` (see
  # `catalogue` field). The `Category` must already exist.
  categories: [CategoryKey]

  #  A list of Prices for this Product
  prices: [PriceInput]

  #  The tax information for this Product
  taxType: TaxTypeInput

  #  A list of Products within the group
  products: [ProductKey]
}

#  Input parameter for the `createInventoryCatalogue` mutation. The `ref` field
# will be the unique identifier for this catalogue. <br /><br />
#  The following default values will be set on creation:
#  * `status` = `CREATED`
#  * `workflowRef` = `INVENTORY_CATALOGUE::<inventory_catalogue.type>`
#  * `workflowVersion` = `<Workflow.majorVersion>.<Workflow.minorVersion>` . <br /><br />
#  After data persistence, an orchestration event will be fired providing the
# opportunity to perform business logic within a workflow. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input CreateInventoryCatalogueInput {
  #  The unique reference identifier for the Inventory Catalogue
  ref: String!

  #  Type of the `InventoryCatalogue`, typically used by the Orchestration Engine
  # to determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  A list of attributes associated with this Inventory Catalogue. This can be
  # used to extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [AttributeInput]

  #  The name of the Inventory Catalogue
  name: String!

  #  A short description of the Inventory Catalogue
  description: String

  #  A list of Retailer references associated with this Inventory Catalogue
  retailerRefs: [String]
}

#  Input parameter for the `createInventoryPosition` mutation. An inventory
# position `ref` should be unique within the bounds of the specified `catalogue`,
# which together makes up the unique identifier for the `InventoryPosition`
# record. <br /><br />
#  The following default values will be set on creation:
#  * `status` = `CREATED`
#  * `workflowRef` = `INVENTORY_CATALOGUE::<inventory_catalogue.type>`
#  * `workflowVersion` = `<Workflow.majorVersion>.<Workflow.minorVersion>` . <br /><br />
#  After data persistence, an orchestration event will be fired providing the
# opportunity to perform business logic within a workflow. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input CreateInventoryPositionInput {
  #  The unique reference identifier for the Inventory Position
  ref: String!

  #  The Inventory Catalogue in which this Position is managed
  catalogue: InventoryCatalogueKey!

  #  Type of the `InventoryPosition`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  A list of attributes associated with this Inventory Position. This can be used
  # to extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [AttributeInput]

  #  A reference identifying a Product. The referenced product may or may not exist
  # within one or more Product Catalogues. This is a loosely coupled association,
  # since Product and Inventory are separate domains.
  productRef: String!

  #  The calculated on hand quantity based on the associated quantities, and rules in the orchestration workflow
  onHand: Int

  #  A reference identifying the Location where this inventory exists. This is a loosely coupled association.
  locationRef: String!

  #  A list of Inventory Quantities associated with this Position
  quantities: [InventoryQuantityKey]
}

#  Input parameter for the `createInventoryQuantity` mutation. An inventory
# quantity `ref` should be unique within the bounds of the specified `catalogue`,
# which together makes up the unique identifier for the `InventoryQuantity`
# record. <br /><br />
#  The following default values will be set on creation:
#  * `status` = `CREATED`
#  * `workflowRef` = `INVENTORY_CATALOGUE::<inventory_catalogue.type>`
#  * `workflowVersion` = `<Workflow.majorVersion>.<Workflow.minorVersion>` . <br /><br />
#  After data persistence, an orchestration event will be fired providing the
# opportunity to perform business logic within a workflow. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input CreateInventoryQuantityInput {
  #  The unique reference identifier for the Inventory Quantity
  ref: String!

  #  The Inventory Catalogue in which this Position is managed
  catalogue: InventoryCatalogueKey!

  #  The associated parent Inventory Position of which this Quantity applies
  position: InventoryPositionKey!

  #  Type of the `InventoryQuantity`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  A list of attributes associated with this Inventory Quantity. This can be used
  # to extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [AttributeInput]

  #  The actual amount of this specific Quantity record
  quantity: Int!

  #  The condition of the Inventory Quantity value. The platform does not enforce
  # any values here. Examples could include `NEW`, `USED`, or `DAMAGED`
  condition: String

  #  The date and time the quantity is expected to arrive
  expectedOn: DateTime

  #  A reference to the Storage Area where this inventory is kept
  storageAreaRef: String
}

#  `CreateInvoiceInput`
input CreateInvoiceInput {
  #  External reference to the `Invoice`. Must be unique.
  ref: String!

  #  Type of the `Invoice`, typically used by the Orchestration Engine to determine the workflow that should be applied.
  type: String!

  #  A list of attributes associated with the `Invoice`. This can be used to extend
  # the existing data structure with additional data.
  attributes: [AttributeInput]

  #  The `BillingAccount` associated with the `Invoice`.
  billingAccount: BillingAccountKey!

  #  Reference to the `Order` associated with this `Invoice`.
  order: OrderLinkInput

  #  The `InvoiceItem`s associated with this `Invoice`.
  items: [CreateInvoiceItemWithInvoiceInput]

  #  Issue date of the `Invoice`
  issueDate: DateTime!

  #  Due date of the `Invoice`
  dueDate: DateTime

  #  Reference to the `Currency`
  #  The default Tax Type for this invoice. Individual invoice items can override.
  currency: CurrencyKey!

  #  Default tax type
  defaultTaxType: TaxTypeInput!

  #  The total amount of this invoice excluding tax.
  subTotalAmount: AmountTypeInput!

  #  The total amount of tax for this invoice
  totalTax: AmountTypeInput!

  #  The total amount of this invoice including tax
  totalAmount: AmountTypeInput!

  #  The total amount of this invoice yet to be paid. (This caters for multi-part payments and payment milestones)
  totalBalance: AmountTypeInput!
}

#  Input type to create an `InvoiceItem` after the `Invoice` creation.
input CreateInvoiceItemInput {
  #  External reference to the `InvoiceItem`. Must be unique.
  ref: String!

  #  Type of the `InvoiceItem`, typically used by the Orchestration Engine to determine the workflow that should be applied.
  type: String!

  #  The `Invoice` this object is associated with
  invoice: InvoiceKey!

  #  Description of the `InvoiceItem`.
  description: String

  #  Reference to the `Product` associated with this object.
  product: ProductKey

  #  `unitQuantity` holds separately the amount and the unit associated.
  unitQuantity: QuantityTypeInput!

  #  The tax type of this item. Should only be provided if different to the default invoice tax type.
  unitTaxType: TaxTypeInput

  #  The unit price of the source item.
  unitAmount: AmountTypeInput!

  #  The item amount for this item excluding tax
  amount: AmountTypeInput!

  #  The tax amount for this item. If not present at the item level, tax amount
  # should be generated based on the tax type set at the invoice parent level.
  taxAmount: AmountTypeInput!
}

#  Input type to create an `InvoiceItem` with an `Invoice`. Intended to be used as
# an inline input in the createInvoice_mutation.
input CreateInvoiceItemWithInvoiceInput {
  #  External reference to the `InvoiceItem`. Must be unique.
  ref: String!

  #  Type of the `InvoiceItem`, typically used by the Orchestration Engine to determine the workflow that should be applied.
  type: String!

  #  Description of the `InvoiceItem`.
  description: String

  #  Reference to the `Product` associated with this object.
  product: ProductKey

  #  `unitQuantity` holds separately the amount and the unit associated.
  unitQuantity: QuantityTypeInput!

  #  The tax type of this item. Should only be provided if different to the default invoice tax type.
  unitTaxType: TaxTypeInput

  #  The unit price of the source item.
  unitAmount: AmountTypeInput!

  #  The item amount for this item excluding tax
  amount: AmountTypeInput!

  #  The tax amount for this item. If not present at the item level, tax amount
  # should be generated based on the tax type set at the invoice parent level.
  taxAmount: AmountTypeInput!
}

input CreateLocationInput {
  ref: String!
  type: String!
  attributes: [AttributeInput]
  name: String!
  supportPhoneNumber: String
  defaultCarrier: String
  primaryAddress: CreateStoreAddressInput!
  retailer: RetailerId!
  openingSchedule: CreateOpeningScheduleInput!
  networks: [NetworkId]
  storageAreas: [CreateStorageAreaWithLocationInput]
}

#  Input for the `createManifest` mutation. 
input CreateManifestInput {
  #  External reference for the `Manifest`. Must be unique.
  ref: String!

  #  The name of the `Manifest`
  name: String!

  #  Reference to the `Carrier` the `Manifest` is for
  carrier: CarrierKey!

  #  A list of attributes associated with the `Manifest`. This can be used to
  # extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [AttributeInput]

  #  The type of `Manifest`
  type: String!

  #  A list of references to the `Consignment`'s the `Manifest` contains.
  carrierConsignments: [CarrierConsignmentKey]

  #  The `Location` the `Manifest` is associated with
  location: LocationKey!

  #  The link where the carrier's manifest is stored. Not all the carriers generates one, so this field is optional.
  carrierManifestLink: String
}

#  Input type to create a `Network`
input CreateNetworkInput {
  #  Name of the network. Recommended to be unique as this is used as the reference for the network.
  name: String!

  #  Type of the network. For example you could use _CC_ for _Click and Collect_ or
  # _HD_ for _Home Delivery_. These types can be defined by the user and used by
  # the Orchestration
  #  Engine to determine the workflow that should be applied
  type: String

  #  List of the network's `attribute`s
  attributes: [AttributeInput]

  #  List of `retailer`s associated with this network
  retailers: [RetailerId!]!

  #  List of `location`s within this network
  locations: [LocationId]
}

input CreateNetworkWithRetailerInput {
  ref: String!
  type: String
  attributes: [AttributeInput]
}

# OpeningSchedule
input CreateOpeningScheduleInput {
  allHours: Boolean!
  monStart: Int!
  monEnd: Int!
  tueStart: Int!
  tueEnd: Int!
  wedStart: Int!
  wedEnd: Int!
  thuStart: Int!
  thuEnd: Int!
  friStart: Int!
  friEnd: Int!
  satStart: Int!
  satEnd: Int!
  sunStart: Int!
  sunEnd: Int!
}

#  Input type to create an `Order` while creating a new `Customer` in a single request
input CreateOrderAndCustomerInput {
  #  External reference for the order. Must be unique.
  ref: String!

  #  Type of the `Order`, typically used by the Orchestration Engine to determine
  # the workflow that should be applied. Unless stated otherwise, no values are
  # enforced by the platform.<br/>
  #  Type. Currently supports values _CC_, _SFS_, _HD_ for _Click and Collect_,
  # _Ship from Store_ and _Home Delivery_ type orders respectively
  type: String!

  #  List of order's `attribute`s
  attributes: [AttributeInput]

  #  `Retailer` for the order
  retailer: RetailerId!

  #  Total price
  totalPrice: Float

  #  Total tax price
  totalTaxPrice: Float

  #  `FulfilmentChoice` for the order
  fulfilmentChoice: CreateFulfilmentChoiceWithOrderInput

  #  `Customer` for the order
  customer: CreateCustomerInput!

  #  A list of `OrderItem`s for this order
  items: [CreateOrderItemWithOrderInput]!
}

#  Input type to create an `Order`
input CreateOrderInput {
  #  External reference for the order. Must be unique.
  ref: String!

  #  Type of the `Order`, typically used by the Orchestration Engine to determine
  # the workflow that should be applied. Unless stated otherwise, no values are
  # enforced by the platform.<br/>
  #  Type. Currently supports values _CC_, _SFS_, _HD_ for _Click and Collect_,
  # _Ship from Store_ and _Home Delivery_ type orders respectively.
  type: String!

  #  List of order `attribute`s
  attributes: [AttributeInput]

  #  `Retailer` for the order
  retailer: RetailerId!

  #  Total price
  totalPrice: Float

  #  Total tax price
  totalTaxPrice: Float

  #  `FulfilmentChoice` for the order
  fulfilmentChoice: CreateFulfilmentChoiceWithOrderInput

  #  `ID` of the `Customer` for the order
  customer: CustomerId!

  #  A list of `OrderItem`s for this order
  items: [CreateOrderItemWithOrderInput]!
}

#  `CreateOrderItemInput` is used to create an `OrderItem` separately of the `Order` creation. 
#  Intended to be used for order items exchanges, to add `OrderItem`s after the `Order` has been created.
input CreateOrderItemInput {
  #  External reference for the object. Recommended to be unique.
  ref: String!

  #  External reference for the associated product. Use together with productCatalogueRef to identify a particular `Product`
  productRef: String!

  #  External reference for the product catalogue containing the associated product
  # (specified using the `productRef` in this object).
  #  A product is always associated with a catalogue, that's why we recommend that you always pass a `productCatalogueRef`.
  #  However, if you are using the compatibility catalogue, you don't need to pass
  # in this value as that's the default catalogue
  productCatalogueRef: String!

  #  Quantity ordered
  quantity: Int!

  #  Price paid. Excludes tax.
  paidPrice: Float

  #  Currency. Should ideally be a 3 letter ISO currency code. For instance _AUD_.
  currency: String

  #  Price
  price: Float

  #  Tax price
  taxPrice: Float

  #  Tax type. Supported values are _GST_, _VAT_, _EXCLTAX_.
  taxType: String

  #  Total price
  totalPrice: Float

  #  Total tax price
  totalTaxPrice: Float

  #  List of `OrderItem` `attribute`s. There's expected a JSON object
  attributes: [AttributeInput]

  #  Contains the reference to the `Order` this item will be added to.   
  order: OrderKey!
}

#  Input type to create an `OrderItem` with an `Order`. Intended to be used as an inline input in the _createOrder_ mutation.
input CreateOrderItemWithOrderInput {
  #  External reference for the object. Recommended to be unique.
  ref: String!

  #  External reference for the associated product.
  productRef: String!

  #  External reference for the product catalogue containing the associated product
  # (specified using the `productRef` in this object).
  #  A product is always associated with a catalogue, that's why we recommend that you always pass a `productCatalogueRef`.
  #  However, if you are using the compatibility catalogue, you don't need to pass
  # in this value as that's the default catalogue
  productCatalogueRef: String

  #  Quantity ordered
  quantity: Int!

  #  Price paid. Excludes tax.
  paidPrice: Float

  #  Currency. Should ideally be a 3 letter ISO currency code. For instance _AUD_.
  currency: String

  #  Price
  price: Float

  #  Tax price
  taxPrice: Float

  #  Tax type. Supported values are _GST_, _VAT_, _EXCLTAX_.
  taxType: String

  #  Total price
  totalPrice: Float

  #  Total tax price
  totalTaxPrice: Float

  #  List of `OrderItem` `attribute`s. There's expected a JSON object
  attributes: [AttributeInput]
}

#  Input parameter for the `createProductCatalogue` mutation. The `ref` field will
# be the unique identifier for this catalogue. <br /><br />
#  The following default values will be set on creation:
#  * `status` = `CREATED`
#  * `workflowRef` = `PRODUCT_CATALOGUE::<product_catalogue.type>`
#  * `workflowVersion` = `<Workflow.majorVersion>.<Workflow.minorVersion>` . <br /><br />
#  After data persistence, an orchestration event will be fired providing the
# opportunity to perform business logic within a workflow. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input CreateProductCatalogueInput {
  #  The unique reference identifier for the Product Catalogue
  ref: String!

  #  Type of the `ProductCatalogue`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  A list of attributes associated with this Product Catalogue. This can be used
  # to extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [AttributeInput]

  #  The name of the Product Catalogue
  name: String!

  #  A short description of the Product Catalogue
  description: String

  #  A list of Retailer references associated with this Product Catalogue
  retailerRefs: [String]
}

# Retailer
input CreateRetailerInput {
  name: String!
  summary: String
  websiteUrl: String
  urlName: String
  primaryEmail: String
  supportContactName: String
  supportEmail: String
  supportPhone: String
  tradingName: String
  region: String
  networks: [CreateNetworkWithRetailerInput]
}

#  Input type to create a return fulfilment
input CreateReturnFulfilmentInput {
  #  External reference. Must be unique
  ref: String!

  #  Return order reference     
  returnOrder: ReturnOrderKey!

  #  Type of fulfilment 
  type: String!

  #  A list of attributes. Attributes can be used to extend the existing data
  # structure with additional data for use in orchestration rules, etc.    
  attributes: [AttributeInput]

  # The pickup address in the cases of return orders that are being picked up by a carrier
  pickupAddress: StreetAddressInput

  # The lodged location in cases where the return order was directly returned to a store or DC    
  lodgedLocation: LocationLinkInput

  # The destination of the return order items    
  destinationLocation: LocationLinkInput!

  # Add fulfilment items with fulfilment
  returnFulfilmentItems: [CreateReturnFulfilmentItemWithReturnFulfilmentInput]
}

# Input type to create a return fulfilment item 
input CreateReturnFulfilmentItemInput {
  #  External reference. Must be unique
  ref: String!

  # Return order fulfilment reference
  returnOrderFulfilment: ReturnFulfilmentKey!

  #  Reference of return order item 
  returnOrderItem: ReturnOrderItemKey!

  #  Unit quantity of return fulfilment item 
  unitQuantity: QuantityTypeInput!

  # Product reference 
  product: ProductKey

  #  A list of attributes. Attributes can be used to extend the existing data
  # structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]
}

# Input type to create a return fulfilment item when creating a return fulfilment 
input CreateReturnFulfilmentItemWithReturnFulfilmentInput {
  #  External reference. Must be unique
  ref: String!

  #  Return order item reference 
  returnOrderItem: ReturnOrderItemKey!

  #  Quantity of return fulfilment
  unitQuantity: QuantityTypeInput!

  #  Product reference 
  product: ProductKey

  #  A list of attributes. Attributes can be used to extend the existing data
  # structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]
}

#  Input type to create return order
input CreateReturnOrderInput {
  #  External reference of the return order. Must be unique
  ref: String!

  #  Retailer reference of return orders
  retailer: RetailerId!

  #  Type of the return order
  type: String!

  #  A list of attributes of the return order. Attributes can be used to extend the
  # existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  Customer reference of the return order. This links the customer to return order
  customer: CustomerKey!

  #  Linked order for this return order
  order: OrderLinkInput

  #  List of return verifications associated with the return order
  returnVerifications: [CreateReturnVerificationWithReturnOrderInput]

  #  The generated key representing an authorised return order which the customer
  # can use to progress through the return order process
  returnAuthorisationKey: String

  #  The authorised disposition for this return order. This can be different to the
  # return disposition action which reflects the actual action once an item has been inspected
  returnAuthorisationDisposition: SettingValueTypeInput

  #  The time at which the return authorisation expires
  returnAuthorisationKeyExpiry: DateTime

  #  The pickup address in the cases of return orders that are being picked up by a carrier
  pickupAddress: StreetAddressInput

  #  The lodged location in cases where the return order was directly returned to a store or DC
  lodgedLocation: LocationLinkInput

  #  The destination of the return order items
  destinationLocation: LocationLinkInput

  #  The list of associated return order items
  returnOrderItems: [CreateReturnOrderItemWithReturnOrderInput!]!

  #  The associated exchange order managed the exchange item
  exchangeOrder: OrderLinkInput

  #  The associated credit memo for this return order
  creditMemo: CreditMemoKey

  #  The currency of this return
  currency: CurrencyKey!

  #  The default Tax Type for this return order. Individual return order items can override
  defaultTaxType: TaxTypeInput!

  #  The total amount of this return order excluding tax
  subTotalAmount: AmountTypeInput!

  #  The total amount of tax for this return order
  totalTax: AmountTypeInput!

  #  The total amount of this return order including tax
  totalAmount: AmountTypeInput!
}

#  Input type to create return order items 
input CreateReturnOrderItemInput {
  #  External reference. Must be unique
  ref: String!

  #  Return order reference
  returnOrder: ReturnOrderKey!

  #  Status of the return order item 
  status: String!

  #  Type
  type: String!

  #  A list of attributes. Attributes can be used to extend the existing data
  # structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  Product reference of return order item
  product: ProductKey!

  #  Order item of return order item. This field is optional    
  orderItem: OrderItemLinkInput!

  #  Reason for returning the item    
  returnReason: SettingValueTypeInput

  #  Additional comments related to the returning item    
  returnReasonComment: String

  #  The condition in which the return item was received    
  returnCondition: SettingValueTypeInput

  #  An optional comment. Required if the condition code required further information such as 'Other'    
  returnConditionComment: String

  #  The actual payment action taken for this return item    
  returnPaymentAction: SettingValueTypeInput

  #  The actual disposition action taken for this return item    
  returnDispositionAction: SettingValueTypeInput

  #  Return quantity
  unitQuantity: QuantityTypeInput!

  #  Unit price of the returning item    
  unitAmount: AmountTypeInput!

  #  Unit tax type of the retuning item    
  unitTaxType: TaxTypeInput

  #  Item tax amount of the returning item     
  itemTaxAmount: AmountTypeInput!

  #  Item total amount of returning item    
  itemAmount: AmountTypeInput!
}

#  Input type to create return order items when creating a return order
input CreateReturnOrderItemWithReturnOrderInput {
  #  External reference. Must be unique    
  ref: String!

  #  Type
  type: String!

  #  A list of attributes. Attributes can be used to extend the existing data
  # structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  Product reference of return order item
  product: ProductKey!

  #  Order item of return order item. This field is optional 
  orderItem: OrderItemLinkInput

  #  Reason for returning the item 
  returnReason: SettingValueTypeInput

  #  Additional comments related to the returning item
  returnReasonComment: String

  #  The condition in which the return item was received
  returnCondition: SettingValueTypeInput

  #  An optional comment. Required if the condition code required further information such as 'Other'.
  returnConditionComment: String

  #  The actual payment action taken for this return item
  returnPaymentAction: SettingValueTypeInput

  #  The actual disposition action taken for this return item
  returnDispositionAction: SettingValueTypeInput

  #  Return quantity 
  unitQuantity: QuantityTypeInput!

  #  Unit price of the returning item
  unitAmount: AmountTypeInput!

  #  Unit tax type of the retuning item
  unitTaxType: TaxTypeInput

  #  Item tax amount of the returning item 
  itemTaxAmount: AmountTypeInput!

  #  Item total amount of returning item 
  itemAmount: AmountTypeInput!
}

input CreateReturnVerificationInput {
  #  External reference. Must be unique
  ref: String!

  #  Reference of return order 
  returnOrder: ReturnOrderKey!

  #  Type 
  type: String!

  #  verification details
  verificationDetails: String!
}

input CreateReturnVerificationWithReturnOrderInput {
  #  External reference. Must be unique
  ref: String!

  # Type
  type: String!

  # verification details
  verificationDetails: String!
}

#  Input type to create a `Role`
input CreateRoleInput {
  #  Name of the role. Must be unique.
  name: String!

  #  A list of permissions to be assigned to the role
  permissions: [PermissionKey]
}

#  Input type to create a `Setting`
#  <br/><br/>**USAGE**<br/>
#  Use a unique combination of `context` and `contextId` to create settings for various contexts.
#  Not using a unique combination of those two will result in a _ConstraintViolationException_.
input CreateSettingInput {
  #  Name of the setting
  name: String!

  #  Data type of the setting's value. Supported types are _LOB_, _STRING_, _INTEGER_, _BOOLEAN_ and _JSON_.
  valueType: String!

  #  Value of the setting. Use this if the value is a JSON.
  lobValue: Json

  #  Value of the setting. Use this if the value is NOT a JSON.
  value: String

  #  The context of the setting. Supported values are ACCOUNT, RETAILER, AGENT or CUSTOMER
  context: String!

  #  `ID` of the context type. For instance, use a retailer's ID when using _RETAILER_ context.
  contextId: Int!
}

#  Input parameter for the `createStandardProduct` mutation. A standard product
# `ref` should be unique within the bounds of the specified `catalogue`, which
# together makes up the unique identifier for the `StandardProduct` record. <br /><br />
#  The following default values will be set on creation:
#  * `status` = `CREATED`
#  * `workflowRef` = `PRODUCT_CATALOGUE::<product_catalogue.type>`
#  * `workflowVersion` = `<Workflow.majorVersion>.<Workflow.minorVersion>` . <br /><br />
#  After data persistence, an orchestration event will be fired providing the
# opportunity to perform business logic within a workflow. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input CreateStandardProductInput {
  #  The unique reference identifier for the Product
  ref: String!

  #  The Product Catalogue in which this Product is managed
  catalogue: ProductCatalogueKey!

  #  Type of the `StandardProduct`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  A list of attributes associated with this Product. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  The Global Trade Item Number (GTIN) for this Product
  gtin: String!

  #  The name of the Product
  name: String!

  #  A short description of the Product (max 255 chars)
  summary: String

  #  A list of references to the `Category`'s to which this `Product` relates.
  # Product categories must be a part of the same `ProductCatalogue` (see
  # `catalogue` field). The `Category` must already exist.
  categories: [CategoryKey]

  #  A list of Prices for this Product
  prices: [PriceInput]

  #  The tax information for this Product
  taxType: TaxTypeInput

  #  A list of references to the `VariantProduct`'s to which this `Product`
  # relates. Product variants must be a part of the same `ProductCatalogue` (see
  # `catalogue` field). The `VariantProduct` must already exist.
  variants: [VariantProductKey]
}

input CreateStorageAreaInput {
  ref: String!
  location: LocationId!
  type: String
  attributes: [AttributeInput]
}

input CreateStorageAreaWithLocationInput {
  ref: String!
  type: String
  attributes: [AttributeInput]
}

input CreateStoreAddressInput {
  ref: String!
  companyName: String
  name: String
  street: String
  city: String
  state: String
  postcode: String
  region: String
  country: String
  latitude: Float!
  longitude: Float!
  timeZone: String
}

#  Creates a new `User`
input CreateUserInput {
  #  External reference of the object. Recommended to be unique.
  ref: String!

  #  Unique name for the user used for identification and logging purposes.
  username: String!

  #  Password. # **Note** <br /><br />
  #  Please note that password once created can not be retrieved via the API at the
  # moment. We are working on a security model that will enable password viewing to
  #  authenticated customers but until then, we request you to remember the password you created the `User` with.
  password: String!

  #  The user's title. For example _Mr._, _Miss_, _Dr._, _Ms._ etc
  title: String

  #  User's first name
  firstName: String!

  #  User's last name
  lastName: String

  #  User's primary email
  primaryEmail: String!

  #  User's primary phone number
  primaryPhone: String

  #  Type of the user. For example _ADMIN_, _RETAILER_, _LOCATION_ etc
  type: String!

  #  API Key. To be used with the Fluent Widget.
  apiKey: String

  #  A list of attributes associated with this object. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  Department
  department: String

  #  Country
  country: String

  #  Timezone
  timezone: String!

  #  Determines if the user has opted to receive promotions
  promotionOptIn: Boolean

  #  User's retailer context
  primaryRetailer: RetailerId

  #  User's location context
  primaryLocation: LocationId

  #  A list of roles along with their contexts which are to be assigned to the user.
  roles: [UserRoleInput]
}

#  Input parameter for the `createVariantProduct` mutation. A variant product `ref`
# should be unique within the bounds of the specified `catalogue`, which together
# makes up the unique identifier for the `VariantProduct` record. <br /><br />
#  The following default values will be set on creation:
#  * `status` = `CREATED`
#  * `workflowRef` = `PRODUCT_CATALOGUE::<product_catalogue.type>`
#  * `workflowVersion` = `<Workflow.majorVersion>.<Workflow.minorVersion>` . <br /><br />
#  After data persistence, an orchestration event will be fired providing the
# opportunity to perform business logic within a workflow. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input CreateVariantProductInput {
  #  The unique reference identifier for the Product
  ref: String!

  #  The Product Catalogue in which this Product is managed
  catalogue: ProductCatalogueKey!

  #  Type of the `VariantProduct`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  A list of attributes associated with this Product. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  Associated base 'Product' of this variant
  product: ProductKey

  #  The Global Trade Item Number (GTIN) for this Product
  gtin: String!

  #  The name of the Product
  name: String!

  #  A short description of the Product (max 255 chars)
  summary: String

  #  A list of references to the `Category`'s to which this `Product` relates.
  # Product categories must be a part of the same `ProductCatalogue` (see
  # `catalogue` field). The `Category` must already exist.
  categories: [CategoryKey]

  #  A list of Prices for this Product
  prices: [PriceInput]

  #  The tax information for this Product
  taxType: TaxTypeInput
}

#  Input parameter for the `createVirtualCatalogue` mutation. The `ref` field will
# be the unique identifier for this catalogue. <br /><br />
#  The following default values will be set on creation:
#  * `status` = `CREATED`
#  * `workflowVersion` = `<Workflow.majorVersion>.<Workflow.minorVersion>` . <br /><br />
#  After data persistence, an orchestration event will be fired providing the
# opportunity to perform business logic within a workflow. <br /><br />
#  For more information, please refer to the https://lingo.fluentretail.com/display/LIN/Global+Inventory
input CreateVirtualCatalogueInput {
  #  The reference identifier used to identify an entity
  ref: String!

  #  Type of the `VirtualCatalogue`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  List of Attribute containing meta data information for an entity
  attributes: [AttributeInput]

  #  Name of the inventory catalogue
  name: String!

  #  Description
  description: String

  #  Inventory Catalogue used for this virtual catalogue
  inventoryCatalogueRef: String!

  #  Product Catalogue used for this virtual catalogue
  productCatalogueRef: String!

  #  Networks used for this catalogue
  networkIds: [String]

  #  Control group Ref
  controlGroupRef: String

  #  Retailer refs
  retailerRefs: [String]
}

#  Input parameter for the `createVirtualPosition` mutation. A position `ref`
# should be unique within the bounds of the specified `catalogue`, which together
# makes up the unique identifier for the `inventory position` record. <br /><br />
#  The following default values will be set on creation:
#  * `status` = `CREATED`
#  * `workflowVersion` = `<Workflow.majorVersion>.<Workflow.minorVersion>` . <br
# /><br /># After data persistence, an orchestration event will be fired providing
# the opportunity to perform business logic within a workflow. <br /><br />
#  For more information, please refer to the https://lingo.fluentretail.com/display/LIN/Global+Inventory
input CreateVirtualPositionInput {
  #  The reference identifier used to identify an entity
  ref: String!

  #  Catalogue
  catalogue: VirtualCatalogueKey!

  #  Type of the `VirtualPosition`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  List of Attribute containing meta data information for an entity
  attributes: [AttributeInput]

  #  Product Reference
  productRef: String

  #  Group Reference
  groupRef: String

  #  Quantity
  quantity: Int!
}

#  Input type to create a `Wave`
input CreateWaveInput {
  #  External reference of the object. Must be unique.
  ref: String!

  #  Name of the wave
  name: String

  #  Type of the `Wave`, typically used by the Orchestration Engine to determine
  # the workflow that should be applied. Unless stated otherwise, no values are
  # enforced by the platform.<br/>
  type: String!

  #  A list of attributes associated with this wave. Attributes can be used to
  # extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [AttributeInput]

  #  `Retailer` of the wave
  retailer: RetailerId!

  #  `Location` of the wave operation
  location: LocationId!

  #  `Fulfilment`s associated with this wave
  fulfilments: [FulfilmentId!]!

  #  `User` who this wave is assigned to
  allocatedTo: UserId
}

type CreditMemo implements Node, Referenceable, Extendable {
  #  ID of the object.
  id: ID!

  #  External reference to the `CreditMemo`. Must be unique.
  ref: String!

  #  Type of the `CreditMemo`, typically used by the Orchestration Engine to determine the workflow that should be applied.
  type: String

  #  Status of the `CreditMemo`.
  status: String

  #  A list of attributes associated with the `CreditMemo`. This can be used to
  # extend the existing data structure with additional data.
  attributes: [Attribute]

  #  `BillingAccount` associated with the `CreditMemo`.
  billingAccount: BillingAccount

  #  `Invoice` associated with this `CreditMemo`.
  invoice: Invoice

  #  The `CreditMemoItem`s associated with this `CreditMemo`.
  items(
    #  External reference to the `CreditMemoItem`. Must be unique.
    ref: [String!]

    #  Type of the `CreditMemoItem`, typically used by the Orchestration Engine to
    # determine the workflow that should be applied.
    type: [String]

    # # Description of the `CreditMemoItem`.
    description: [String]
    orderItem: OrderItemLinkInput
    returnOrderItem: ReturnOrderItemLinkInput
    product: ProductLinkInput
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CreditMemoItemConnection

  #  Reference to an `Order` associated with the `CreditMemo`.
  order: OrderLink

  #  Reference to a `ReturnOrder` associated with the `CreditMemo`.
  returnOrder: ReturnOrderLink

  #  Issue date
  issueDate: DateTime

  #  Reference to the currency type. Generally, the standard ISO-4217 is used.
  currency: CurrencyLink

  #  Default tax type
  defaultTaxType: TaxType

  #  Sub-total amount
  subTotalAmount: AmountType

  #  Total tax
  totalTax: AmountType

  #  Total amount
  totalAmount: AmountType

  #  Total balance
  totalBalance: AmountType

  #  The reference to the `workflow` associated. 
  workflow: WorkflowLink

  #  DEPRECATED, please use the field `workflow` instead - The reference of the workflow.
  workflowRef: String @deprecated

  #  DEPRECATED, please use the field `workflow` instead - The version of the workflow.
  workflowVersion: String @deprecated

  #  Date and time of creation.
  createdOn: DateTime

  #  Date and time of last update.
  updatedOn: DateTime
}

#  A list of results that matched against a CreditMemo search query
type CreditMemoConnection {
  #  A list of edges that links to CreditMemo type node
  edges: [CreditMemoEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a CreditMemo connection to the CreditMemo type
type CreditMemoEdge {
  #  The item at the end of the CreditMemo edge
  node: CreditMemo

  #  A cursor for use in pagination
  cursor: String
}

type CreditMemoItem implements Node, Referenceable {
  #  ID of the object
  id: ID!

  #  External reference to the `CreditMemoItem`. Must be unique.
  ref: String!

  #  Type of the `CreditMemoItem`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied.
  type: String

  # # Description of the `CreditMemoItem`.
  description: String

  #  `CreditMemo` associated with the `CreditMemoItem`.
  creditMemo: CreditMemo

  #  Credit reason code of the `CreditMemoItem`.
  creditReasonCode: SettingValueType

  #  Reference to an `OrderItem` associated with the `CreditMemoItem`.
  orderItem: OrderItemLink

  #  Reference to a `ReturnOrderItem` associated with the `CreditMemoItem`.
  returnOrderItem: ReturnOrderItemLink

  #  Reference to a `Product` associated with the `CreditMemoItem`.
  product: ProductLink

  #  `unitQuantity` holds separately the amount and the unit associated.
  unitQuantity: QuantityType

  #  The tax type of this item. Should only be provided if different to the default credit memo tax type.
  unitTaxType: TaxType

  #  The unit sale price at time of sale or exchange
  unitAmount: AmountType

  #  The unit cost price at time of sale or exchange.
  unitCostAmount: AmountType

  #  The item amount for this item excluding tax. This is a calculated value based
  # on business rules that does not necessarily have to take into account the unit
  # quantity or amounts.
  amount: AmountType

  #  The tax amount for this item. If not present at the item level, tax amount
  # should be generated based on the tax type set at the invoice parent level.
  taxAmount: AmountType

  #  Date and time of creation.
  createdOn: DateTime

  #  Date and time of last update.
  updatedOn: DateTime
}

#  A list of results that matched against a CreditMemoItem search query
type CreditMemoItemConnection {
  #  A list of edges that links to CreditMemoItem type node
  edges: [CreditMemoItemEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a CreditMemoItem connection to the CreditMemoItem type
type CreditMemoItemEdge {
  #  The item at the end of the CreditMemoItem edge
  node: CreditMemoItem

  #  A cursor for use in pagination
  cursor: String
}

#  Input type to uniquely identify a `CreditMemoItem` object. We use all the fields
# present in the request to look for this object.
input CreditMemoItemKey {
  #  The client's reference identifier for the object
  ref: String!
}

#  Input type to uniquely identify a `CreditMemo` object. We use all the fields
# present in the request to look for this object.
input CreditMemoKey {
  #  The client's reference identifier for the object
  ref: String!
}

type CreditMemoLink {
  ref: String
}

input CreditMemoLinkInput {
  ref: String!
}

type Currency {
  #  ID of the object
  id: ID!

  #  External reference to the `Currency`. Must be unique. 
  #  For the standard currency types, this field is the three-letters-code used internationally (ISO-4217). eg: AUD, EUR, USD.
  alphabeticCode: String

  #  The numeric code of the `Currency`.
  numericCode: String

  #  The name of the `Currency`.
  name: String

  #  The number of minor units that make up a major unit of the `Currency`
  minorUnits: Int

  #  Currencies which are defined as part of the ISO-4217 standard cannot be deleted or modified. 
  isISO4217: Boolean
}

#  A list of results that matched against a Currency search query
type CurrencyConnection {
  #  A list of edges that links to Currency type node
  edges: [CurrencyEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Currency connection to the Currency type
type CurrencyEdge {
  #  The item at the end of the Currency edge
  node: Currency

  #  A cursor for use in pagination
  cursor: String
}

#  Input type to uniquely identify a `Currency` object. We use all the fields present in the request to look for this object.
input CurrencyKey {
  #  External reference to the `Currency`. Must be unique. 
  #  For the standard currency types, this field is the three-letters-code used internationally (ISO-4217). eg: AUD, EUR, USD.
  alphabeticCode: String!
}

type CurrencyLink {
  alphabeticCode: String
}

input CurrencyLinkInput {
  alphabeticCode: String!
}

#  Represents the customer who places an order
type Customer implements Node {
  #  ID of the object
  id: ID!

  #  Username of the customer
  ref: String

  #  Status
  status: String

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  Attributes
  attributes: [Attribute]

  #  The customer's title
  title: String

  #  The department/team that the customer belongs to
  department: String

  #  The country the customer is operating from
  country: String

  #  The customer's first name
  firstName: String

  #  The customer's last name
  lastName: String

  #  Username
  username: String

  #  Email
  primaryEmail: String

  #  Phone number
  primaryPhone: String

  #  Timezones
  timezone: String

  #  Whether the customer has opted to receive promotions
  promotionOptIn: Boolean

  #  Retailer used by the customer
  retailer: Retailer
}

#  CustomerAddress connects to an order either though the FulfilmentChoice (the CC
#  location chosen by the customer) or the Fulfilments (from and to locations)
type CustomerAddress implements Address {
  #  ID of the object
  id: ID!

  #  Type of Address, to support legacy address, the value can be AGENT and ORDER
  type: String

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  Company name
  companyName: String

  #  Name
  name: String

  #  Street
  street: String

  #  City
  city: String

  #  State
  state: String

  #  Postcode
  postcode: String

  #  Region
  region: String

  #  Country
  country: String

  #  Latitude
  latitude: Float

  #  Longitude
  longitude: Float

  #  Location reference
  ref: String

  #  Timezone
  timeZone: String
}

#  A list of results that matched against a CustomerAddress search query
type CustomerAddressConnection {
  #  A list of edges that links to CustomerAddress type node
  edges: [CustomerAddressEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a CustomerAddress connection to the CustomerAddress type
type CustomerAddressEdge {
  #  The item at the end of the CustomerAddress edge
  node: CustomerAddress

  #  A cursor for use in pagination
  cursor: String
}

input CustomerAddressId {
  #  ID of the object
  id: ID!
}

#  A list of results that matched against a Customer search query
type CustomerConnection {
  #  A list of edges that links to Customer type node
  edges: [CustomerEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Customer connection to the Customer type
type CustomerEdge {
  #  The item at the end of the Customer edge
  node: Customer

  #  A cursor for use in pagination
  cursor: String
}

input CustomerId {
  #  ID of the object
  id: ID!
}

#  Input type to uniquely identify a `Customer` object. We use all the fields present in the request to look for this object.
input CustomerKey {
  #  The client's reference identifier for the object
  ref: String!
}

type CustomerLink {
  ref: String
}

input CustomerLinkInput {
  ref: String!
}

#  Type to be used for comparisons on `DateTime` type fields. All `DateTime`
# comparisons will be done by converting the values in the UTC format. If a
# `DateTime` value does not contain timezone information, it is assumed to be UTC.
# The results will also be in the UTC format. <br/> This type can be used for
# identifying records <br />
#  * _on_ a given date and/or timestamp.
#  * _on_ and _after_ a given date and/or timestamp.
#  * _after_ a given date and/or time.
#  * _on_ and _before_ a given date and/or timestamp.
#  * _before_ a given date and/or timestamp.
#  * _between_ two dates/timestamps with the input dates/timestamps excluded.
#  * _between_ two dates/timestamps with the input dates/timestamps included.
#  <br />
#  Please note that all date comparisons assume that all `DateTime` # values are
# sent in a valid ISO8601 format. Please see [ISO8601 documentation]
# (https://www.iso.org/iso-8601-date-and-time-format.html) to see valid `DateTime` formats.
#  <br/><br/>**USAGE**<br/>
#  You must pass at least one of the `from` or `to` fields. Requests missing both of these fields will result in error.
input DateRange {
  #  `DateTime` in a valid ISO8601 format for identifying records _after_ or _at_
  # the given timestamp. If this field is not passed in the request, the response
  # will contain all records from the beginning of time till the `to` date.
  from: DateTime

  #  `DateTime` in a valid ISO8601 format for identifying records _before_ or _at_
  # the given timestamp. If this field is not passed in the request, the response
  # will contain all records after the `from` date.
  to: DateTime
}

# DATETIME in ISO8601 format
scalar DateTime

enum ExecutionMode {
  AWAIT_ORCHESTRATION
}

#  Represents an object with `attribute`s
interface Extendable {
  #  Array of attributes
  attributes: [Attribute]
}

#  An order transaction defines the payment or refund details associated with an order.
type FinancialTransaction implements Node, Orchestrateable {
  #  ID of the object
  id: ID!

  #  The unique transaction reference provided by the Retailer to the payment gateway
  ref: String

  #  Type of the `FinancialTransaction`, typically used by the Orchestration Engine
  # to determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  The current status of the `FinancialTransaction`.<br/>By default, the initial
  # value will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  The total transaction amount
  total: Float!

  #  Currency used for the transaction.
  currency: String!

  #  The unique transaction code or request code provided by the payment gateway
  externalTransactionCode: String

  #  The unique transaction ID or request ID provided by the payment gateway
  externalTransactionId: String

  #  The card type used for the payment. Possible values are 'MASTERCARD', 'VISA', 'AMEX', 'DINERS'.
  cardType: String

  #  The way in which payment was made. Platform provides support for the following
  # payment methods - 'CREDITCARD', 'PAYPAL', 'GIFTVOUCHER', 'CASH', 'AFTERPAY'. However, these
  #  can be overridden/configured per client as settings
  paymentMethod: String

  #  The name of the payment gateway. Platform provided values are 'CYBERSOURCE',
  # 'GIVEX', 'PAYPAL', 'BRAINTREE', 'AFTERPAY'. However, these can be
  # overridden/configured per client as settings using 'PAYMENT.PROVIDER'
  paymentProviderName: String

  #  Order associated with the transaction
  order: Order
}

#  A list of results that matched against a FinancialTransaction search query
type FinancialTransactionConnection {
  #  A list of edges that links to FinancialTransaction type node
  edges: [FinancialTransactionEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a FinancialTransaction connection to the FinancialTransaction type
type FinancialTransactionEdge {
  #  The item at the end of the FinancialTransaction edge
  node: FinancialTransaction

  #  A cursor for use in pagination
  cursor: String
}

#  A `Fulfilment` represents one or more items in an order that need to be picked & packed for the customer. <br/>
#  A fulfilment is assigned to a location based on the retailer's fulfilment rules and available inventory.
#  A fulfilment will have an origin (from) and destination (to) associated with it.
type Fulfilment implements Node, Orchestrateable {
  #  ID of the object
  id: ID!

  #  External reference of the object. Recommended to be unique.
  ref: String

  #  The current status of the `Fulfilment`.<br/>By default, the initial value will
  # be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  Attributes of fulfilment
  attributes: [Attribute]

  #  Type of delivery. Supported values are _STANDARD_, _OVERNIGHT_ and _EXPRESS_.
  deliveryType: String

  #  Type of the `Fulfilment`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  #  Type of fulfilment. Supported types are <br/>
  #  - *CC_PFS* for Click & Collect - Pick from Store
  #  - *CC_PFDC* for Click & Collect - Pick from DC
  #  - *HD_PFS* for Home Delivery - Pick from Store
  #  - *HD_PFDC* for Home Delivery - Pick from DC
  type: String!

  #  The estimated time of completing the fulfilment.
  eta: String

  #  Expiry time for the fulfilment
  expiryTime: DateTime

  #  The associated `Order`
  order: Order

  #  `Address` of the fulfilment location
  fromAddress: Address

  #  `Address` of the delivery location
  toAddress: Address

  #  The associated `Customer`
  user: Customer

  #  Connection representing a list of `Article`s
  articles(
    #  The unique article reference provided by the retailer
    ref: [String]
    type: [String!]
    status: [String]
    workflowRef: [String!]
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Description
    description: [String]

    #  Height
    height: [Float!]

    #  Length
    length: [Float!]

    #  Name
    name: [String]

    #  Weight
    weight: [Float!]

    #  Width
    width: [Float!]

    #  Quantity
    quantity: [Int]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ArticleConnection

  #  Connection representing a list of `FulfilmentItem`s
  items(
    #  External reference of the object. Recommended to be unique.
    ref: [String]

    #  Status
    status: [String!]

    #  Number of `OrderItem`s assigned to the fulfilment
    requestedQuantity: [Int]

    #  Number of `OrderItem`s confirmed
    filledQuantity: [Int!]

    #  Number of `OrderItem`s rejected
    rejectedQuantity: [Int!]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): FulfilmentItemConnection
}

#  The fulfilment choice specified when booking the order
type FulfilmentChoice {
  #  ID of the object
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  The type of currency, 3 letter ISO currency code
  currency: String

  #  Instruction provided by the customer (250 character limit)
  deliveryInstruction: String

  #  The type of delivey determined by retailers' shipping options. Example values are STANDARD, EXPRESS, OVERNIGHT, 3HOURS
  deliveryType: String!

  #  FulfilmentPrice refers to shipping fees if order type is Home Delivery HD and C&C fees for Click & Collect orders
  fulfilmentPrice: Float

  #  This refers to the tax cost associated with the fulfilment price
  fulfilmentTaxPrice: Float

  #  Indicates the type of fulfilment. Possible values are CC_PFS ( Click & Collect
  # - Pick from Store), CC_PFDC ( Click & Collect - Pick from DC), HD_PFS (Home
  # Delivery - Pick
  #  from Store), HD_PFDC ( Home Delivery - Pick from DC)
  fulfilmentType: String

  #  Pickup location. This is required for click & collect orders
  pickupLocationRef: String

  #  Location of fulfilment choice
  deliveryAddress: Address
}

#  A list of results that matched against a FulfilmentChoice search query
type FulfilmentChoiceConnection {
  #  A list of edges that links to FulfilmentChoice type node
  edges: [FulfilmentChoiceEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a FulfilmentChoice connection to the FulfilmentChoice type
type FulfilmentChoiceEdge {
  #  The item at the end of the FulfilmentChoice edge
  node: FulfilmentChoice

  #  A cursor for use in pagination
  cursor: String
}

#  A list of results that matched against a Fulfilment search query
type FulfilmentConnection {
  #  A list of edges that links to Fulfilment type node
  edges: [FulfilmentEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Fulfilment connection to the Fulfilment type
type FulfilmentEdge {
  #  The item at the end of the Fulfilment edge
  node: Fulfilment

  #  A cursor for use in pagination
  cursor: String
}

input FulfilmentId {
  #  ID of the object
  id: ID!
}

#  Represents fulfilment details corresponding to an `OrderItem`.
type FulfilmentItem {
  #  ID of the object
  id: ID!

  #  External reference of the object. Recommended to be unique.
  ref: String

  #  Status
  status: String!

  #  Number of `OrderItem`s assigned to the fulfilment
  requestedQuantity: Int

  #  Number of `OrderItem`s confirmed
  filledQuantity: Int!

  #  Number of `OrderItem`s rejected
  rejectedQuantity: Int!

  #  The associated `Fulfilment`
  fulfilment: Fulfilment

  #  The associated `OrderItem`
  orderItem: OrderItem
}

#  A list of results that matched against a FulfilmentItem search query
type FulfilmentItemConnection {
  #  A list of edges that links to FulfilmentItem type node
  edges: [FulfilmentItemEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a FulfilmentItem connection to the FulfilmentItem type
type FulfilmentItemEdge {
  #  The item at the end of the FulfilmentItem edge
  node: FulfilmentItem

  #  A cursor for use in pagination
  cursor: String
}

#  `FulfilmentOption` provides a singular and accurate view of what products are
# available to purchase, order, pick-up or reserve. This information can be used
#  to provide personalised fulfilment options to the customers directly from the
# product details pages, cart pages or checkout pages.
type FulfilmentOption implements Node, Orchestrateable {
  #  ID of the object
  id: ID!

  #  External reference. Recommended to be unique.
  ref: String

  #  The current status of the `FulfilmentOption`.<br/>By default, the initial
  # value will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  Type of the `FulfilmentOption`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  ID of the `Retailer`, typically used by the Orchestration Engine to determine the workflow that should be applied.
  retailerId: Int!

  #  Type of order. For example _click & collect (CC)_ or _home delivery (HD)_
  orderType: String

  #  The reference identifier for a location. May be used in orchestration rules to
  # drive custom business logic. For example, you can have a rule to return plans only from this
  #   location or a rule to return plans from all locations but excluding this one.
  locationRef: String

  #  A unique identifier for the clients to group related Fulfilment Plans.
  trackingCode: String

  #  A type for passing address. Can be used as an input in creating Fulfilment Plans.
  address: FulfilmentOptionAddress

  #  Products being queried for availability
  products: [FulfilmentOptionProduct]

  #  A list of attributes associated with this object. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [Attribute]

  #  A list of `FulfilmentPlan` objects.
  plans(
    #  External reference. Recommended to be unique.
    ref: [String]
    status: [String]
    type: [String!]

    #  Order split limits
    splitCount: [Int]

    #  ETA of the `FulfilmentPlan`. Although this can be set explicitly, we
    # recommend that this be determined and set in the workflow.
    eta: [String]

    #  ID of the retailer
    retailerId: [Int]
    workflowRef: [String!]
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): FulfilmentPlanConnection

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime
}

#  Address type to be used in `FulfilmentOption`
type FulfilmentOptionAddress {
  #  Name
  name: String

  #  Company Name
  companyName: String

  #  Address Line
  addressLine1: String

  #  Address Line
  addressLine2: String

  #  City or Town
  city: String

  #  State or County
  state: String

  #  Postcode or Zipcode
  postcode: String

  #  Country
  country: String

  #  Geographical coordinate that specifies the north–south position of a point on the Earth's surface
  latitude: Float

  #  Geographical coordinate that specifies the east–west position of a point on the Earth's surface
  longitude: Float
}

#  A list of results that matched against a FulfilmentOption search query
type FulfilmentOptionConnection {
  #  A list of edges that links to FulfilmentOption type node
  edges: [FulfilmentOptionEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a FulfilmentOption connection to the FulfilmentOption type
type FulfilmentOptionEdge {
  #  The item at the end of the FulfilmentOption edge
  node: FulfilmentOption

  #  A cursor for use in pagination
  cursor: String
}

input FulfilmentOptionId {
  #  ID of the object
  id: ID!
}

#  Type to represent products being queried for availability in a Fulfilment Option request
type FulfilmentOptionProduct {
  #  A reference to identify a Product
  productRef: String!

  #  A reference to identify the Catalogue
  catalogueRef: String

  #  The requested quantity for the product
  requestedQuantity: Int!
}

#  Fulfilment Plans represents fulfilment strategy for requested products based on
# client specific logic that lives in their orchestration rules.
type FulfilmentPlan implements Node, Orchestrateable {
  #  ID of the object
  id: ID!

  #  External reference. Recommended to be unique.
  ref: String

  #  The current status of the `FulfilmentPlan`.<br/>By default, the initial value
  # will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  Type of the `FulfilmentPlan`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  Order split limits
  splitCount: Int

  #  ETA of the `FulfilmentPlan`. Although this can be set explicitly, we recommend
  # that this be determined and set in the workflow.
  eta: String

  #  ID of the retailer
  retailerId: Int

  #  A list of attributes associated with this object. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [Attribute]

  #  Represents the associated `FulfilmentOption` object
  fulfilmentOption: FulfilmentOption

  #  Represents fulfilments under this Fulfilment Plan
  fulfilments: [FulfilmentPlanFulfilment]

  #  Exceptions can be used to augment the existing object with any useful information in case of exceptions.
  exceptions: [FulfilmentPlanException]

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime
}

#  A list of results that matched against a FulfilmentPlan search query
type FulfilmentPlanConnection {
  #  A list of edges that links to FulfilmentPlan type node
  edges: [FulfilmentPlanEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a FulfilmentPlan connection to the FulfilmentPlan type
type FulfilmentPlanEdge {
  #  The item at the end of the FulfilmentPlan edge
  node: FulfilmentPlan

  #  A cursor for use in pagination
  cursor: String
}

#  Exception type can be used to augment objects with useful information in case of exceptions.
type FulfilmentPlanException {
  #  The exception code
  code: String

  #  The english like description of the exception
  message: String

  #  Attributes may contain useful information about the exception
  attributes: [Attribute]
}

#  Represents fulfilment information for a `FulfilmentPlan`
type FulfilmentPlanFulfilment {
  #  Type of fulfilment.
  fulfilmentType: String

  #  Reference to identify the fulfilment location for this fulfilment.
  locationRef: String

  #  ETA of the `FulfilmentPlan` as configured in the workflow
  eta: String

  #  List of products with their requested and available quantities
  items: [FulfilmentPlanFulfilmentItem]
}

#  Represents products with their requested and available quantities
type FulfilmentPlanFulfilmentItem {
  #  External reference of the product.
  productRef: String!

  #  A reference to identify the Catalogue
  catalogueRef: String

  #  Quantity of the product available as per the plan
  availableQuantity: Int!

  #  Requested quantity of the product.
  requestedQuantity: Int!
}

input FulfilmentPlanId {
  #  ID of the object
  id: ID!
}

#  Information required to identify a geographical location. For instance Sydney
# has latitude, longitude values of _-33.868820_ and _151.209296_ respectively.
input GeoCoordinateInput {
  #  Geographical coordinate that specifies the north–south position of a point on the Earth's surface
  latitude: Float!

  #  Geographical coordinate that specifies the east–west position of a point on the Earth's surface
  longitude: Float!
}

#  A `GroupProduct` is an implementation of Product that signifies a grouping of
# some sort, such as a bundle or kit. The `ref` field will be the unique
# identifier for this Product within the specified Product Catalogue, as
# identified by the `catalogue` field. <br /><br />
#  The `GroupProduct` is an orchestrateable entity. Events for these should specify
# a parent entity of Product Catalogue. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
type GroupProduct implements Node, Referenceable, Orchestrateable, Extendable, Product {
  #  ID of the object. For internal use, should not be used externally or by any business logic
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  The unique reference identifier for the Product
  ref: String!

  #  Type of the `GroupProduct`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  The current status of the `GroupProduct`.<br/>By default, the initial value
  # will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Product. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [Attribute]

  #  The name of the Product
  name: String!

  #  A short description of the Product (max 255 chars)
  summary: String

  #  The Product Catalogue in which this Product is managed
  catalogue: ProductCatalogue!

  #  A connection to the associated Categories of this Product
  categories(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Category
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  The name of the Category
    name: [String!]

    #  A short description of the Category
    summary: [String]
    catalogue: ProductCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CategoryConnection

  #  A list of Prices for this Product
  prices: [Price]

  #  The tax information for this Product
  tax: TaxType
}

#  A list of results that matched against a GroupProduct search query
type GroupProductConnection {
  #  A list of edges that links to GroupProduct type node
  edges: [GroupProductEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a GroupProduct connection to the GroupProduct type
type GroupProductEdge {
  #  The item at the end of the GroupProduct edge
  node: GroupProduct

  #  A cursor for use in pagination
  cursor: String
}

#  The `GroupProductKey` input is the parameter for identifying a specific Group Product.
input GroupProductKey {
  #  The unique reference identifier for the Product
  ref: String

  #  The Product Catalogue in which this Product resides
  catalogue: ProductCatalogueKey!
}

#  The `InventoryCatalogue` is a structure that supports a grouping of inventory
# position data. The `ref` field will be the unique identifier for this catalogue. <br /><br />
#  The `InventoryCatalogue` is an orchestrateable entity, and the parent type for
# all `InventoryPosition` and `InventoryQuantity` orchestration events. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
type InventoryCatalogue implements Node, Referenceable, Orchestrateable, Extendable {
  #  ID of the object. For internal use, should not be used externally or by any business logic
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  The unique reference identifier for the Inventory Catalogue
  ref: String!

  #  Type of the `InventoryCatalogue`, typically used by the Orchestration Engine
  # to determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  The current status of the `InventoryCatalogue`.<br/>By default, the initial
  # value will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Inventory Catalogue. This can be
  # used to extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [Attribute]

  #  The name of the Inventory Catalogue
  name: String!

  #  A short description of the Inventory Catalogue
  description: String

  #  A connection to associated Inventory Positions
  inventoryPositions(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Inventory Position
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  A reference identifying a Product. The referenced product may or may not
    # exist within one or more Product Catalogues. This is a loosely coupled
    # association, since Product and Inventory are separate domains.
    productRef: [String!]

    #  The calculated on hand quantity based on the associated quantities, and rules in the orchestration workflow
    onHand: [Int]

    #  A reference identifying the Location where this inventory exists. This is a loosely coupled association.
    locationRef: [String]
    catalogue: InventoryCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): InventoryPositionConnection

  #  A list of Retailer references associated with this Inventory Catalogue
  retailerRefs: [String]
}

#  A list of results that matched against a InventoryCatalogue search query
type InventoryCatalogueConnection {
  #  A list of edges that links to InventoryCatalogue type node
  edges: [InventoryCatalogueEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a InventoryCatalogue connection to the InventoryCatalogue type
type InventoryCatalogueEdge {
  #  The item at the end of the InventoryCatalogue edge
  node: InventoryCatalogue

  #  A cursor for use in pagination
  cursor: String
}

#  The `InventoryCatalogueKey` input is the parameter for identifying a specific Inventory Catalogue.
input InventoryCatalogueKey {
  #  Inventory Catalogue reference identifier
  ref: String!
}

#  An `InventoryPosition` provides an "on hand" calculation of available inventory,
# based on it's associated Inventory Quantities and Location. The `ref` field will
# be the unique identifier for this position within the specified Inventory
# Catalogue, as identified by the `catalogue` field. <br /><br />
#  The `InventoryPosition` is an orchestrateable entity. Events for these should
# specify a parent entity of Inventory Catalogue. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
type InventoryPosition implements Node, Referenceable, Orchestrateable, Extendable {
  #  ID of the object. For internal use, should not be used externally or by any business logic
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  The unique reference identifier for the Inventory Position
  ref: String!

  #  Type of the `InventoryPosition`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  The current status of the `InventoryPosition`.<br/>By default, the initial
  # value will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Inventory Position. This can be used
  # to extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [Attribute]

  #  A reference identifying a Product. The referenced product may or may not exist
  # within one or more Product Catalogues. This is a loosely coupled association,
  # since Product and Inventory are separate domains.
  productRef: String!

  #  The calculated on hand quantity based on the associated quantities, and rules in the orchestration workflow
  onHand: Int

  #  A reference identifying the Location where this inventory exists. This is a loosely coupled association.
  locationRef: String

  #  The Inventory Catalogue in which this Position is managed
  catalogue: InventoryCatalogue

  #  A connection to the Inventory Quantities associated with this Position
  quantities(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Inventory Quantity
    ref: [String!]

    #  The type field can be used to differentiate between Inventory Quantity
    # workflows. Example types include `LAST_ON_HAND`, `RESERVED`, `EXPECTED`, and `ADJUSTMENT`.
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  The actual amount of this specific Quantity record
    quantity: [Int]

    #  The condition of the Inventory Quantity value. The platform does not enforce
    # any values here. Examples could include `NEW`, `USED`, or `DAMAGED`
    condition: [String]
    expectedOn: DateRange

    #  A reference to the Storage Area where this inventory is kept
    storageAreaRef: [String]
    catalogue: InventoryCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): InventoryQuantityConnection
}

#  A list of results that matched against a InventoryPosition search query
type InventoryPositionConnection {
  #  A list of edges that links to InventoryPosition type node
  edges: [InventoryPositionEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a InventoryPosition connection to the InventoryPosition type
type InventoryPositionEdge {
  #  The item at the end of the InventoryPosition edge
  node: InventoryPosition

  #  A cursor for use in pagination
  cursor: String
}

#  The `InventoryPositionKey` input is the parameter for identifying a specific Inventory Position.
input InventoryPositionKey {
  #  Inventory Position reference identifier
  ref: String!

  #  The Inventory Catalogue in which this Position resides
  catalogue: InventoryCatalogueKey!
}

#  Input for filtering out a subset of Inventory Positions
input InventoryPositionsLocationFilterInput {
  #  Inventory Catalogue reference identifier
  catalogue: InventoryCatalogueKey!

  #  Location reference identifier
  locationRef: String!
}

#  An `InventoryQuantity` is a specific count of a certain quantity type,
# condition, and storage area. The `ref` field will be the unique identifier for
# this quantity within the specified Inventory Catalogue, as identified by the
# `catalogue` field. <br /><br />
#  The `InventoryQuantity` is an orchestrateable entity. Events for these should
# specify a parent entity of Inventory Catalogue. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
type InventoryQuantity implements Node, Referenceable, Orchestrateable, Extendable {
  #  ID of the object. For internal use, should not be used externally or by any business logic
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  The unique reference identifier for the Inventory Quantity
  ref: String!

  #  Type of the `InventoryQuantity`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  #  The type field can be used to differentiate between Inventory Quantity
  # workflows. Example types include `LAST_ON_HAND`, `RESERVED`, `EXPECTED`, and `ADJUSTMENT`.
  type: String!

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  The current status of the `InventoryQuantity`.<br/>By default, the initial
  # value will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Inventory Quantity. This can be used
  # to extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [Attribute]

  #  The actual amount of this specific Quantity record
  quantity: Int

  #  The condition of the Inventory Quantity value. The platform does not enforce
  # any values here. Examples could include `NEW`, `USED`, or `DAMAGED`
  condition: String

  #  The date and time the quantity is expected to arrive
  expectedOn: DateTime

  #  A reference to the Storage Area where this inventory is kept
  storageAreaRef: String

  #  The Inventory Catalogue in which this Quantity is managed
  catalogue: InventoryCatalogue

  #  The associated parent Inventory Position of which this Quantity applies
  position: InventoryPosition
}

#  A list of results that matched against a InventoryQuantity search query
type InventoryQuantityConnection {
  #  A list of edges that links to InventoryQuantity type node
  edges: [InventoryQuantityEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a InventoryQuantity connection to the InventoryQuantity type
type InventoryQuantityEdge {
  #  The item at the end of the InventoryQuantity edge
  node: InventoryQuantity

  #  A cursor for use in pagination
  cursor: String
}

#  The `InventoryQuantityKey` input is the parameter for identifying a specific Inventory Quantity.
input InventoryQuantityKey {
  #  Inventory Quantity reference identifier
  ref: String!

  #  The Inventory Catalogue in which this Quantity resides
  catalogue: InventoryCatalogueKey!
}

type Invoice implements Node, Referenceable, Extendable {
  #  ID of the object
  id: ID!

  #  External reference to the `Invoice`. Must be unique.
  ref: String!

  #  The reference to the `workflow` associated. 
  workflow: WorkflowLink

  #  Type of the `Invoice`, typically used by the Orchestration Engine to determine the workflow that should be applied.
  type: String

  #  Status of the `Invoice`.
  status: String

  #  A list of attributes associated with the `Invoice`. This can be used to extend
  # the existing data structure with additional data.
  attributes: [Attribute]

  #  The `BillingAccount` associated with the `Invoice`.
  billingAccount: BillingAccount

  #  Reference to the `Order` associated with this `Invoice`.
  order: OrderLink

  #  The `InvoiceItem`s associated with this `Invoice`.
  items(
    #  External reference to the `InvoiceItem`. Must be unique.
    ref: [String!]

    #  Type of the `InvoiceItem`, typically used by the Orchestration Engine to determine the workflow that should be applied.
    type: [String]

    #  A description of the source item. In the case of product source items this can be the name.
    description: [String]
    product: ProductLinkInput
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): InvoiceItemConnection

  #  A list of associated credit memos that have been used to adjust this invoice in favour of the billing account
  creditMemos: [CreditMemo]

  #  The date on which this invoice was formally issued.
  issueDate: DateTime

  #  The date on which this invoice is due for completion.
  dueDate: DateTime

  #  Reference to the currency type. Generally, the standard ISO-4217 is used.
  currency: CurrencyLink

  #  The default Tax Type for this invoice. Individual invoice items can override.
  defaultTaxType: TaxType

  #  The total amount of this invoice excluding tax.
  subTotalAmount: AmountType

  #  The total amount of tax for this invoice
  totalTax: AmountType

  #  The total amount of this invoice including tax
  totalAmount: AmountType

  #  The total amount of this invoice yet to be paid. (This caters for multi-part payments and payment milestones)
  totalBalance: AmountType

  #  DEPRECATED, please use the field `workflow` instead - The reference of the workflow.
  workflowRef: String @deprecated

  #  DEPRECATED, please use the field `workflow` instead - The version of the workflow.
  workflowVersion: Int @deprecated

  #  Date and time of creation.
  createdOn: DateTime

  #  Date and time of last update.
  updatedOn: DateTime
}

#  A list of results that matched against a Invoice search query
type InvoiceConnection {
  #  A list of edges that links to Invoice type node
  edges: [InvoiceEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Invoice connection to the Invoice type
type InvoiceEdge {
  #  The item at the end of the Invoice edge
  node: Invoice

  #  A cursor for use in pagination
  cursor: String
}

type InvoiceItem implements Node, Referenceable {
  #  ID of the object
  id: ID!

  #  External reference to the `InvoiceItem`. Must be unique.
  ref: String!

  #  Type of the `InvoiceItem`, typically used by the Orchestration Engine to determine the workflow that should be applied.
  type: String

  #  A description of the source item. In the case of product source items this can be the name.
  description: String

  #  Associated product for this invoice item. 
  product: ProductLink

  #  `The total quantity of the source item. Should default to 0
  unitQuantity: QuantityType

  #  The tax type of this item. Should only be provided if different to the default invoice tax type.
  unitTaxType: TaxType

  #  The unit price of the source item.
  unitAmount: AmountType

  #  The item amount for this item excluding tax
  amount: AmountType

  #  The tax amount for this item. If not present at the item level, tax amount
  # should be generated based on the tax type set at the invoice parent level.
  taxAmount: AmountType

  #  Date and time of creation
  createdOn: DateTime

  #  Date and time of last update
  updatedOn: DateTime

  #  The `Invoice` this object is associated with
  invoice: Invoice
}

#  A list of results that matched against a InvoiceItem search query
type InvoiceItemConnection {
  #  A list of edges that links to InvoiceItem type node
  edges: [InvoiceItemEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a InvoiceItem connection to the InvoiceItem type
type InvoiceItemEdge {
  #  The item at the end of the InvoiceItem edge
  node: InvoiceItem

  #  A cursor for use in pagination
  cursor: String
}

#  Input type to uniquely identify an `InvoiceItem` object. We use all the fields
# present in the request to look for this object.
input InvoiceItemKey {
  #  The client's reference identifier for the object
  ref: String!
}

#  Input type to uniquely identify an `Invoice` object. We use all the fields present in the request to look for this object.
input InvoiceKey {
  #  The client's reference identifier for the object
  ref: String!
}

# Plain JSON object
scalar Json

#  A Location is any place where an order can be fulfilled and/or collected by the customer.
#  Locations can include a store, warehouse, drop ship vendor, lockers or a third party collection point such as ParcelPoint.
type Location implements Node {
  #  ID of the object
  id: ID!

  #  The location (i.e. store) id provided by the retailer
  ref: String

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  Type
  type: String

  #  The location status. Possible values are 'ACTIVE', 'INACTIVE'.
  status: String

  #  Attributes
  attributes: [Attribute]

  #  Name of location
  name: String

  #  The location contact number
  supportPhoneNumber: String

  #  Default carrier
  defaultCarrier: String

  #  Default carrier of the location
  defaultCarrierName: String

  #  Store location of the the location
  primaryAddress: Address

  #  Retailer
  retailer: Retailer

  #  Networks the location is assigned to
  networks(
    createdOn: DateRange
    updatedOn: DateRange

    #  Reference to the network. This is the name of the network you passed in
    # while creating the network. Recommended to be unique.
    ref: [String]

    #  The type of network
    type: [String]

    #  Status of the network
    status: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): NetworkConnection

  #  Storage areas at the location
  storageAreas(
    createdOn: DateRange
    updatedOn: DateRange

    #  Name
    name: [String]

    #  Status
    status: [String]

    #  Type
    type: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): StorageAreaConnection

  #  Opening Schedule
  openingSchedule: OpeningSchedule

  #  Manifests for this location
  manifests(
    #  External reference for the `Manifest`. Must be unique.
    ref: [String!]

    #  The name of the `Manifest`
    name: [String]

    #  The type of `Manifest`
    type: [String!]

    #  The status of the `Manifest`
    status: [String]

    #  The reference used for workflow identification
    workflowRef: [String!]

    #  The version of the workflow
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  The link where the carrier's manifest is stored. Not all the carriers generates one, so this field is optional.
    carrierManifestLink: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ManifestConnection
}

#  A list of results that matched against a Location search query
type LocationConnection {
  #  A list of edges that links to Location type node
  edges: [LocationEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Location connection to the Location type
type LocationEdge {
  #  The item at the end of the Location edge
  node: Location

  #  A cursor for use in pagination
  cursor: String
}

input LocationId {
  #  ID of the object
  id: ID!
}

#  Input type to uniquely identify a `Location` object. We use all the fields present in the request to look for this object.
input LocationKey {
  #  ID of the object
  id: ID

  #  The client's reference identifier for the object
  ref: String
}

type LocationLink {
  ref: String
}

input LocationLinkInput {
  ref: String!
}

type Manifest implements Node, Referenceable, Extendable {
  #  ID of the object
  id: ID!

  #  External reference for the `Manifest`. Must be unique.
  ref: String!

  #  The name of the `Manifest`
  name: String

  #  The `Carrier` the `Manifest` is for
  carrier: Carrier!

  #  A list of attributes associated with the `Manifest`. This can be used to
  # extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [Attribute]

  #  The type of `Manifest`
  type: String!

  #  The status of the `Manifest`
  status: String

  #  A list of the `CarrierConsignment`s contained by the manifest
  carrierConsignments(
    #  External reference of the `Consignment`. Must be unique.
    ref: [String!]

    #  The status of the consignment
    status: [String]

    #  The external consignment reference assigned by the carrier
    consignmentReference: [String]

    #  Tracking label of the consignment
    trackingLabel: [String]

    #  The URL used to retrieve the shipping label
    labelUrl: [String]

    #  A url to represent the order summary. Usually the manifest url from the service provider.
    orderSummaryUrl: [String]

    #  The reference used for workflow identification
    workflowRef: [String!]

    #   The version of the workflow
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CarrierConsignmentConnection

  #  The `Location` the `Manifest` is associated with
  location: Location

  #  The reference used for workflow identification
  workflowRef: String!

  #  The version of the workflow
  workflowVersion: Int!

  #  The time of creation
  createdOn: DateTime

  #  The time of last update
  updatedOn: DateTime

  #  The link where the carrier's manifest is stored. Not all the carriers generates one, so this field is optional.
  carrierManifestLink: String
}

#  A list of results that matched against a Manifest search query
type ManifestConnection {
  #  A list of edges that links to Manifest type node
  edges: [ManifestEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Manifest connection to the Manifest type
type ManifestEdge {
  #  The item at the end of the Manifest edge
  node: Manifest

  #  A cursor for use in pagination
  cursor: String
}

#  The `ManifestKey` input, for identifying a specific Manifest.
input ManifestKey {
  #  external reference of the object
  ref: String!
}

type Mutation {
  #  This mutation creates an `Order`, an orchestratable entity inside the Fluent
  # ecosystem. If the `Order` is successfully created, a CREATE event will be
  # generate associated with the mutation.<br/>A sample of the event
  # generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "ORDER-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "ORDER",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createOrder(input: CreateOrderInput): Order
  updateOrder(input: UpdateOrderInput): Order

  #  This mutation creates an `Order`, an orchestratable entity inside the Fluent
  # ecosystem. If the `Order` is successfully created, a CREATE event will be
  # generate associated with the mutation.<br/>A sample of the event
  # generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "ORDER-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "ORDER",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createOrderAndCustomer(input: CreateOrderAndCustomerInput): Order
  createOrderItem(input: CreateOrderItemInput): OrderItem

  #  This mutation creates a `Fulfilment`, an orchestratable entity inside the
  # Fluent ecosystem. If the `Fulfilment` is successfully created, a CREATE event
  # will be generate associated with the mutation.<br/>A sample of the event
  # generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "FULFILMENT-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "FULFILMENT",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createFulfilment(input: CreateFulfilmentInput): Fulfilment
  updateFulfilment(input: UpdateFulfilmentInput): Fulfilment
  updateOpeningSchedule(input: UpdateOpeningScheduleInput): OpeningSchedule
  createCustomer(input: CreateCustomerInput): Customer
  createStorageArea(input: CreateStorageAreaInput): StorageArea
  updateStorageArea(input: UpdateStorageAreaInput): StorageArea
  createStoreAddress(input: CreateStoreAddressInput): StoreAddress
  updateStoreAddress(input: UpdateStoreAddressInput): StoreAddress
  createCustomerAddress(input: CreateCustomerAddressInput): CustomerAddress
  updateCustomerAddress(input: UpdateCustomerAddressInput): CustomerAddress
  createNetwork(input: CreateNetworkInput): Network
  updateNetwork(input: UpdateNetworkInput): Network
  createLocation(input: CreateLocationInput): Location
  updateLocation(input: UpdateLocationInput): Location
  createRetailer(input: CreateRetailerInput): Retailer
  updateRetailer(input: UpdateRetailerInput): Retailer

  #  This mutation creates an `Article`, an orchestratable entity inside the Fluent
  # ecosystem. If the `Article` is successfully created, a CREATE event will be
  # generate associated with the mutation.<br/>A sample of the event
  # generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "ARTICLE-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "ARTICLE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createArticle(input: CreateArticleInput): Article
  updateArticle(input: UpdateArticleInput): Article
  createConsignment(input: CreateConsignmentInput): Consignment
  updateConsignment(input: UpdateConsignmentInput): Consignment

  #  Creates a `CarrierConsignment`
  createCarrierConsignment(input: CreateCarrierConsignmentInput): CarrierConsignment

  #  Updates a `CarrierConsignment`
  updateCarrierConsignment(input: UpdateCarrierConsignmentInput): CarrierConsignment

  #  Creates a `Manifest`
  createManifest(input: CreateManifestInput): Manifest

  #  Updates a `Manifest`
  updateManifest(input: UpdateManifestInput): Manifest

  #  This mutation creates a `FinancialTransaction`, an orchestratable entity
  # inside the Fluent ecosystem. If the `FinancialTransaction` is successfully
  # created, a CREATE event will be generate associated with the mutation.<br/>A
  # sample of the event generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "FINANCIALTRANSACTION-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "FINANCIALTRANSACTION",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createFinancialTransaction(input: CreateFinancialTransactionInput): FinancialTransaction

  #  Creates a `Setting`
  createSetting(input: CreateSettingInput): Setting

  #  Updates a `Setting`
  updateSetting(input: UpdateSettingInput): Setting

  #  This mutation creates a `ProductCatalogue`, an orchestratable entity inside
  # the Fluent ecosystem. If the `ProductCatalogue` is successfully created, a
  # CREATE event will be generate associated with the mutation.<br/>A sample of
  # the event generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "PRODUCTCATALOGUE-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "PRODUCTCATALOGUE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createProductCatalogue(input: CreateProductCatalogueInput): ProductCatalogue
  updateProductCatalogue(input: UpdateProductCatalogueInput): ProductCatalogue

  #  This mutation creates a `Category`, an orchestratable entity inside the Fluent
  # ecosystem. If the `Category` is successfully created, a CREATE event will be
  # generate associated with the mutation.<br/>A sample of the event
  # generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "CATEGORY-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "CATEGORY",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createCategory(input: CreateCategoryInput): Category
  updateCategory(input: UpdateCategoryInput): Category

  #  This mutation creates a `StandardProduct`, an orchestratable entity inside the
  # Fluent ecosystem. If the `StandardProduct` is successfully created, a CREATE
  # event will be generate associated with the mutation.<br/>A sample of the event
  # generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "STANDARDPRODUCT-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "STANDARDPRODUCT",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createStandardProduct(input: CreateStandardProductInput): StandardProduct
  updateStandardProduct(input: UpdateStandardProductInput): StandardProduct

  #  This mutation creates a `VariantProduct`, an orchestratable entity inside the
  # Fluent ecosystem. If the `VariantProduct` is successfully created, a CREATE
  # event will be generate associated with the mutation.<br/>A sample of the event
  # generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "VARIANTPRODUCT-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "VARIANTPRODUCT",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createVariantProduct(input: CreateVariantProductInput): VariantProduct
  updateVariantProduct(input: UpdateVariantProductInput): VariantProduct

  #  This mutation creates a `GroupProduct`, an orchestratable entity inside the
  # Fluent ecosystem. If the `GroupProduct` is successfully created, a CREATE
  # event will be generate associated with the mutation.<br/>A sample of the event
  # generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "GROUPPRODUCT-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "GROUPPRODUCT",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createGroupProduct(input: CreateGroupProductInput): GroupProduct
  updateGroupProduct(input: UpdateGroupProductInput): GroupProduct

  #  This mutation creates an `InventoryCatalogue`, an orchestratable entity inside
  # the Fluent ecosystem. If the `InventoryCatalogue` is successfully created, a
  # CREATE event will be generate associated with the mutation.<br/>A sample of
  # the event generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "INVENTORYCATALOGUE-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "INVENTORYCATALOGUE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createInventoryCatalogue(input: CreateInventoryCatalogueInput): InventoryCatalogue
  updateInventoryCatalogue(input: UpdateInventoryCatalogueInput): InventoryCatalogue

  #  This mutation creates an `InventoryPosition`, an orchestratable entity inside
  # the Fluent ecosystem. If the `InventoryPosition` is successfully created, a
  # CREATE event will be generate associated with the mutation.<br/>A sample of
  # the event generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "INVENTORYPOSITION-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "INVENTORYPOSITION",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createInventoryPosition(input: CreateInventoryPositionInput): InventoryPosition
  updateInventoryPosition(input: UpdateInventoryPositionInput): InventoryPosition

  #  This mutation creates an `InventoryQuantity`, an orchestratable entity inside
  # the Fluent ecosystem. If the `InventoryQuantity` is successfully created, a
  # CREATE event will be generate associated with the mutation.<br/>A sample of
  # the event generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "INVENTORYQUANTITY-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "INVENTORYQUANTITY",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createInventoryQuantity(input: CreateInventoryQuantityInput): InventoryQuantity
  updateInventoryQuantity(input: UpdateInventoryQuantityInput): InventoryQuantity

  #  Creates a `Comment` against a known entity
  createComment(input: CreateCommentInput): Comment

  #  Updates a `Comment`
  updateComment(input: UpdateCommentInput): Comment

  #  This mutation creates a `VirtualCatalogue`, an orchestratable entity inside
  # the Fluent ecosystem. If the `VirtualCatalogue` is successfully created, a
  # CREATE event will be generate associated with the mutation.<br/>A sample of
  # the event generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "VIRTUALCATALOGUE-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "VIRTUALCATALOGUE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createVirtualCatalogue(input: CreateVirtualCatalogueInput): VirtualCatalogue
  updateVirtualCatalogue(input: UpdateVirtualCatalogueInput): VirtualCatalogue

  #  This mutation creates a `VirtualPosition`, an orchestratable entity inside the
  # Fluent ecosystem. If the `VirtualPosition` is successfully created, a CREATE
  # event will be generate associated with the mutation.<br/>A sample of the event
  # generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "VIRTUALPOSITION-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "VIRTUALPOSITION",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createVirtualPosition(input: CreateVirtualPositionInput): VirtualPosition
  updateVirtualPosition(input: UpdateVirtualPositionInput): VirtualPosition

  #  This mutation creates a `ControlGroup`, an orchestratable entity inside the
  # Fluent ecosystem. If the `ControlGroup` is successfully created, a CREATE
  # event will be generate associated with the mutation.<br/>A sample of the event
  # generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "CONTROLGROUP-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "CONTROLGROUP",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createControlGroup(input: CreateControlGroupInput): ControlGroup
  updateControlGroup(input: UpdateControlGroupInput): ControlGroup

  #  This mutation creates a `Control`, an orchestratable entity inside the Fluent
  # ecosystem. If the `Control` is successfully created, a CREATE event will be
  # generate associated with the mutation.<br/>A sample of the event
  # generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "CONTROL-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "CONTROL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createControl(input: CreateControlInput): Control
  updateControl(input: UpdateControlInput): Control

  #  This mutation creates a `FulfilmentOption`, an orchestratable entity inside
  # the Fluent ecosystem. If the `FulfilmentOption` is successfully created, a
  # CREATE event will be generate associated with the mutation.<br/>A sample of
  # the event generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "FULFILMENTOPTION-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "FULFILMENTOPTION",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createFulfilmentOption(input: CreateFulfilmentOptionInput, executionMode: ExecutionMode): FulfilmentOption
  updateFulfilmentOption(input: UpdateFulfilmentOptionInput): FulfilmentOption

  #  This mutation creates a `FulfilmentPlan`, an orchestratable entity inside the
  # Fluent ecosystem. If the `FulfilmentPlan` is successfully created, a CREATE
  # event will be generate associated with the mutation.<br/>A sample of the event
  # generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "FULFILMENTPLAN-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "FULFILMENTPLAN",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createFulfilmentPlan(input: CreateFulfilmentPlanInput): FulfilmentPlan
  updateFulfilmentPlan(input: UpdateFulfilmentPlanInput): FulfilmentPlan

  #  This mutation creates a `Carrier`, an orchestratable entity inside the Fluent
  # ecosystem. If the `Carrier` is successfully created, a CREATE event will be
  # generate associated with the mutation.<br/>A sample of the event
  # generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "CARRIER-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "CARRIER",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createCarrier(input: CreateCarrierInput): Carrier
  updateCarrier(input: UpdateCarrierInput): Carrier

  #  Creates a `User`
  createUser(input: CreateUserInput): User

  #  Updates a `User`
  updateUser(input: UpdateUserInput): User

  #  Creates a `Role`
  createRole(input: CreateRoleInput): Role

  #  Updates a `Role`
  updateRole(input: UpdateRoleInput): Role

  #  This mutation creates a `Wave`, an orchestratable entity inside the Fluent
  # ecosystem. If the `Wave` is successfully created, a CREATE event will be
  # generate associated with the mutation.<br/>A sample of the event
  # generated:<br/>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;"name":
  # "CREATE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"type":
  # "NORMAL",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityRef":
  # "WAVE-001",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"entityType":
  # "WAVE",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"retailerId":
  # "1",<br/>&nbsp;&nbsp;&nbsp;&nbsp;"accountId": "ACCOUNT_ID"<br/>}<br/>
  createWave(input: CreateWaveInput): Wave
  updateWave(input: UpdateWaveInput): Wave

  # Creates a new 'Billing account'
  createBillingAccount(input: CreateBillingAccountInput): BillingAccount

  # Updates a new 'Billing account'        
  updateBillingAccount(input: UpdateBillingAccountInput): BillingAccount

  # Creates a 'Credit memo' 
  createCreditMemo(input: CreateCreditMemoInput): CreditMemo

  # Updates a 'Credit memo'        
  updateCreditMemo(input: UpdateCreditMemoInput): CreditMemo

  # Creates a 'Credit memo item'
  createCreditMemoItem(input: CreateCreditMemoItemInput): CreditMemoItem

  # Creates an 'Invoice'
  createInvoice(input: CreateInvoiceInput): Invoice

  # Updates an 'Invoice'       
  updateInvoice(input: UpdateInvoiceInput): Invoice

  # Creates an 'Invoice item'
  createInvoiceItem(input: CreateInvoiceItemInput): InvoiceItem

  # Creates a 'Return order'
  createReturnOrder(input: CreateReturnOrderInput): ReturnOrder

  # Updates a 'Return order'        
  updateReturnOrder(input: UpdateReturnOrderInput): ReturnOrder

  # Creates a 'Return order item'
  createReturnOrderItem(input: CreateReturnOrderItemInput): ReturnOrderItem

  # Creates a 'Return fulfilment'    
  createReturnFulfilment(input: CreateReturnFulfilmentInput): ReturnFulfilment

  # Updates a 'Return fulfilment'        
  updateReturnFulfilment(input: UpdateReturnFulfilmentInput): ReturnFulfilment

  # Creates a 'Return fulfilment item' 
  createReturnFulfilmentItem(input: CreateReturnFulfilmentItemInput): ReturnFulfilmentItem

  #  Used to bulk update the statuses of a list of Inventory Positions
  updateInventoryPositionsStatusByLocation(filter: InventoryPositionsLocationFilterInput!, input: StatusInput!): UpdateStatusOutput

  #  Used to bulk update the statuses of a list of Virtual Positions
  updateVirtualPositionsStatusByGroup(filter: VirtualPositionsGroupFilterInput!, input: StatusInput!): UpdateStatusOutput

  #  Removes one or more `Location`s from a `Network`
  removeLocationsFromNetwork(input: RemoveLocationsFromNetworkInput): RemoveLocationsFromNetworkOutput

  #  Removes one or more `Network`s from a `Location`
  removeNetworksFromLocation(input: RemoveNetworksFromLocationInput): RemoveNetworksFromLocationOutput

  #  Removes one or more `UserRole`s from an `User`
  removeUserRolesFromUser(input: RemoveUserRolesFromUserInput): RemoveUserRolesFromUserOutput

  #  Removes one or more `Permission`s from a `Role`
  removePermissionsFromRole(input: RemovePermissionsFromRoleInput): RemovePermissionsFromRoleOutput
}

#  A network is a collection of physical fulfilment or collection locations such as stores, warehouses, distribution centres.
type Network implements Node {
  #  ID of the object
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  Reference to the network. This is the name of the network you passed in while
  # creating the network. Recommended to be unique.
  ref: String

  #  The type of network
  type: String

  #  Status of the network
  status: String

  #  Network attributes
  attributes: [Attribute]

  #  A list of retailers associated with this network
  retailers(
    createdOn: DateRange
    updatedOn: DateRange

    #  Status of the retailer
    status: [String]

    #  Reference for the retailer
    ref: [String!]

    #  Short description of the retailer
    summary: [String]

    #  Retailer's website URL used in customer notifications
    websiteUrl: [String]

    #  Friendly text to be shown for URL links in customer notifications
    websiteUrlName: [String]

    #  Primary email of the retailer
    primaryEmail: [String]

    #  Customer support contact name
    supportContactName: [String]

    #  Customer support email used in customer notifications
    supportEmail: [String]

    #  Customer support phone number used in customer notifications
    supportPhone: [String]

    #  The retailer's trading name used in customer notifications
    tradingName: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): RetailerConnection

  #  Locations in the network
  locations(
    #  The location (i.e. store) id provided by the retailer
    ref: [String]
    createdOn: DateRange
    updatedOn: DateRange

    #  Type
    type: [String]

    #  The location status. Possible values are 'ACTIVE', 'INACTIVE'.
    status: [String]

    #  Name of location
    name: [String]

    #  The location contact number
    supportPhoneNumber: [String]

    #  Default carrier
    defaultCarrier: [String]

    #  Default carrier of the location
    defaultCarrierName: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): LocationConnection
}

#  A list of results that matched against a Network search query
type NetworkConnection {
  #  A list of edges that links to Network type node
  edges: [NetworkEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Network connection to the Network type
type NetworkEdge {
  #  The item at the end of the Network edge
  node: Network

  #  A cursor for use in pagination
  cursor: String
}

input NetworkId {
  #  ID of the object
  id: ID!
}

#  Input type to uniquely identify a `Network` object. We use all the fields present in the request to look for this object.
input NetworkKey {
  #  ID of the object
  id: ID

  #  The client's reference identifier for the object
  ref: String
}

#  Represents an object with `ID`.
interface Node {
  #  ID of the object
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime
}

#  Opening hours for a location
type OpeningSchedule {
  #  ID of the object
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  Is the location open 24hrs
  allHours: Boolean!

  #  Closing time on Monday (HHmm)
  monEnd: Int!

  #  Opening time on Monday (HHmm).
  monStart: Int!

  #  Closing time on Tuesday (HHmm)
  tueEnd: Int!

  #  Opening time on Tuesday (HHmm)
  tueStart: Int!

  #  Closing time on Wednesday (HHmm)
  wedEnd: Int!

  #  Opening time on Wednesday (HHmm)
  wedStart: Int!

  #  Closing time on Thursday (HHmm)
  thuEnd: Int!

  #  Opening time on Thursday (HHmm)
  thuStart: Int!

  #  Closing time on Friday (HHmm)
  friEnd: Int!

  #  Opening time on Friday (HHmm)
  friStart: Int!

  #  Closing time on Saturday (HHmm)
  satEnd: Int!

  #  Opening time on Saturday (HHmm)
  satStart: Int!

  #  Closing time on Sunday (HHmm)
  sunEnd: Int!

  #  Opening time on Sunday (HHmm)
  sunStart: Int!
}

#  A list of results that matched against a OpeningSchedule search query
type OpeningScheduleConnection {
  #  A list of edges that links to OpeningSchedule type node
  edges: [OpeningScheduleEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a OpeningSchedule connection to the OpeningSchedule type
type OpeningScheduleEdge {
  #  The item at the end of the OpeningSchedule edge
  node: OpeningSchedule

  #  A cursor for use in pagination
  cursor: String
}

#  Represents an object that can be orchestrated via a workflow
interface Orchestrateable {
  type: String!
  status: String
  workflowRef: String!
  workflowVersion: Int!
}

#  A customer's order.
type Order implements Node, Orchestrateable {
  #  ID of the object
  id: ID!

  #  External reference of the object. Must be unique.
  ref: String

  #  Type of the `Order`, typically used by the Orchestration Engine to determine
  # the workflow that should be applied. Unless stated otherwise, no values are
  # enforced by the platform.<br/>
  #  Currently supports values _CC_, _SFS_, _HD_ for _Click and Collect_, _Ship
  # from Store_ and _Home Delivery_ type orders respectively
  type: String!

  #  The current status of the `Order`.<br/>By default, the initial value will be
  # CREATED, however no other status values are enforced by the platform.<br/>The
  # status field is also used within ruleset selection during orchestration. For
  # more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  List of order `attribute`s
  attributes: [Attribute]

  #  `Retailer` of the order
  retailer: Retailer

  #  Total price
  totalPrice: Float

  #  Total tax price
  totalTaxPrice: Float

  #  The `FulfilmentChoice` specified when booking the order
  fulfilmentChoice: FulfilmentChoice

  #  `Customer` of the order
  customer: Customer

  #  Connection representing a list of `OrderItem`s
  items(
    #  External reference of the object. Recommended to be unique.
    ref: [String]

    #  Status
    status: [String!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Quantity ordered
    quantity: [Int!]

    #  Price paid. Excludes tax.
    paidPrice: [Float]

    #  Currency. Should ideally be a 3 letter ISO currency code. For instance _AUD_.
    currency: [String]

    #  Price
    price: [Float]

    #  Tax price
    taxPrice: [Float]

    #  Tax type. Supported values are _GST_, _VAT_, _EXCLTAX_
    taxType: [String]

    #  Total price
    totalPrice: [Float]

    #  Total tax price
    totalTaxPrice: [Float]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): OrderItemConnection

  #  Connection representing a list of `Fulfilment`s
  fulfilments(
    #  External reference of the object. Recommended to be unique.
    ref: [String]
    status: [String]
    workflowRef: [String!]
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Type of delivery. Supported values are _STANDARD_, _OVERNIGHT_ and _EXPRESS_.
    deliveryType: [String]

    #  Type of fulfilment. Supported types are <br/>
    #  - *CC_PFS* for Click & Collect - Pick from Store
    #  - *CC_PFDC* for Click & Collect - Pick from DC
    #  - *HD_PFS* for Home Delivery - Pick from Store
    #  - *HD_PFDC* for Home Delivery - Pick from DC
    type: [String!]

    #  The estimated time of completing the fulfilment.
    eta: [String]
    expiryTime: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): FulfilmentConnection

  #  Connection representing a list of `FinancialTransaction`s
  financialTransactions(
    #  The unique transaction reference provided by the Retailer to the payment gateway
    ref: [String]
    type: [String!]
    status: [String]
    workflowRef: [String!]
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  The total transaction amount
    total: [Float!]

    #  Currency used for the transaction.
    currency: [String!]

    #  The unique transaction code or request code provided by the payment gateway
    externalTransactionCode: [String]

    #  The unique transaction ID or request ID provided by the payment gateway
    externalTransactionId: [String]

    #  The card type used for the payment. Possible values are 'MASTERCARD', 'VISA', 'AMEX', 'DINERS'.
    cardType: [String]

    #  The way in which payment was made. Platform provides support for the
    # following payment methods - 'CREDITCARD', 'PAYPAL', 'GIFTVOUCHER', 'CASH',
    # 'AFTERPAY'. However, these
    #  can be overridden/configured per client as settings
    paymentMethod: [String]

    #  The name of the payment gateway. Platform provided values are 'CYBERSOURCE',
    # 'GIVEX', 'PAYPAL', 'BRAINTREE', 'AFTERPAY'. However, these can be
    # overridden/configured per client as settings using 'PAYMENT.PROVIDER'
    paymentProviderName: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): FinancialTransactionConnection
}

#  A list of results that matched against a Order search query
type OrderConnection {
  #  A list of edges that links to Order type node
  edges: [OrderEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Order connection to the Order type
type OrderEdge {
  #  The item at the end of the Order edge
  node: Order

  #  A cursor for use in pagination
  cursor: String
}

input OrderId {
  #  ID of the object
  id: ID!
}

#  An `OrderItem` generally represents a SKU purchased by the customer. There can
# be one or more `OrderItem`s within an `Order`
type OrderItem implements Node {
  #  ID of the object
  id: ID!

  #  External reference of the object. Recommended to be unique.
  ref: String

  #  Represents the `Product` corresponding to this object
  product: Product!

  #  Status
  status: String!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  Quantity ordered
  quantity: Int!

  #  Price paid. Excludes tax.
  paidPrice: Float

  #  Currency. Should ideally be a 3 letter ISO currency code. For instance _AUD_.
  currency: String

  #  Price
  price: Float

  #  Tax price
  taxPrice: Float

  #  Tax type. Supported values are _GST_, _VAT_, _EXCLTAX_
  taxType: String

  #  Total price
  totalPrice: Float

  #  Total tax price
  totalTaxPrice: Float

  #  The associated `Order`
  order: Order

  #  List of `OrderItem` `attribute`s.
  attributes: [Attribute]
}

#  A list of results that matched against a OrderItem search query
type OrderItemConnection {
  #  A list of edges that links to OrderItem type node
  edges: [OrderItemEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a OrderItem connection to the OrderItem type
type OrderItemEdge {
  #  The item at the end of the OrderItem edge
  node: OrderItem

  #  A cursor for use in pagination
  cursor: String
}

input OrderItemId {
  #  ID of the object
  id: ID!
}

type OrderItemLink {
  ref: String
  order: OrderLink
}

input OrderItemLinkInput {
  ref: String!
  order: OrderLinkInput!
}

#  The `OrderKey` input identify the `Order` using either the id or the external reference to the object
input OrderKey {
  #  ID of the `Order`
  id: ID

  #  External reference of the `Order`.
  ref: String
}

type OrderLink {
  ref: String
  retailer: RetailerLink
}

input OrderLinkInput {
  ref: String!
  retailer: RetailerId!
}

#  Information to aid in pagination
type PageInfo {
  #  true if there are one or more pages of items before the current page
  hasPreviousPage: Boolean

  #  true if there are one or more pages of items beyond the current page
  hasNextPage: Boolean
}

#  A `permission` represents a single access right. It implies the authorization to
# carry out a certain function within the system.
type Permission {
  #  Name of the permission. Must be unique.
  name: String!
}

#  A list of results that matched against a Permission search query
type PermissionConnection {
  #  A list of edges that links to Permission type node
  edges: [PermissionEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Permission connection to the Permission type
type PermissionEdge {
  #  The item at the end of the Permission edge
  node: Permission

  #  A cursor for use in pagination
  cursor: String
}

#  Input type to uniquely identify a `Permission` object. We use all the fields
# present in the request to look for this object.
input PermissionKey {
  #  Name of the permission
  name: String!
}

#  The `Price` type is a structure to hold a Price value for Products. It is
# considered more like a complex value type, rather than an object. All fields are
# required, and the `type` and `currency` fields make up the unique key for the `value`.
type Price {
  #  The type field is used to identify different types of prices, for example
  # 'RRP', 'SALE', etc. No Price type values are enforced by the platform.
  type: String!

  #  The currency of the Price, for example 'USD', 'GBP', 'AUD', etc.
  currency: String!

  #  The price value itself
  value: Float!
}

#  A list of results that matched against a Price search query
type PriceConnection {
  #  A list of edges that links to Price type node
  edges: [PriceEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Price connection to the Price type
type PriceEdge {
  #  The item at the end of the Price edge
  node: Price

  #  A cursor for use in pagination
  cursor: String
}

#  Input structure for creating or updating `Price`'s on a `Product`. If `type` and
# `currency` match, it will UPDATE, otherwise it will CREATE. All fields are required.
input PriceInput {
  type: String!
  currency: String!
  value: Float!
}

#  The `Product` interface identifies a type that is, and is treated like, a Product. <br /><br />
#  There are currently 3 Product implementations available that represent the most
# common product type abstractions within the Product domain: <br />
#  * `StandardProduct` - An ordinary Product structure.
#  * `VariantProduct` - A variation based Product structure which can have a
# Standard Product as a base. Variation examples include 'Size', 'Color',
# 'Volume', 'Flavour', etc. and can be managed with the `attributes` field.
#  * `GroupProduct` - A group Product structure. A Group Product can contain multiple other products, of any Product type.
interface Product {
  #  The name of the product
  name: String!

  #  A short description of the product (max 255 chars)
  summary: String

  #  A list of prices for the product
  prices: [Price]

  #  Tax information for the product
  tax: TaxType
}

#  The `ProductCatalogue` is a structure that supports a grouping of product and
# category data. The `ref` field will be the unique identifier for this catalogue. <br /><br />
#  The `ProductCatalogue` is an orchestrateable entity, and the parent type for all
# `Product` and `Category` orchestration events. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
type ProductCatalogue implements Node, Referenceable, Orchestrateable, Extendable {
  #  ID of the object. For internal use, should not be used externally or by any business logic
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  The unique reference identifier for the Product Catalogue
  ref: String!

  #  Type of the `ProductCatalogue`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  The current status of the `ProductCatalogue`.<br/>By default, the initial
  # value will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Product Catalogue. This can be used
  # to extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [Attribute]

  #  The name of the Product Catalogue
  name: String!

  #  A short description of the Product Catalogue
  description: String

  #  A list of Retailer references associated with this Product Catalogue
  retailerRefs: [String]

  #  A connection to associated Categories
  categories(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Category
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  The name of the Category
    name: [String!]

    #  A short description of the Category
    summary: [String]
    catalogue: ProductCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CategoryConnection
}

#  A list of results that matched against a ProductCatalogue search query
type ProductCatalogueConnection {
  #  A list of edges that links to ProductCatalogue type node
  edges: [ProductCatalogueEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a ProductCatalogue connection to the ProductCatalogue type
type ProductCatalogueEdge {
  #  The item at the end of the ProductCatalogue edge
  node: ProductCatalogue

  #  A cursor for use in pagination
  cursor: String
}

#  The `ProductCatalogueKey` input is the parameter for identifying a specific Product Catalogue.
input ProductCatalogueKey {
  #  Product Catalogue reference identifier
  ref: String!
}

input ProductCatalogueLinkInput {
  ref: String!
}

#  The `ProductKey` input is the parameter for identifying a specific Product.
input ProductKey {
  #  Product reference identifier
  ref: String!

  #  The Product Catalogue in which this Product resides
  catalogue: ProductCatalogueKey!
}

type ProductLink {
  ref: String
  catalogue: CatalogueLink
}

input ProductLinkInput {
  ref: String!
  catalogue: ProductCatalogueLinkInput!
}

#  Type to encapsulate a product and its requested quantity
input ProductQuantityInput {
  #  Reference identifier for the `Product`
  productRef: String!

  #  Requested quantity of the associated `Product`
  quantity: Int!
}

#  The `QuantityType` type, holds separately the amount (quantity) and the units associated.
type QuantityType {
  #  The quantity itself.
  quantity: Int

  #  The unit associated.
  unit: String
}

input QuantityTypeInput {
  quantity: Int!
  unit: String
}

#  Query type defines the GraphQL operations that fetch data from the server
type Query {
  #  Find a Setting entity
  setting(
    #  The unique setting id assigned by Fluent
    id: ID
  ): Setting

  #  Find a ProductCatalogue entity
  productCatalogue(
    #  The unique reference identifier for the Product Catalogue
    ref: String!
  ): ProductCatalogue

  #  Find a StandardProduct entity
  standardProduct(
    #  The unique reference identifier for the Product
    ref: String!
    catalogue: ProductCatalogueKey!
  ): StandardProduct

  #  Find a VariantProduct entity
  variantProduct(
    #  The unique reference identifier for the Product
    ref: String!
    catalogue: ProductCatalogueKey!
  ): VariantProduct

  #  Find a GroupProduct entity
  groupProduct(
    #  The unique reference identifier for the Product
    ref: String!
    catalogue: ProductCatalogueKey!
  ): GroupProduct

  #  This query searches the virtual inventory to return locations and
  # available-to-sell stock for the requested products and their given quantities.
  searchVirtualInventory(
    #  Reference identifier for the `VirtualCatalogue` that will be searched
    virtualCatalogue: VirtualCatalogueKey!

    #  Identifier for the `VirtualPosition` that will be searched
    virtualPosition: VirtualPositionInput

    #  An array of products with their requested quantities
    productQuantities: [ProductQuantityInput!]!

    #  An array of references of `Location` objects that will be excluded from this search should this parameter be passed
    excludedLocationRefs: [String!]

    #  GeoCoordinates to order results by. Closest locations are returned first. If
    # this parameter is not passed, results will be in no specific order
    orderByProximity: GeoCoordinateInput

    #  Returns the first n elements from the list
    first: Int
  ): VirtualInventoryConnection

  #  Search for ProductCatalogue entities
  productCatalogues(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Product Catalogue
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  The name of the Product Catalogue
    name: [String!]

    #  A short description of the Product Catalogue
    description: [String]

    #  A list of Retailer references associated with this Product Catalogue
    retailerRefs: [[String]]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ProductCatalogueConnection

  #  Find a InventoryCatalogue entity
  inventoryCatalogue(
    #  Inventory Catalogue reference identifier
    ref: String!
  ): InventoryCatalogue

  #  Search for InventoryCatalogue entities
  inventoryCatalogues(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Inventory Catalogue
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  The name of the Inventory Catalogue
    name: [String!]

    #  A short description of the Inventory Catalogue
    description: [String]

    #  A list of Retailer references associated with this Inventory Catalogue
    retailerRefs: [[String]]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): InventoryCatalogueConnection

  #  Find a InventoryPosition entity
  inventoryPosition(
    #  Inventory Position reference identifier
    ref: String!

    #  The Inventory Catalogue in which this Position resides
    catalogue: InventoryCatalogueKey!
  ): InventoryPosition

  #  Search for InventoryPosition entities
  inventoryPositions(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Inventory Position
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  A reference identifying a Product. The referenced product may or may not
    # exist within one or more Product Catalogues. This is a loosely coupled
    # association, since Product and Inventory are separate domains.
    productRef: [String!]

    #  The calculated on hand quantity based on the associated quantities, and rules in the orchestration workflow
    onHand: [Int]

    #  A reference identifying the Location where this inventory exists. This is a loosely coupled association.
    locationRef: [String]
    catalogue: InventoryCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): InventoryPositionConnection

  #  Find a InventoryQuantity entity
  inventoryQuantity(
    #  Inventory Quantity reference identifier
    ref: String!

    #  The Inventory Catalogue in which this Quantity resides
    catalogue: InventoryCatalogueKey!
  ): InventoryQuantity

  #  Search for InventoryQuantity entities
  inventoryQuantities(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Inventory Quantity
    ref: [String!]

    #  The type field can be used to differentiate between Inventory Quantity
    # workflows. Example types include `LAST_ON_HAND`, `RESERVED`, `EXPECTED`, and `ADJUSTMENT`.
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  The actual amount of this specific Quantity record
    quantity: [Int]

    #  The condition of the Inventory Quantity value. The platform does not enforce
    # any values here. Examples could include `NEW`, `USED`, or `DAMAGED`
    condition: [String]
    expectedOn: DateRange

    #  A reference to the Storage Area where this inventory is kept
    storageAreaRef: [String]
    catalogue: InventoryCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): InventoryQuantityConnection

  #  Find a Category entity
  category(
    #  Category reference identifier
    ref: String!

    #  The Product Catalogue in which this Category resides
    catalogue: ProductCatalogueKey!
  ): Category

  #  Search for Category entities
  categories(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Category
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  The name of the Category
    name: [String!]

    #  A short description of the Category
    summary: [String]
    catalogue: ProductCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CategoryConnection

  #  Search for StandardProduct entities
  standardProducts(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Product
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  The Global Trade Item Number (GTIN) for this Product
    gtin: [String!]

    #  The name of the Product
    name: [String!]

    #  A short description of the Product (max 255 chars)
    summary: [String]
    catalogue: ProductCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): StandardProductConnection

  #  Search for VariantProduct entities
  variantProducts(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Product
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  The Global Trade Item Number (GTIN) for this Product
    gtin: [String!]

    #  The name of the Product
    name: [String!]

    #  A short description of the Product (max 255 chars)
    summary: [String]
    catalogue: ProductCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): VariantProductConnection

  #  Search for GroupProduct entities
  groupProducts(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Product
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  The name of the Product
    name: [String!]

    #  A short description of the Product (max 255 chars)
    summary: [String]
    catalogue: ProductCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): GroupProductConnection

  #  Search for Price entities
  prices(
    #  The type field is used to identify different types of prices, for example
    # 'RRP', 'SALE', etc. No Price type values are enforced by the platform.
    type: [String!]

    #  The currency of the Price, for example 'USD', 'GBP', 'AUD', etc.
    currency: [String!]

    #  The price value itself
    value: [Float!]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): PriceConnection

  #  Find a Retailer entity
  retailerById(
    #  ID of the object
    id: ID!
  ): Retailer

  #  Search for Retailer entities
  retailers(
    createdOn: DateRange
    updatedOn: DateRange

    #  Status of the retailer
    status: [String]

    #  Reference for the retailer
    ref: [String!]

    #  Short description of the retailer
    summary: [String]

    #  Retailer's website URL used in customer notifications
    websiteUrl: [String]

    #  Friendly text to be shown for URL links in customer notifications
    websiteUrlName: [String]

    #  Primary email of the retailer
    primaryEmail: [String]

    #  Customer support contact name
    supportContactName: [String]

    #  Customer support email used in customer notifications
    supportEmail: [String]

    #  Customer support phone number used in customer notifications
    supportPhone: [String]

    #  The retailer's trading name used in customer notifications
    tradingName: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): RetailerConnection

  #  Find a Network entity
  networkById(
    #  ID of the object
    id: ID!
  ): Network

  #  Find a Network entity
  network(
    #  ID of the object
    id: ID

    #  Reference to the network. This is the name of the network you passed in
    # while creating the network. Recommended to be unique.
    ref: String
  ): Network

  #  Search for Network entities
  networks(
    createdOn: DateRange
    updatedOn: DateRange

    #  Reference to the network. This is the name of the network you passed in
    # while creating the network. Recommended to be unique.
    ref: [String]

    #  The type of network
    type: [String]

    #  Status of the network
    status: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): NetworkConnection

  #  Find a StoreAddress entity
  storeAddressById(
    #  ID of the object
    id: ID!
  ): StoreAddress

  #  Search for StoreAddress entities
  storeAddresses(
    #  Type of Address, to support legacy address, the value can be AGENT and ORDER
    type: [String]
    createdOn: DateRange
    updatedOn: DateRange

    #  Directions to store location (may be used for landmarks)
    directions: [String]

    #  Company name
    companyName: [String]

    #  Name
    name: [String]

    #  Street
    street: [String]

    #  City
    city: [String]

    #  State
    state: [String]

    #  Postcode
    postcode: [String]

    #  Region
    region: [String]

    #  Country
    country: [String]

    #  Latitude
    latitude: [Float]

    #  Longitude
    longitude: [Float]

    #  Location reference
    ref: [String]

    #  Timezone
    timeZone: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): StoreAddressConnection

  #  Find a CustomerAddress entity
  customerAddressById(
    #  ID of the object
    id: ID!
  ): CustomerAddress

  #  Search for CustomerAddress entities
  customerAddresses(
    #  Type of Address, to support legacy address, the value can be AGENT and ORDER
    type: [String]
    createdOn: DateRange
    updatedOn: DateRange

    #  Company name
    companyName: [String]

    #  Name
    name: [String]

    #  Street
    street: [String]

    #  City
    city: [String]

    #  State
    state: [String]

    #  Postcode
    postcode: [String]

    #  Region
    region: [String]

    #  Country
    country: [String]

    #  Latitude
    latitude: [Float]

    #  Longitude
    longitude: [Float]

    #  Location reference
    ref: [String]

    #  Timezone
    timeZone: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CustomerAddressConnection

  #  Find a Location entity
  locationById(
    #  ID of the object
    id: ID!
  ): Location

  #  Find a Location entity
  location(
    #  ID of the object
    id: ID

    #  The client's reference identifier for the object
    ref: String
  ): Location

  #  Search for Location entities
  locations(
    #  The location (i.e. store) id provided by the retailer
    ref: [String]
    createdOn: DateRange
    updatedOn: DateRange

    #  Type
    type: [String]

    #  The location status. Possible values are 'ACTIVE', 'INACTIVE'.
    status: [String]

    #  Name of location
    name: [String]

    #  The location contact number
    supportPhoneNumber: [String]

    #  Default carrier
    defaultCarrier: [String]

    #  Default carrier of the location
    defaultCarrierName: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): LocationConnection

  #  Search for OpeningSchedule entities
  openingSchedules(
    createdOn: DateRange
    updatedOn: DateRange

    #  Is the location open 24hrs
    allHours: [Boolean!]

    #  Closing time on Monday (HHmm)
    monEnd: [Int!]

    #  Opening time on Monday (HHmm).
    monStart: [Int!]

    #  Closing time on Tuesday (HHmm)
    tueEnd: [Int!]

    #  Opening time on Tuesday (HHmm)
    tueStart: [Int!]

    #  Closing time on Wednesday (HHmm)
    wedEnd: [Int!]

    #  Opening time on Wednesday (HHmm)
    wedStart: [Int!]

    #  Closing time on Thursday (HHmm)
    thuEnd: [Int!]

    #  Opening time on Thursday (HHmm)
    thuStart: [Int!]

    #  Closing time on Friday (HHmm)
    friEnd: [Int!]

    #  Opening time on Friday (HHmm)
    friStart: [Int!]

    #  Closing time on Saturday (HHmm)
    satEnd: [Int!]

    #  Opening time on Saturday (HHmm)
    satStart: [Int!]

    #  Closing time on Sunday (HHmm)
    sunEnd: [Int!]

    #  Opening time on Sunday (HHmm)
    sunStart: [Int!]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): OpeningScheduleConnection

  #  Find a StorageArea entity
  storageAreaById(
    #  ID of the object
    id: ID!
  ): StorageArea

  #  Search for StorageArea entities
  storageAreas(
    createdOn: DateRange
    updatedOn: DateRange

    #  Name
    name: [String]

    #  Status
    status: [String]

    #  Type
    type: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): StorageAreaConnection

  #  Find a Order entity
  orderById(
    #  ID of the object
    id: ID!
  ): Order

  #  Find a Order entity
  order(
    #  ID of the `Order`
    id: ID

    #  External reference of the `Order`.
    ref: String
  ): Order

  #  Search for Order entities
  orders(
    #  External reference of the object. Must be unique.
    ref: [String]

    #  Currently supports values _CC_, _SFS_, _HD_ for _Click and Collect_, _Ship
    # from Store_ and _Home Delivery_ type orders respectively
    type: [String!]
    status: [String]
    workflowRef: [String!]
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Total price
    totalPrice: [Float]

    #  Total tax price
    totalTaxPrice: [Float]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): OrderConnection

  #  Find a Customer entity
  customerById(
    #  ID of the object
    id: ID!
  ): Customer

  #  Find a Customer entity
  customer(
    #  Username of the customer
    ref: String!
  ): Customer

  #  Search for Customer entities
  customers(
    #  Username of the customer
    ref: [String]

    #  Status
    status: [String]
    createdOn: DateRange
    updatedOn: DateRange

    #  The customer's title
    title: [String]

    #  The department/team that the customer belongs to
    department: [String]

    #  The country the customer is operating from
    country: [String]

    #  The customer's first name
    firstName: [String]

    #  The customer's last name
    lastName: [String]

    #  Username
    username: [String]

    #  Email
    primaryEmail: [String]

    #  Phone number
    primaryPhone: [String]

    #  Timezones
    timezone: [String]

    #  Whether the customer has opted to receive promotions
    promotionOptIn: [Boolean]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CustomerConnection

  #  Find a OrderItem entity
  orderItemById(
    #  ID of the object
    id: ID!
  ): OrderItem

  #  Search for OrderItem entities
  orderItems(
    #  External reference of the object. Recommended to be unique.
    ref: [String]

    #  Status
    status: [String!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Quantity ordered
    quantity: [Int!]

    #  Price paid. Excludes tax.
    paidPrice: [Float]

    #  Currency. Should ideally be a 3 letter ISO currency code. For instance _AUD_.
    currency: [String]

    #  Price
    price: [Float]

    #  Tax price
    taxPrice: [Float]

    #  Tax type. Supported values are _GST_, _VAT_, _EXCLTAX_
    taxType: [String]

    #  Total price
    totalPrice: [Float]

    #  Total tax price
    totalTaxPrice: [Float]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): OrderItemConnection

  #  Find a Fulfilment entity
  fulfilmentById(
    #  ID of the object
    id: ID!
  ): Fulfilment

  #  Search for Fulfilment entities
  fulfilments(
    #  External reference of the object. Recommended to be unique.
    ref: [String]
    status: [String]
    workflowRef: [String!]
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Type of delivery. Supported values are _STANDARD_, _OVERNIGHT_ and _EXPRESS_.
    deliveryType: [String]

    #  Type of fulfilment. Supported types are <br/>
    #  - *CC_PFS* for Click & Collect - Pick from Store
    #  - *CC_PFDC* for Click & Collect - Pick from DC
    #  - *HD_PFS* for Home Delivery - Pick from Store
    #  - *HD_PFDC* for Home Delivery - Pick from DC
    type: [String!]

    #  The estimated time of completing the fulfilment.
    eta: [String]
    expiryTime: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): FulfilmentConnection

  #  Search for FulfilmentItem entities
  fulfilmentItems(
    #  External reference of the object. Recommended to be unique.
    ref: [String]

    #  Status
    status: [String!]

    #  Number of `OrderItem`s assigned to the fulfilment
    requestedQuantity: [Int]

    #  Number of `OrderItem`s confirmed
    filledQuantity: [Int!]

    #  Number of `OrderItem`s rejected
    rejectedQuantity: [Int!]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): FulfilmentItemConnection

  #  Find a Article entity
  articleById(
    #  ID of the object
    id: ID!
  ): Article

  #  Search for Article entities
  articles(
    #  The unique article reference provided by the retailer
    ref: [String]
    type: [String!]
    status: [String]
    workflowRef: [String!]
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Description
    description: [String]

    #  Height
    height: [Float!]

    #  Length
    length: [Float!]

    #  Name
    name: [String]

    #  Weight
    weight: [Float!]

    #  Width
    width: [Float!]

    #  Quantity
    quantity: [Int]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ArticleConnection

  #  Find a ConsignmentArticle entity
  consignmentArticleById(article: ArticleId, consignment: ConsignmentId): ConsignmentArticle

  #  Search for ConsignmentArticle entities
  consignmentArticles(
    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ConsignmentArticleConnection

  #  Find a CarrierConsignmentArticle entity
  carrierConsignmentArticleById(article: ArticleId, carrierConsignment: CarrierConsignmentKey): CarrierConsignmentArticle

  #  Search for CarrierConsignmentArticle entities
  carrierConsignmentArticles(
    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CarrierConsignmentArticleConnection

  #  Find a Manifest entity
  manifest(
    #  external reference of the object
    ref: String!
  ): Manifest

  #  Search for Manifest entities
  manifests(
    #  External reference for the `Manifest`. Must be unique.
    ref: [String!]

    #  The name of the `Manifest`
    name: [String]

    #  The type of `Manifest`
    type: [String!]

    #  The status of the `Manifest`
    status: [String]

    #  The reference used for workflow identification
    workflowRef: [String!]

    #  The version of the workflow
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  The link where the carrier's manifest is stored. Not all the carriers generates one, so this field is optional.
    carrierManifestLink: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ManifestConnection

  #  Search for ArticleItem entities
  articleItems(
    createdOn: DateRange
    updatedOn: DateRange

    #  Quantity of article item
    quantity: [Int!]

    #  Barcode of article item
    barcode: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ArticleItemConnection

  #  Find a Consignment entity
  consignmentById(
    #  ID of the object
    id: ID!
  ): Consignment

  #  Search for Consignment entities
  consignments(
    #  External reference of the object. Recommended to be unique.
    ref: [String]

    #  The status of the consignment
    status: [String]

    #  The external consignment reference assigned by the carrier
    consignmentReference: [String!]

    #  Tracking label of the consignment
    trackingLabel: [String]

    #  The URL used to retrieve the shipping label
    labelUrl: [String]

    #  A url to represent the order summary. Usually the manifest url from the service provider.
    orderSummaryUrl: [String]

    #  The reference used for workflow identification
    workflowRef: [String!]

    #   The version of the workflow
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ConsignmentConnection

  #  Find a CarrierConsignment entity
  carrierConsignment(
    #  External reference of the `Consignment`. Must be unique.
    ref: String!
  ): CarrierConsignment

  #  Search for CarrierConsignment entities
  carrierConsignments(
    #  External reference of the `Consignment`. Must be unique.
    ref: [String!]

    #  The status of the consignment
    status: [String]

    #  The external consignment reference assigned by the carrier
    consignmentReference: [String]

    #  Tracking label of the consignment
    trackingLabel: [String]

    #  The URL used to retrieve the shipping label
    labelUrl: [String]

    #  A url to represent the order summary. Usually the manifest url from the service provider.
    orderSummaryUrl: [String]

    #  The reference used for workflow identification
    workflowRef: [String!]

    #   The version of the workflow
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CarrierConsignmentConnection

  #  Find a Carrier entity
  carrierById(
    #  ID of the object
    id: ID!
  ): Carrier

  #  Find a Carrier entity
  carrier(
    #  Reference of the object
    ref: String!
  ): Carrier

  #  Search for Carrier entities
  carriers(
    #  The carrier name
    name: [String!]

    #  The type field can be used to differentiate between Inventory Position workflows
    type: [String!]

    #  The reference identifier used to identify an entity
    ref: [String!]

    #  The reference used for workflow identification
    workflowRef: [String!]

    #   The version of the workflow
    workflowVersion: [Int!]
    status: [String]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CarrierConnection

  #  Search for CarrierDetails entities
  carrierDetailses(
    #  Retailer ID of carrier details
    retailerId: [String]

    #  Location ID of carrier details
    agentId: [String]

    #  Carrier ID of carrier details
    carrierId: [String]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CarrierDetailsConnection

  #  Search for CarrierAttribute entities
  carrierAttributes(
    name: [String!]
    value: [String!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CarrierAttributeConnection

  #  Search for FulfilmentChoice entities
  fulfilmentChoices(
    createdOn: DateRange
    updatedOn: DateRange

    #  The type of currency, 3 letter ISO currency code
    currency: [String]

    #  Instruction provided by the customer (250 character limit)
    deliveryInstruction: [String]

    #  The type of delivey determined by retailers' shipping options. Example values are STANDARD, EXPRESS, OVERNIGHT, 3HOURS
    deliveryType: [String!]

    #  FulfilmentPrice refers to shipping fees if order type is Home Delivery HD and C&C fees for Click & Collect orders
    fulfilmentPrice: [Float]

    #  This refers to the tax cost associated with the fulfilment price
    fulfilmentTaxPrice: [Float]

    #  Indicates the type of fulfilment. Possible values are CC_PFS ( Click &
    # Collect - Pick from Store), CC_PFDC ( Click & Collect - Pick from DC),
    # HD_PFS (Home Delivery - Pick
    #  from Store), HD_PFDC ( Home Delivery - Pick from DC)
    fulfilmentType: [String]

    #  Pickup location. This is required for click & collect orders
    pickupLocationRef: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): FulfilmentChoiceConnection

  #  Search for FinancialTransaction entities
  financialTransactions(
    #  The unique transaction reference provided by the Retailer to the payment gateway
    ref: [String]
    type: [String!]
    status: [String]
    workflowRef: [String!]
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  The total transaction amount
    total: [Float!]

    #  Currency used for the transaction.
    currency: [String!]

    #  The unique transaction code or request code provided by the payment gateway
    externalTransactionCode: [String]

    #  The unique transaction ID or request ID provided by the payment gateway
    externalTransactionId: [String]

    #  The card type used for the payment. Possible values are 'MASTERCARD', 'VISA', 'AMEX', 'DINERS'.
    cardType: [String]

    #  The way in which payment was made. Platform provides support for the
    # following payment methods - 'CREDITCARD', 'PAYPAL', 'GIFTVOUCHER', 'CASH',
    # 'AFTERPAY'. However, these
    #  can be overridden/configured per client as settings
    paymentMethod: [String]

    #  The name of the payment gateway. Platform provided values are 'CYBERSOURCE',
    # 'GIVEX', 'PAYPAL', 'BRAINTREE', 'AFTERPAY'. However, these can be
    # overridden/configured per client as settings using 'PAYMENT.PROVIDER'
    paymentProviderName: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): FinancialTransactionConnection

  #  Search for Setting entities
  settings(
    #  Name of the setting.
    name: [String]

    #  Data type of the setting's value. Supported types are _LOB_, _STRING_, _INTEGER_, _BOOLEAN_ and _JSON_.
    valueType: [String]

    #  Value of the setting. Use this if the value is NOT a JSON.
    value: [String]

    #  The context of the setting. Supported values are ACCOUNT, RETAILER, AGENT or CUSTOMER
    context: [String!]

    #  `ID` of the context. For instance, use a retailer's ID when using _RETAILER_ context.
    contextId: [Int!]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): SettingConnection

  #  Find a Comment entity
  commentById(
    #  ID of the object
    id: ID!
  ): Comment

  #  Search for Comment entities
  comments(
    #  Type of the entity. For example `ORDER`, `FULFILMENT`, `ORDERITEM`, `PRODUCTCATALOGUE` etc.
    entityType: [String!]

    #  ID of the entity
    entityId: [ID!]

    #  Comment text
    text: [String!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CommentConnection

  #  Find a VirtualCatalogue entity
  virtualCatalogue(
    #  Virtual Catalogue reference identifier
    ref: String!
  ): VirtualCatalogue

  #  Search for VirtualCatalogue entities
  virtualCatalogues(
    createdOn: DateRange
    updatedOn: DateRange

    #  The reference identifier used to identify an entity
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  Name of the inventory catalogue
    name: [String!]

    #  Description
    description: [String]

    #  Inventory Catalogue used for this virtual catalogue
    inventoryCatalogueRef: [String]

    #  Product Catalogue used for this virtual catalogue
    productCatalogueRef: [String]

    #  Networks used for this catalogue
    networkIds: [[String]]

    #  Control group Ref
    controlGroupRef: [String]

    #  Retailer refs
    retailerRefs: [[String]]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): VirtualCatalogueConnection

  #  Find a VirtualPosition entity
  virtualPosition(
    #  Virtual Position reference identifier
    ref: String!
    catalogue: VirtualCatalogueKey!
  ): VirtualPosition

  #  Search for VirtualPosition entities
  virtualPositions(
    createdOn: DateRange
    updatedOn: DateRange

    #  The reference identifier used to identify an entity
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  Product reference
    productRef: [String]

    #  On hand quantity
    quantity: [Int]

    #  Group - reference to Location or Category
    groupRef: [String]
    catalogue: VirtualCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): VirtualPositionConnection

  #  Find a ControlGroup entity
  controlGroup(
    #  Control Group reference identifier
    ref: String!
  ): ControlGroup

  #  Search for ControlGroup entities
  controlGroups(
    createdOn: DateRange
    updatedOn: DateRange

    #  The reference identifier used to identify an entity
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  Name
    name: [String]

    #  Description
    description: [String]

    #  Retailer refs
    retailerRefs: [[String]]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ControlGroupConnection

  #  Find a Control entity
  control(
    #  Control reference identifier
    ref: String!
    controlGroup: ControlGroupKey!
  ): Control

  #  Search for Control entities
  controls(
    createdOn: DateRange
    updatedOn: DateRange

    #  The reference identifier used to identify an entity
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  Name
    name: [String]

    #  Description
    description: [String]

    #  Order that this control is applied
    executionOrder: [Int]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ControlConnection

  #  Find a FulfilmentOption entity
  fulfilmentOptionById(
    #  ID of the object
    id: ID!
  ): FulfilmentOption

  #  Search for FulfilmentOption entities
  fulfilmentOptions(
    #  External reference. Recommended to be unique.
    ref: [String]
    status: [String]
    type: [String!]

    #  ID of the `Retailer`, typically used by the Orchestration Engine to determine the workflow that should be applied.
    retailerId: [Int!]

    #  Type of order. For example _click & collect (CC)_ or _home delivery (HD)_
    orderType: [String]

    #  The reference identifier for a location. May be used in orchestration rules
    # to drive custom business logic. For example, you can have a rule to return
    # plans only from this
    #   location or a rule to return plans from all locations but excluding this one.
    locationRef: [String]

    #  A unique identifier for the clients to group related Fulfilment Plans.
    trackingCode: [String]
    workflowRef: [String!]
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): FulfilmentOptionConnection

  #  Find a FulfilmentPlan entity
  fulfilmentPlanById(
    #  ID of the object
    id: ID!
  ): FulfilmentPlan

  #  Search for FulfilmentPlan entities
  fulfilmentPlans(
    #  External reference. Recommended to be unique.
    ref: [String]
    status: [String]
    type: [String!]

    #  Order split limits
    splitCount: [Int]

    #  ETA of the `FulfilmentPlan`. Although this can be set explicitly, we
    # recommend that this be determined and set in the workflow.
    eta: [String]

    #  ID of the retailer
    retailerId: [Int]
    workflowRef: [String!]
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): FulfilmentPlanConnection

  #  Find a User entity
  userById(
    #  ID of the object
    id: ID!
  ): User

  #  Find a User entity
  user(
    #  ID of the object
    id: ID

    #  Unique name for the user used for identification and logging purposes.
    username: String
  ): User

  #  Search for User entities
  users(
    #  External reference of the object. Recommended to be unique.
    ref: [String!]

    #  Unique name for the user used for identification and logging purposes.
    username: [String!]

    #  The user's title. For example _Mr._, _Miss_, _Dr._, _Ms._ etc
    title: [String]

    #  User's first name
    firstName: [String]

    #  User's last name
    lastName: [String]

    #  User's primary email
    primaryEmail: [String]

    #  User's primary phone number
    primaryPhone: [String]

    #  Type of the user
    type: [String!]

    #  Status
    status: [String]

    #  Department
    department: [String]

    #  Country
    country: [String]

    #  Timezone
    timezone: [String]

    #  Determines if the user has opted to receive promotions
    promotionOptIn: [Boolean]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): UserConnection

  #  Find a Role entity
  role(
    #  Name of the role which is unique and acts as a key to identify the role itself
    name: String!
  ): Role

  #  Search for Role entities
  roles(
    #  Name of the role. Must be unique.
    name: [String!]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): RoleConnection

  #  Find a Wave entity
  waveById(
    #  ID of the object
    id: ID!
  ): Wave

  #  Search for Wave entities
  waves(
    #  External reference of the object. Must be unique.
    ref: [String!]

    #  Name of the wave
    name: [String]
    status: [String]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): WaveConnection

  #  Find a Permission entity
  permission(
    #  Name of the permission
    name: String!
  ): Permission

  #  Search for Permission entities
  permissions(
    #  Name of the permission. Must be unique.
    name: [String!]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): PermissionConnection

  #  Find a BillingAccount entity
  billingAccount(
    #  External reference to the `BillingAccount`. Must be unique.
    ref: String!
  ): BillingAccount

  #  Search for BillingAccount entities
  billingAccounts(
    #  External reference to the `BillingAccount`. Must be unique.
    ref: [String!]

    #  Type of the `BillingAccount`, typically used by the Orchestration Engine to
    # determine the workflow that should be applied.
    type: [String]

    #  Status of the `BillingAccount`.
    status: [String]
    retailer: RetailerLinkInput
    customer: CustomerLinkInput

    #  Name of the `BillingAccount`.
    name: [String]
    workflow: WorkflowLinkInput

    #  DEPRECATED, please use the field `workflow` instead - The reference of the workflow.
    workflowRef: [String]

    #  DEPRECATED, please use the field `workflow` instead - The version of the workflow.
    workflowVersion: [String]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): BillingAccountConnection

  #  Find a CreditMemo entity
  creditMemo(
    #  External reference to the `CreditMemo`. Must be unique.
    ref: String!
  ): CreditMemo

  #  Search for CreditMemo entities
  creditMemoes(
    #  External reference to the `CreditMemo`. Must be unique.
    ref: [String!]

    #  Type of the `CreditMemo`, typically used by the Orchestration Engine to determine the workflow that should be applied.
    type: [String]

    #  Status of the `CreditMemo`.
    status: [String]
    order: OrderLinkInput
    returnOrder: ReturnOrderLinkInput
    issueDate: DateRange
    currency: CurrencyLinkInput
    workflow: WorkflowLinkInput

    #  DEPRECATED, please use the field `workflow` instead - The reference of the workflow.
    workflowRef: [String]

    #  DEPRECATED, please use the field `workflow` instead - The version of the workflow.
    workflowVersion: [String]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CreditMemoConnection

  #  Find a CreditMemoItem entity
  creditMemoItem(
    #  External reference to the `CreditMemoItem`. Must be unique.
    ref: String!
  ): CreditMemoItem

  #  Search for CreditMemoItem entities
  creditMemoItems(
    #  External reference to the `CreditMemoItem`. Must be unique.
    ref: [String!]

    #  Type of the `CreditMemoItem`, typically used by the Orchestration Engine to
    # determine the workflow that should be applied.
    type: [String]

    # # Description of the `CreditMemoItem`.
    description: [String]
    orderItem: OrderItemLinkInput
    returnOrderItem: ReturnOrderItemLinkInput
    product: ProductLinkInput
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CreditMemoItemConnection

  #  Find a Invoice entity
  invoice(
    #  External reference to the `Invoice`. Must be unique.
    ref: String!
  ): Invoice

  #  Search for Invoice entities
  invoices(
    #  External reference to the `Invoice`. Must be unique.
    ref: [String!]
    workflow: WorkflowLinkInput

    #  Type of the `Invoice`, typically used by the Orchestration Engine to determine the workflow that should be applied.
    type: [String]

    #  Status of the `Invoice`.
    status: [String]
    order: OrderLinkInput
    issueDate: DateRange
    dueDate: DateRange
    currency: CurrencyLinkInput

    #  DEPRECATED, please use the field `workflow` instead - The reference of the workflow.
    workflowRef: [String]

    #  DEPRECATED, please use the field `workflow` instead - The version of the workflow.
    workflowVersion: [Int]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): InvoiceConnection

  #  Find a InvoiceItem entity
  invoiceItem(
    #  External reference to the `InvoiceItem`. Must be unique.
    ref: String!
  ): InvoiceItem

  #  Search for InvoiceItem entities
  invoiceItems(
    #  External reference to the `InvoiceItem`. Must be unique.
    ref: [String!]

    #  Type of the `InvoiceItem`, typically used by the Orchestration Engine to determine the workflow that should be applied.
    type: [String]

    #  A description of the source item. In the case of product source items this can be the name.
    description: [String]
    product: ProductLinkInput
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): InvoiceItemConnection

  #  Find a Currency entity
  currency(
    #  External reference to the `Currency`. Must be unique. 
    #  For the standard currency types, this field is the three-letters-code used
    # internationally (ISO-4217). eg: AUD, EUR, USD.
    alphabeticCode: String!
  ): Currency

  #  Search for Currency entities
  currencies(
    #  External reference to the `Currency`. Must be unique. 
    #  For the standard currency types, this field is the three-letters-code used
    # internationally (ISO-4217). eg: AUD, EUR, USD.
    alphabeticCode: [String]

    #  The numeric code of the `Currency`.
    numericCode: [String]

    #  The name of the `Currency`.
    name: [String]

    #  The number of minor units that make up a major unit of the `Currency`
    minorUnits: [Int]

    #  Currencies which are defined as part of the ISO-4217 standard cannot be deleted or modified. 
    isISO4217: [Boolean]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CurrencyConnection

  #  Find a ReturnOrder entity
  returnOrder(
    #  External reference for `ReturnOrder`. Must be unique.
    ref: String!
    retailer: RetailerId!
  ): ReturnOrder

  #  Search for ReturnOrder entities
  returnOrders(
    #  External reference for `ReturnOrder`. Must be unique.
    ref: [String!]
    retailer: RetailerLinkInput
    workflow: WorkflowLinkInput

    #  Type of the return order 
    type: [String!]

    #  Status of the `Return Order`
    status: [String!]
    customer: CustomerLinkInput
    order: OrderLinkInput

    #  The generated key representing an authorised return order which the customer
    # can use to progress through the return order process.
    returnAuthorisationKey: [String]
    returnAuthorisationKeyExpiry: DateRange
    lodgedLocation: LocationLinkInput
    destinationLocation: LocationLinkInput
    exchangeOrder: OrderLinkInput
    creditMemo: CreditMemoLinkInput
    currency: CurrencyLinkInput

    #  DEPRECATED, please use the field `workflow` instead - The reference of the workflow.
    workflowRef: [String]

    #  DEPRECATED, please use the field `workflow` instead - The version of the workflow.
    workflowVersion: [Int]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ReturnOrderConnection

  #  Find a ReturnOrderItem entity
  returnOrderItem(
    #  External reference for `Return Order`. Must be unique.
    ref: String!
    returnOrder: ReturnOrderKey!
  ): ReturnOrderItem

  #  Search for ReturnOrderItem entities
  returnOrderItems(
    #  External reference for `Return Order`. Must be unique.
    ref: [String!]

    #  Status of the return order
    status: [String!]
    product: ProductLinkInput
    orderItem: OrderItemLinkInput

    #  An optional comment. Required if the reason code required further information such as 'Other'.
    returnReasonComment: [String]

    #  An optional comment. Required if the condition code required further information such as 'Other'.
    returnConditionComment: [String]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ReturnOrderItemConnection

  #  Find a ReturnFulfilment entity
  returnFulfilment(
    #  External reference for `Return Fulfilment`. Must be unique.
    ref: String!
    returnOrder: ReturnOrderKey!
  ): ReturnFulfilment

  #  Search for ReturnFulfilment entities
  returnFulfilments(
    #  External reference for `Return Fulfilment`. Must be unique.
    ref: [String!]
    workflow: WorkflowLinkInput

    #  Type of the return fulfilment
    type: [String!]

    #  Status of the `Return Fulfilment`
    status: [String!]
    lodgedLocation: LocationLinkInput
    destinationLocation: LocationLinkInput

    #  DEPRECATED, please use the field `workflow` instead - The reference of the workflow.
    workflowRef: [String]

    #  DEPRECATED, please use the field `workflow` instead - The version of the workflow.
    workflowVersion: [Int]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ReturnFulfilmentConnection

  #  Find a ReturnFulfilmentItem entity
  returnFulfilmentItem(
    #  External reference for `Return Order`. Must be unique.
    ref: String!
    returnFulfilment: ReturnFulfilmentKey!
  ): ReturnFulfilmentItem

  #  Search for ReturnFulfilmentItem entities
  returnFulfilmentItems(
    #  External reference for `Return Order`. Must be unique.
    ref: [String!]
    product: ProductLinkInput
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ReturnFulfilmentItemConnection

  #  Search for ReturnVerification entities
  returnVerifications(
    #  External reference for `Return Order`. Must be unique.
    ref: [String!]
    type: [String!]

    # verification details
    verificationDetails: [String]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ReturnVerificationConnection
}

#  Represents an object with an external reference
interface Referenceable {
  #  The reference key
  ref: String!
}

#  Input type to remove one or more `Location`s from a `Network`
input RemoveLocationsFromNetworkInput {
  #  Key to identify the `Network` object from which to remove the `Location`s
  network: NetworkKey!

  #  Key to identify the `Location` objects to remove
  locations: [LocationKey!]!
}

#  Output type for removing `Location`s from a `Network`
type RemoveLocationsFromNetworkOutput {
  #  Status of the mutation operation
  status: String
}

#  Input type to remove one or more `Network`s from a `Location`
input RemoveNetworksFromLocationInput {
  #  Key to identify the `Location` object from which to remove the `Network`s
  location: LocationKey!

  #  Key to identify the `Network` objects to remove
  networks: [NetworkKey!]!
}

#  Output type for removing `Network`s from a `Location`
type RemoveNetworksFromLocationOutput {
  #  Status of the mutation operation
  status: String
}

#  Input type to remove one or more `Permission`s from a `Role`
input RemovePermissionsFromRoleInput {
  #  Key to identify the `Role` object from which to remove the `Permission`s
  role: RoleKey!

  #  Key to identify the `Permission` objects to remove
  permissions: [PermissionKey!]!
}

#  Output type for removing `Permission`s from a `Role`
type RemovePermissionsFromRoleOutput {
  #  Status of the mutation operation
  status: String
}

#  Input type to remove one or more `UserRole`s from an `User`
input RemoveUserRolesFromUserInput {
  #  Key to identify the `User` object from which to remove the `UserRole`s
  user: UserKey!

  #  Key to identify the `UserRole` objects to remove
  roles: [UserRoleKey!]!
}

#  Output type for removing `UserRole`s from an `User`
type RemoveUserRolesFromUserOutput {
  #  Status of the mutation operation
  status: String
}

#  A retailer is a business or person that sells goods to consumers
type Retailer implements Node, Referenceable {
  #  ID of the object
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  Status of the retailer
  status: String

  #  Reference for the retailer
  ref: String!

  #  Short description of the retailer
  summary: String

  #  Retailer's website URL used in customer notifications
  websiteUrl: String

  #  Friendly text to be shown for URL links in customer notifications
  websiteUrlName: String

  #  Primary email of the retailer
  primaryEmail: String

  #  Customer support contact name
  supportContactName: String

  #  Customer support email used in customer notifications
  supportEmail: String

  #  Customer support phone number used in customer notifications
  supportPhone: String

  #  The retailer's trading name used in customer notifications
  tradingName: String

  #  A list of retailer's network (stores, warehouses, distribution centers)
  networks(
    createdOn: DateRange
    updatedOn: DateRange

    #  Reference to the network. This is the name of the network you passed in
    # while creating the network. Recommended to be unique.
    ref: [String]

    #  The type of network
    type: [String]

    #  Status of the network
    status: [String]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): NetworkConnection
}

#  A list of results that matched against a Retailer search query
type RetailerConnection {
  #  A list of edges that links to Retailer type node
  edges: [RetailerEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Retailer connection to the Retailer type
type RetailerEdge {
  #  The item at the end of the Retailer edge
  node: Retailer

  #  A cursor for use in pagination
  cursor: String
}

input RetailerId {
  #  ID of the object
  id: ID!
}

type RetailerLink {
  id: ID
}

input RetailerLinkInput {
  id: ID!
}

type ReturnFulfilment implements Node, Referenceable {
  #  ID of the object
  id: ID!

  #  External reference for `Return Fulfilment`. Must be unique.
  ref: String!

  #  Workflow associated with the return fulfilment
  workflow: WorkflowLink

  #  Type of the return fulfilment
  type: String!

  #  Status of the `Return Fulfilment`
  status: String!

  #  List of attributes associated with the return fulfilment
  attributes: [Attribute]

  #  The pickup address in the cases of return orders that are being picked up by a carrier.
  pickupAddress: StreetAddress

  #  The lodged location in cases where the return order was directly returned to a store or DC.
  lodgedLocation: LocationLink

  #  The destination of the return order items.
  destinationLocation: LocationLink

  #  List of return fulfilment item associated with the return fulfilment
  returnFulfilmentItems(
    #  External reference for `Return Order`. Must be unique.
    ref: [String!]
    product: ProductLinkInput
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ReturnFulfilmentItemConnection

  #  Return order associated with the return fulfilment
  returnOrder: ReturnOrder

  #  DEPRECATED, please use the field `workflow` instead - The reference of the workflow.
  workflowRef: String @deprecated

  #  DEPRECATED, please use the field `workflow` instead - The version of the workflow.
  workflowVersion: Int @deprecated

  #  Date and time of creation
  createdOn: DateTime

  #  Date and time of last update
  updatedOn: DateTime
}

#  A list of results that matched against a ReturnFulfilment search query
type ReturnFulfilmentConnection {
  #  A list of edges that links to ReturnFulfilment type node
  edges: [ReturnFulfilmentEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a ReturnFulfilment connection to the ReturnFulfilment type
type ReturnFulfilmentEdge {
  #  The item at the end of the ReturnFulfilment edge
  node: ReturnFulfilment

  #  A cursor for use in pagination
  cursor: String
}

type ReturnFulfilmentItem implements Node, Referenceable {
  #  ID of the object
  id: ID!

  #  External reference for `Return Order`. Must be unique.
  ref: String!

  #  List of attributes 
  attributes: [Attribute]

  #  Quantity of return fulfilment item
  unitQuantity: QuantityType

  #  Fulfilment this item associated with
  returnOrderFulfilment: ReturnFulfilment

  # Product associated with the fulfilment item
  product: ProductLink

  # Return order item associated with the fulfilment item
  returnOrderItem: ReturnOrderItem

  #  Date and time of creation
  createdOn: DateTime

  #  Date and time of last update
  updatedOn: DateTime
}

#  A list of results that matched against a ReturnFulfilmentItem search query
type ReturnFulfilmentItemConnection {
  #  A list of edges that links to ReturnFulfilmentItem type node
  edges: [ReturnFulfilmentItemEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a ReturnFulfilmentItem connection to the ReturnFulfilmentItem type
type ReturnFulfilmentItemEdge {
  #  The item at the end of the ReturnFulfilmentItem edge
  node: ReturnFulfilmentItem

  #  A cursor for use in pagination
  cursor: String
}

#  Input type to uniquely identify a `ReturnFulfilmentItem` object. We use all the
# fields present in the request to look for this object.
input ReturnFulfilmentItemKey {
  #  The client's reference identifier for the object
  ref: String!
  returnFulfilment: ReturnFulfilmentKey!
}

#  Input type to uniquely identify a `ReturnFulfilment` object. We use all the
# fields present in the request to look for this object.
input ReturnFulfilmentKey {
  #  The client's reference identifier for the object
  ref: String!

  #  Return order associated with the return fulfilment
  returnOrder: ReturnOrderKey!
}

type ReturnOrder implements Node, Referenceable {
  #  ID of the object
  id: ID!

  #  External reference for `ReturnOrder`. Must be unique.
  ref: String!

  #  The associated retailer for this return order
  retailer: RetailerLink

  #  Workflow version of the return order
  workflow: WorkflowLink

  #  Type of the return order 
  type: String!

  #  Status of the `Return Order`
  status: String!

  #  List of attributes. 
  attributes: [Attribute]

  #  The associated customer for this return order.
  customer: CustomerLink

  #  The associated order for this return order.
  order: OrderLink

  #  A list of return verifications for this return order.
  returnVerifications(
    #  External reference for `Return Order`. Must be unique.
    ref: [String!]
    type: [String!]

    # verification details
    verificationDetails: [String]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ReturnVerificationConnection

  #  The generated key representing an authorised return order which the customer
  # can use to progress through the return order process.
  returnAuthorisationKey: String

  #  The authorised disposition for this return order. This can be different to the
  # return disposition action which reflects the actual action once an item has
  # been inspected.
  returnAuthorisationDisposition: SettingValueType

  #  The time at which the return authorisation expires.
  returnAuthorisationKeyExpiry: DateTime

  #  The pickup address in the cases of return orders that are being picked up by a carrier.
  pickupAddress: StreetAddress

  #  The lodged location in cases where the return order was directly returned to a store or DC.
  lodgedLocation: LocationLink

  #  The destination of the return order items.
  destinationLocation: LocationLink

  #  The list of associated return order items.
  returnOrderItems(
    #  External reference for `Return Order`. Must be unique.
    ref: [String!]

    #  Status of the return order
    status: [String!]
    product: ProductLinkInput
    orderItem: OrderItemLinkInput

    #  An optional comment. Required if the reason code required further information such as 'Other'.
    returnReasonComment: [String]

    #  An optional comment. Required if the condition code required further information such as 'Other'.
    returnConditionComment: [String]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ReturnOrderItemConnection

  #  The list of associated return fulfilments.
  returnOrderFulfilments(
    #  External reference for `Return Fulfilment`. Must be unique.
    ref: [String!]
    workflow: WorkflowLinkInput

    #  Type of the return fulfilment
    type: [String!]

    #  Status of the `Return Fulfilment`
    status: [String!]
    lodgedLocation: LocationLinkInput
    destinationLocation: LocationLinkInput

    #  DEPRECATED, please use the field `workflow` instead - The reference of the workflow.
    workflowRef: [String]

    #  DEPRECATED, please use the field `workflow` instead - The version of the workflow.
    workflowVersion: [Int]
    createdOn: DateRange
    updatedOn: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ReturnFulfilmentConnection

  #  The associated exchange order managed the exchange item.
  exchangeOrder: OrderLink

  #  The associated credit memo for this return order.
  creditMemo: CreditMemoLink

  #  Reference to the currency type. Generally, the standard ISO-4217 is used.
  currency: CurrencyLink

  #  The default Tax Type for this return order. Individual return order items can override.
  defaultTaxType: TaxType

  #  The total amount of this return order excluding tax.
  subTotalAmount: AmountType

  #  The total amount of tax for this return order.
  totalTax: AmountType

  #  The total amount of this return order including tax
  totalAmount: AmountType

  #  DEPRECATED, please use the field `workflow` instead - The reference of the workflow.
  workflowRef: String @deprecated

  #  DEPRECATED, please use the field `workflow` instead - The version of the workflow.
  workflowVersion: Int @deprecated

  #  Date and time of creation
  createdOn: DateTime

  #  Date and time of last update
  updatedOn: DateTime
}

#  A list of results that matched against a ReturnOrder search query
type ReturnOrderConnection {
  #  A list of edges that links to ReturnOrder type node
  edges: [ReturnOrderEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a ReturnOrder connection to the ReturnOrder type
type ReturnOrderEdge {
  #  The item at the end of the ReturnOrder edge
  node: ReturnOrder

  #  A cursor for use in pagination
  cursor: String
}

type ReturnOrderItem implements Node, Referenceable {
  #  ID of the object
  id: ID!

  #  External reference for `Return Order`. Must be unique.
  ref: String!

  #  List of attributes associated with the return order 
  attributes: [Attribute]

  #  Status of the return order
  status: String!

  #  Associated product with the return order 
  product: ProductLink

  #  Associated order item of the return order
  orderItem: OrderItemLink

  #  The reason for returning this return order item. 
  returnReason: SettingValueType

  #  An optional comment. Required if the reason code required further information such as 'Other'.
  returnReasonComment: String

  #  The condition in which the return item was received. 
  returnCondition: SettingValueType

  #  An optional comment. Required if the condition code required further information such as 'Other'.
  returnConditionComment: String

  #  Return order associated with the order item 
  returnOrder: ReturnOrder

  #  The actual payment action taken for this return item.
  returnPaymentAction: SettingValueType

  #  The actual payment action taken for this return item. 
  returnDispositionAction: SettingValueType

  #  Unit Quantity
  unitQuantity: QuantityType

  #  Unit Amount
  unitAmount: AmountType

  #  Unit TaxType
  unitTaxType: TaxType

  #  Item Amount
  itemTaxAmount: AmountType

  #  Item TaxAmount
  itemAmount: AmountType

  #  Date and time of creation
  createdOn: DateTime

  #  Date and time of last update
  updatedOn: DateTime
}

#  A list of results that matched against a ReturnOrderItem search query
type ReturnOrderItemConnection {
  #  A list of edges that links to ReturnOrderItem type node
  edges: [ReturnOrderItemEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a ReturnOrderItem connection to the ReturnOrderItem type
type ReturnOrderItemEdge {
  #  The item at the end of the ReturnOrderItem edge
  node: ReturnOrderItem

  #  A cursor for use in pagination
  cursor: String
}

#  Input type to uniquely identify a `ReturnOrderItem` object. We use all the
# fields present in the request to look for this object.
input ReturnOrderItemKey {
  #  The client's reference identifier for the object
  ref: String!

  #  Return order associated with the order item 
  returnOrder: ReturnOrderKey!
}

type ReturnOrderItemLink {
  ref: String
  returnOrder: ReturnOrderLink
}

input ReturnOrderItemLinkInput {
  ref: String!
  returnOrder: ReturnOrderLinkInput
}

#  Input type to uniquely identify a `ReturnOrder` object. We use all the fields
# present in the request to look for this object.
input ReturnOrderKey {
  #  The client's reference identifier for the object
  ref: String!

  #  The associated retailer for this return order
  retailer: RetailerId!
}

type ReturnOrderLink {
  ref: String
  retailer: RetailerLink
}

input ReturnOrderLinkInput {
  ref: String!
  retailer: RetailerLinkInput!
}

type ReturnVerification implements Node, Referenceable {
  #  ID of the object
  id: ID!

  #  External reference for `Return Order`. Must be unique.
  ref: String!
  type: String!

  # verification details
  verificationDetails: String

  # return order
  returnOrder: ReturnOrder

  #  Date and time of creation
  createdOn: DateTime

  #  Date and time of last update
  updatedOn: DateTime
}

#  A list of results that matched against a ReturnVerification search query
type ReturnVerificationConnection {
  #  A list of edges that links to ReturnVerification type node
  edges: [ReturnVerificationEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a ReturnVerification connection to the ReturnVerification type
type ReturnVerificationEdge {
  #  The item at the end of the ReturnVerification edge
  node: ReturnVerification

  #  A cursor for use in pagination
  cursor: String
}

#  Represents a `Role`. A `Role` is a singular entity that represents one or more
# `Permissions`. It could correlate for a job type for example, Fulfilment
# Manager. Roles make it
#  easier for clients to manage access to various functions within the system.
type Role {
  #  ID of the object
  id: ID!

  #  Name of the role. Must be unique.
  name: String!

  #  A list of permissions within the role
  permissions: [Permission]
}

#  A list of results that matched against a Role search query
type RoleConnection {
  #  A list of edges that links to Role type node
  edges: [RoleEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  A type to define a role and the boundaries within which that role is valid. For
# instance, a store associate can only be authorised to view particulars of their own store
#  whereas a store manager can be authorised to view particulars of multiple stores.
type RoleContext {
  #  Represents the type of context. For more information on contexts and how they
  # relate to user and roles, please visit <a
  # href="https://lingo.fluentretail.com/display/LIN/Flex+Academy+Users"
  # target="_blank">User's section on Lingo</a>.
  contextType: String!

  #  Represents the identity of the context object.
  contextId: ID!
}

#  Input type to supply context during assignment of a role
input RoleContextInput {
  #  Represents the type of context. For more information on contexts and how they relate to user and roles,
  #  please visit <a
  # href="https://lingo.fluentretail.com/display/LIN/Flex+Academy+Users"
  # target="_blank">User's section on Lingo</a>.
  contextType: String!

  #  Represents the identity of the context object.
  contextId: ID!
}

#  Input type to uniquely identify a `RoleContext` object. We use all the fields
# present in the request to look for this object.
input RoleContextKey {
  #  Represents the type of context. For more information on contexts and how they
  # relate to user and roles, please visit <a
  # href="https://lingo.fluentretail.com/display/LIN/Flex+Academy+Users"
  # target="_blank">User's section on Lingo</a>.
  contextType: String!

  #  Represents the identity of the context object.
  contextId: ID!
}

#  The edge in a Role connection to the Role type
type RoleEdge {
  #  The item at the end of the Role edge
  node: Role

  #  A cursor for use in pagination
  cursor: String
}

#  Input type to uniquely identify a `Role` object. We use all the fields present in the request to look for this object.
input RoleKey {
  #  Name of the role which is unique and acts as a key to identify the role itself
  name: String!
}

#  Represents configuration settings. Settings are quite versatile. These can be
# used in feature toggles or rules to accomplish insane variety of functions.
#  <br/><br/>**USAGE**<br/>
#  Use a unique combination of `context` and `contextId` to create settings for various contexts.
#  Not using a unique combination of those two will result in a _ConstraintViolationException_.
#  <br/><br/>**NOTE**<br/>
#  If you are an existing client, you may already be using our <a
# href="https://lingo.fluentretail.com/display/LIN/Configuration+Settings"
# target="_blank">Configuration Settings</a> feature.
#  You can still use this API to create new settings and update existing ones.
# However, we advise you to be very cautious in doing so as _V4_ APIs may behave unexpectedly
#  if you modify your existing settings. If you have questions, please contact support.
type Setting {
  #  ID of the object
  id: ID!

  #  Name of the setting.
  name: String

  #  Data type of the setting's value. Supported types are _LOB_, _STRING_, _INTEGER_, _BOOLEAN_ and _JSON_.
  valueType: String

  #  Value of the setting. Use this if the value is a JSON.
  lobValue: Json

  #  Value of the setting. Use this if the value is NOT a JSON.
  value: String

  #  The context of the setting. Supported values are ACCOUNT, RETAILER, AGENT or CUSTOMER
  context: String!

  #  `ID` of the context. For instance, use a retailer's ID when using _RETAILER_ context.
  contextId: Int!
}

#  A list of results that matched against a Setting search query
type SettingConnection {
  #  A list of edges that links to Setting type node
  edges: [SettingEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Setting connection to the Setting type
type SettingEdge {
  #  The item at the end of the Setting edge
  node: Setting

  #  A cursor for use in pagination
  cursor: String
}

type SettingValueType {
  value: String
  label: String
}

input SettingValueTypeInput {
  value: String!
  label: String
}

#  A `StandardProduct` is a basic implementation of Product. The `ref` field will
# be the unique identifier for this Product within the specified Product
# Catalogue, as identified by the `catalogue` field. <br /><br />
#  The `StandardProduct` is an orchestrateable entity. Events for these should
# specify a parent entity of Product Catalogue. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
type StandardProduct implements Node, Referenceable, Orchestrateable, Extendable, Product {
  #  ID of the object. For internal use, should not be used externally or by any business logic
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  The unique reference identifier for the Product
  ref: String!

  #  Type of the `StandardProduct`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  The current status of the `StandardProduct`.<br/>By default, the initial value
  # will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Product. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [Attribute]

  #  The Global Trade Item Number (GTIN) for this Product
  gtin: String!

  #  The name of the Product
  name: String!

  #  A short description of the Product (max 255 chars)
  summary: String

  #  A connection to the associated Categories of this Product
  categories(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Category
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  The name of the Category
    name: [String!]

    #  A short description of the Category
    summary: [String]
    catalogue: ProductCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CategoryConnection

  #  A list of Prices for this Product
  prices: [Price]

  #  The tax information for this Product
  tax: TaxType

  #  The Product Catalogue in which this Product is managed
  catalogue: ProductCatalogue!

  #  A connection to the associated Variant Products for this Product. This is
  # useful if you use the Standard Product as a base record for all Variants,
  # which helps ensure a consistent relationship between them
  variants(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Product
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  The Global Trade Item Number (GTIN) for this Product
    gtin: [String!]

    #  The name of the Product
    name: [String!]

    #  A short description of the Product (max 255 chars)
    summary: [String]
    catalogue: ProductCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): VariantProductConnection
}

#  A list of results that matched against a StandardProduct search query
type StandardProductConnection {
  #  A list of edges that links to StandardProduct type node
  edges: [StandardProductEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a StandardProduct connection to the StandardProduct type
type StandardProductEdge {
  #  The item at the end of the StandardProduct edge
  node: StandardProduct

  #  A cursor for use in pagination
  cursor: String
}

#  The `StandardProductKey` input is the parameter for identifying a specific Standard Product.
input StandardProductKey {
  #  The unique reference identifier for the Product
  ref: String

  #  The Product Catalogue in which this Product resides
  catalogue: ProductCatalogueKey!
}

#  Input for updating the status of any entity with a status field
input StatusInput {
  #  Status value used for the input
  status: String!
}

#  The location storage areas
type StorageArea {
  #  ID of the object
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  Name
  name: String

  #  Status
  status: String

  #  Location
  location: Location

  #  Type
  type: String

  #  Articles in the storage area
  articles(
    #  The unique article reference provided by the retailer
    ref: [String]
    type: [String!]
    status: [String]
    workflowRef: [String!]
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Description
    description: [String]

    #  Height
    height: [Float!]

    #  Length
    length: [Float!]

    #  Name
    name: [String]

    #  Weight
    weight: [Float!]

    #  Width
    width: [Float!]

    #  Quantity
    quantity: [Int]

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): ArticleConnection
}

#  A list of results that matched against a StorageArea search query
type StorageAreaConnection {
  #  A list of edges that links to StorageArea type node
  edges: [StorageAreaEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a StorageArea connection to the StorageArea type
type StorageAreaEdge {
  #  The item at the end of the StorageArea edge
  node: StorageArea

  #  A cursor for use in pagination
  cursor: String
}

input StorageAreaId {
  #  ID of the object
  id: ID!
}

#  Store location information
type StoreAddress implements Address {
  #  ID of the object
  id: ID!

  #  Type of Address, to support legacy address, the value can be AGENT and ORDER
  type: String

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  Directions to store location (may be used for landmarks)
  directions: String

  #  Company name
  companyName: String

  #  Name
  name: String

  #  Street
  street: String

  #  City
  city: String

  #  State
  state: String

  #  Postcode
  postcode: String

  #  Region
  region: String

  #  Country
  country: String

  #  Latitude
  latitude: Float

  #  Longitude
  longitude: Float

  #  Location reference
  ref: String

  #  Timezone
  timeZone: String

  #  Location
  location: Location
}

#  A list of results that matched against a StoreAddress search query
type StoreAddressConnection {
  #  A list of edges that links to StoreAddress type node
  edges: [StoreAddressEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a StoreAddress connection to the StoreAddress type
type StoreAddressEdge {
  #  The item at the end of the StoreAddress edge
  node: StoreAddress

  #  A cursor for use in pagination
  cursor: String
}

input StoreAddressId {
  #  ID of the object
  id: ID!
}

type StreetAddress {
  #  Company name
  companyName: String

  #  Name
  name: String

  #  Street
  street: String

  #  City
  city: String

  #  State
  state: String

  #  Postcode
  postcode: String

  #  Region
  region: String

  #  Country
  country: String

  #  Latitude
  latitude: Float

  #  Longitude
  longitude: Float

  #  Timezone
  timeZone: String
}

input StreetAddressInput {
  #  Company name
  companyName: String

  #  Name
  name: String

  #  Street
  street: String

  #  City
  city: String

  #  State
  state: String

  #  Postcode
  postcode: String

  #  Region
  region: String

  #  Country
  country: String

  #  Latitude
  latitude: Float

  #  Longitude
  longitude: Float

  #  Timezone
  timeZone: String
}

#  The `TaxType` type is a structure to hold Tax information for Products. It is
# considered more like a complex value type, rather than an object. All fields are
# required, and the `country` and `group` fields make up the unique key
# identifying the `tariff`.
type TaxType {
  #  The country in which this Tax Type applies
  country: String!

  #  A group field which can be used to further identify the Tax Tariff applicable
  group: String!

  #  The tariff of the Tax Type
  tariff: String
}

#  Input structure for creating or updating a `TaxType` on a `Product`. If
# `country` and `group` match, it will UPDATE, otherwise it will CREATE. All
# fields are required.
input TaxTypeInput {
  country: String!
  group: String!
  tariff: String!
}

input UpdateArticleInput {
  #  ID of the object
  id: ID!

  #  Type of the `Article`, typically used by the Orchestration Engine to determine
  # the workflow that should be applied. Unless stated otherwise, no values are
  # enforced by the platform.<br/>
  type: String

  #  The current status of the `Article`.<br/>By default, the initial value will be
  # CREATED, however no other status values are enforced by the platform.<br/>The
  # status field is also used within ruleset selection during orchestration. For
  # more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String
  attributes: [AttributeInput]
  articleNumber: String
  barcodeArticleNumber: String
  description: String
  height: Float
  length: Float
  name: String
  purchaseValue: String
  weight: Float
  width: Float
  expiryDate: DateTime
  quantity: Int
}

input UpdateBillingAccountInput {
  #  External reference to the `BillingAccount`. Must be unique.
  ref: String!

  #  Status of the `BillingAccount`.
  status: String

  #  Name of the `BillingAccount`.
  name: String

  #  A list of attributes associated with the `BillingAccount`. This can be used to
  # extend the existing data structure with additional data.
  attributes: [AttributeInput]

  #  Address associated to the `BillingAccount`.
  address: StreetAddressInput
}

#  Input for updating a `CarrierConsignment` object.
input UpdateCarrierConsignmentInput {
  #  ref of the object
  ref: String!

  #  The status of the consignment
  status: String

  #  The external consignment reference assigned by the carrier
  consignmentReference: String

  #  Tracking label of the consignment
  trackingLabel: String

  #  The URL used to retrieve the shipping label
  labelUrl: String

  #  A url to represent the order summary. Usually the manifest url from the service provider.
  orderSummaryUrl: String

  #  A list of attributes associated with this Consignment. This can be used to
  # extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [AttributeInput]
}

#  Input type to update a `Carrier`
input UpdateCarrierInput {
  #  ID of the object
  id: ID!

  #  Name of the carrier
  name: String

  #  The current status of the `Carrier`.<br/>By default, the initial value will be
  # CREATED, however no other status values are enforced by the platform.<br/>The
  # status field is also used within ruleset selection during orchestration. For
  # more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Carrier. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]
}

#  Input parameter for the `updateCategory` mutation. A category `ref` is unique
# within the bounds of the specified `catalogue`, which together makes up the
# unique identifier for the `Category` record. <br /><br />
#  During an update mutation, the following fields behave in an "UPSERT" or UPDATE / INSERT manner:
#  * `attributes` - `name` is the unique key for the Attribute `type` and `value`.
# If an associated Attribute with a matching `name` already exists, then the
# `type` and `value` fields will be updated, else it will be inserted.
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input UpdateCategoryInput {
  #  The reference of the `Category` to be updated.
  ref: String!

  #  The reference of the `ProductCatalogue` in which this `Category` resides.
  catalogue: ProductCatalogueKey!

  #  Type of the `Category`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String

  #  The current status of the `Category`.<br/>By default, the initial value will
  # be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Category. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  The name of the Category
  name: String

  #  A short description of the Category
  summary: String

  #  The reference to the parent of this `Category`, if any. The parent `Category`
  # must be a part of the same `ProductCatalogue` (see `catalogue` field). The
  # parent `Category` must already exist.
  parentCategory: CategoryKey

  #  List of child `Category` references, if any. Child categories must be a part
  # of the same `ProductCatalogue` (see `catalogue` field). The child `Category`
  # must already exist.
  childCategories: [CategoryKey]
}

#  Input for updating an existing `comment` object
input UpdateCommentInput {
  #  ID of the object
  id: ID!

  #  Comment text
  text: String!
}

#  Input for updating a `Consignment` object.
input UpdateConsignmentInput {
  #  ID of the object
  id: ID!

  #  The status of the consignment
  status: String

  #  The external consignment reference assigned by the carrier
  consignmentReference: String

  #  Tracking label of the consignment
  trackingLabel: String

  #  The URL used to retrieve the shipping label
  labelUrl: String

  #  A url to represent the order summary. Usually the manifest url from the service provider.
  orderSummaryUrl: String

  #  Carrier used for the consignment
  carrier: CarrierId
}

#  Input parameter for the `updateControlGroup` mutation. The `ref` field is the
# unique identifier for the catalogue you wish to update. <br /><br />
#  During an update mutation, the following fields behave in an "UPSERT" or UPDATE / INSERT manner:
#  * `attributes` - `name` is the unique key for the Attribute `type` and `value`.
# If an associated Attribute with a matching `name` already exists, then the
# `type` and `value` fields will be updated, else it will be inserted.
#  For more information, please refer to the https://lingo.fluentretail.com/display/LIN/Global+Inventory
input UpdateControlGroupInput {
  #  The reference identifier used to identify an entity
  ref: String!

  #  Type of the `ControlGroup`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String

  #  The current status of the `ControlGroup`.<br/>By default, the initial value
  # will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  Name
  name: String

  #  Description
  description: String

  #  List of Attribute containing meta data information for this entity
  attributes: [AttributeInput]

  #  Retailer refs
  retailerRefs: [String]
}

#  Input parameter for the `updateControl` mutation. A control `ref` should be
# unique within the bounds of the specified `catalogue`, which together makes up
# the unique identifier for the `catalogue control` record. <br /><br />
#  During an update mutation, the following fields behave in an "UPSERT" or UPDATE / INSERT manner:
#  * `attributes` - `name` is the unique key for the Attribute `type` and `value`.
# If an associated Attribute with a matching `name` already exists, then the
# `type` and `value` fields will be updated, else it will be inserted.
#  For more information, please refer to the https://lingo.fluentretail.com/display/LIN/Global+Inventory
input UpdateControlInput {
  #  The reference identifier used to identify an entity
  ref: String!

  #  Type of the `Control`, typically used by the Orchestration Engine to determine
  # the workflow that should be applied. Unless stated otherwise, no values are
  # enforced by the platform.<br/>
  type: String

  #  The current status of the `Control`.<br/>By default, the initial value will be
  # CREATED, however no other status values are enforced by the platform.<br/>The
  # status field is also used within ruleset selection during orchestration. For
  # more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  Name
  name: String

  #  Description
  description: String

  #  values
  values: [AttributeInput]

  #  Control Group
  controlGroup: ControlGroupKey

  #  List of Attribute containing meta data information for this entity
  attributes: [AttributeInput]

  #  Order that this control is applied
  executionOrder: Int
}

input UpdateCreditMemoInput {
  #  External reference to the `CreditMemo`. Must be unique.
  ref: String!

  #  Status of the `CreditMemo`.
  status: String

  #  A list of attributes associated with the `CreditMemo`. This can be used to
  # extend the existing data structure with additional data.
  attributes: [AttributeInput]

  #  Reference to an `Order` associated with the `CreditMemo`.
  order: OrderLinkInput

  #  Reference to a `ReturnOrder` associated with the `CreditMemo`.
  returnOrder: ReturnOrderKey

  #  The `CreditMemoItem`s associated with this `CreditMemo`.
  items: [UpdateCreditMemoItemWithCreditMemoInput]

  #  Issue date
  issueDate: DateTime

  #  Reference to the `Currency`
  #  The default Tax Type for this credit memo. Individual credit memo items can override.
  currency: CurrencyKey

  #  Dafault tax type
  defaultTaxType: TaxTypeInput

  #  The total amount of this credit memo excluding tax.
  subTotalAmount: AmountTypeInput

  #  The total amount of tax for this credit memo
  totalTax: AmountTypeInput

  #  The total amount of this credit memo including tax
  totalAmount: AmountTypeInput

  #  The total amount of this credit memo yet to be paid. (This caters for multi-part payments and payment milestones)
  totalBalance: AmountTypeInput
}

input UpdateCreditMemoItemWithCreditMemoInput {
  #  External reference to the `CreditMemoItem`. Must be unique.
  ref: String

  #  Description of the `CreditMemoItem`.
  description: String

  #  Credit reason code of the `CreditMemoItem`.
  creditReasonCode: SettingValueTypeInput

  #  Reference to an `OrderItem` associated with the `CreditMemoItem`.
  orderItem: OrderItemLinkInput

  #  Reference to a `ReturnOrderItem` associated with the `CreditMemoItem`.
  returnOrderItem: ReturnOrderItemKey

  #  Reference to a `Product` associated with the `CreditMemoItem`.
  product: ProductKey

  #  `unitQuantity` holds separately the amount and the unit associated.
  unitQuantity: QuantityTypeInput

  #  The tax type of this item. Should only be provided if different to the default credit memo tax type.
  unitTaxType: TaxTypeInput

  #  The unit sale price at time of sale or exchange
  unitAmount: AmountTypeInput

  #  The unit cost price at time of sale or exchange.
  unitCostAmount: AmountTypeInput

  #  The item amount for this item excluding tax. This is a calculated value based
  # on business rules that does not necessarily have to take into account the unit
  # quantity or amounts.
  amount: AmountTypeInput

  #  The tax amount for this item. If not present at the item level, tax amount
  # should be generated based on the tax type set at the invoice parent level.
  taxAmount: AmountTypeInput
}

input UpdateCustomerAddressInput {
  #  ID of the object
  id: ID!
  companyName: String
  name: String
  street: String
  city: String
  state: String
  postcode: String
  region: String
  country: String
  latitude: Float
  longitude: Float
  timeZone: String
}

#  Input type to update a `Fulfilment`
input UpdateFulfilmentInput {
  #  ID of the object
  id: ID!

  #  The current status of the `Fulfilment`.<br/>By default, the initial value will
  # be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  List of fulfilment `attribute`s
  attributes: [AttributeInput]

  #  Type of delivery. Supported values are _STANDARD_, _OVERNIGHT_ and _EXPRESS_.
  deliveryType: String

  #  Type of the `Fulfilment`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  #  Type of fulfilment. Supported types are <br/>
  #  - *CC_PFS* for Click & Collect - Pick from Store
  #  - *CC_PFDC* for Click & Collect - Pick from DC
  #  - *HD_PFS* for Home Delivery - Pick from Store
  #  - *HD_PFDC* for Home Delivery - Pick from DC
  type: String

  #  Estimated time of completing this fulfilment
  eta: String

  #  Expiry time of the fulfilment
  expiryTime: DateTime

  #  List of `FulfilmentItem`s
  items: [UpdateFulfilmentItemWithFulfilmentInput]
}

#  Input type to update a Fulfilment
input UpdateFulfilmentItemWithFulfilmentInput {
  #  ID of the object
  id: ID!

  #  Status. Supported value is _DELETED_.
  status: String

  #  Number of `OrderItem`s assigned to the fulfilment
  requestedQuantity: Int

  #  Number of `OrderItem`s confirmed
  filledQuantity: Int

  #  Number of `OrderItem`s rejected
  rejectedQuantity: Int
}

#  Input type to update a `FulfilmentOption` object.
input UpdateFulfilmentOptionInput {
  #  ID of the object. If provided, will be used to identify the object.
  id: ID!

  #  External reference. If provided, will be used to identify the object.
  ref: String

  #  The current status of the `FulfilmentOption`.<br/>By default, the initial
  # value will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A unique identifier for the clients to group related Fulfilment Plans.
  trackingCode: String

  #  A list of attributes associated with this object. This can be used to extend
  # an existing object with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]
}

#  Input type to update a `FulfilmentPlan` object.
input UpdateFulfilmentPlanInput {
  #  ID of the object
  id: ID!

  #  External reference. Recommended to be unique.
  ref: String

  #  The current status of the `FulfilmentPlan`.<br/>By default, the initial value
  # will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  ETA of the `FulfilmentPlan`. Although this can be set explicitly, we recommend
  # that this be determined and set in the workflow.
  eta: String

  #  A list of attributes associated with this object. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  A list of exceptions.
  #  **Note** <br /><br />
  #  This will always be an append operation. Existing exceptions can not be modified but new ones can be added.
  exceptions: [CreateFulfilmentPlanExceptionInput]
}

#  Input parameter for the `updateGroupProduct` mutation. A group product `ref` is
# unique within the bounds of the specified `catalogue`, which together makes up
# the unique identifier for the `GroupProduct` record. <br /><br />
#  During an update mutation, the following fields behave in an "UPSERT" or UPDATE / INSERT manner:
#  * `attributes` - `name` is the unique key for the Attribute `type` and `value`.
# If an associated Attribute with a matching `name` already exists, then the
# `type` and `value` fields will be updated, else it will be inserted.
#  * `prices` - `type` and `currency` are the unique key for the Price `value`. If
# an associated Price with a matching `name` and `type` already exists, then the
# `value` field will be updated, else it will be inserted.
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input UpdateGroupProductInput {
  #  The unique reference identifier for the Product
  ref: String!

  #  The Product Catalogue in which this Product is managed
  catalogue: ProductCatalogueKey!

  #  Type of the `GroupProduct`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String

  #  The current status of the `GroupProduct`.<br/>By default, the initial value
  # will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Product. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  The name of the Product
  name: String

  #  A short description of the Product (max 255 chars)
  summary: String

  #  A list of references to the `Category`'s to which this `Product` relates.
  # Product categories must be a part of the same `ProductCatalogue` (see
  # `catalogue` field). The `Category` must already exist.
  categories: [CategoryKey]

  #  A list of Prices for this Product
  prices: [PriceInput]

  #  The tax information for this Product
  taxType: TaxTypeInput

  #  A list of Products within the group
  products: [ProductKey]
}

#  Input parameter for the `updateInventoryCatalogue` mutation. The `ref` field is
# the unique identifier for the catalogue you wish to update. <br /><br />
#  During an update mutation, the following fields behave in an "UPSERT" or UPDATE / INSERT manner:
#  * `attributes` - `name` is the unique key for the Attribute `type` and `value`.
# If an associated Attribute with a matching `name` already exists, then the
# `type` and `value` fields will be updated, else it will be inserted.
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input UpdateInventoryCatalogueInput {
  #  The unique reference identifier for the Inventory Catalogue
  ref: String!

  #  Type of the `InventoryCatalogue`, typically used by the Orchestration Engine
  # to determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String

  #  The current status of the `InventoryCatalogue`.<br/>By default, the initial
  # value will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Inventory Catalogue. This can be
  # used to extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [AttributeInput]

  #  The name of the Inventory Catalogue
  name: String

  #  A short description of the Inventory Catalogue
  description: String

  #  A list of Retailer references associated with this Inventory Catalogue
  retailerRefs: [String]
}

#  Input parameter for the `updateInventoryPosition` mutation. An inventory
# position `ref` is unique within the bounds of the specified `catalogue`, which
# together makes up the unique identifier for the `InventoryPosition` record. <br /><br />
#  During an update mutation, the following fields behave in an "UPSERT" or UPDATE / INSERT manner:
#  * `attributes` - `name` is the unique key for the Attribute `type` and `value`.
# If an associated Attribute with a matching `name` already exists, then the
# `type` and `value` fields will be updated, else it will be inserted.
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input UpdateInventoryPositionInput {
  #  The unique reference identifier for the Inventory Position
  ref: String!

  #  The Inventory Catalogue in which this Position is managed
  catalogue: InventoryCatalogueKey!

  #  The current status of the `InventoryPosition`.<br/>By default, the initial
  # value will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  Type of the `InventoryPosition`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String

  #  A list of attributes associated with this Inventory Position. This can be used
  # to extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [AttributeInput]

  #  A reference identifying a Product. The referenced product may or may not exist
  # within one or more Product Catalogues. This is a loosely coupled association,
  # since Product and Inventory are separate domains.
  productRef: String

  #  The calculated on hand quantity based on the associated quantities, and rules in the orchestration workflow
  onHand: Int

  #  A reference identifying the Location where this inventory exists. This is a loosely coupled association.
  locationRef: String

  #  A list of Inventory Quantities associated with this Position
  quantities: [InventoryQuantityKey]
}

#  Input parameter for the `updateInventoryQuantity` mutation. An inventory
# quantity `ref` is unique within the bounds of the specified `catalogue`, which
# together makes up the unique identifier for the `InventoryQuantity` record. <br /><br />
#  During an update mutation, the following fields behave in an "UPSERT" or UPDATE / INSERT manner:
#  * `attributes` - `name` is the unique key for the Attribute `type` and `value`.
# If an associated Attribute with a matching `name` already exists, then the
# `type` and `value` fields will be updated, else it will be inserted.
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input UpdateInventoryQuantityInput {
  #  The unique reference identifier for the Inventory Quantity
  ref: String!

  #  The Inventory Catalogue in which this Position is managed
  catalogue: InventoryCatalogueKey!

  #  The current status of the `InventoryQuantity`.<br/>By default, the initial
  # value will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  Type of the `InventoryQuantity`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String

  #  A list of attributes associated with this Inventory Quantity. This can be used
  # to extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [AttributeInput]

  #  The actual amount of this specific Quantity record
  quantity: Int

  #  The condition of the Inventory Quantity value. The platform does not enforce
  # any values here. Examples could include `NEW`, `USED`, or `DAMAGED`
  condition: String

  #  The date and time the quantity is expected to arrive
  expectedOn: DateTime

  #  A reference to the Storage Area where this inventory is kept
  storageAreaRef: String
}

#  `UpdateInvoiceInput`
input UpdateInvoiceInput {
  #  External reference to the `Invoice`. Must be unique.
  ref: String!

  #  Status of the `Invoice`.
  status: String

  #  A list of attributes associated with the `Invoice`. This can be used to extend
  # the existing data structure with additional data.
  attributes: [AttributeInput]

  #  Reference to the `Order` associated with this `Invoice`.
  order: OrderLinkInput

  #  The `InvoiceItem`s associated with this `Invoice`.
  items: [UpdateInvoiceItemWithInvoiceInput]

  #  Issue date of the `Invoice`
  issueDate: DateTime

  #  Due date of the `Invoice`
  dueDate: DateTime

  #  Reference to the `Currency`
  #  The default Tax Type for this invoice. Individual invoice items can override.
  currency: CurrencyKey

  #  Default tax type
  defaultTaxType: TaxTypeInput

  #  The total amount of this invoice excluding tax.
  subTotalAmount: AmountTypeInput

  #  The total amount of tax for this invoice
  totalTax: AmountTypeInput

  #  The total amount of this invoice including tax
  totalAmount: AmountTypeInput

  #  The total amount of this invoice yet to be paid. (This caters for multi-part payments and payment milestones)
  totalBalance: AmountTypeInput
}

#  Input type to create an `InvoiceItem` with an `Invoice`. Intended to be used as
# an inline input in the createInvoice_mutation.
input UpdateInvoiceItemWithInvoiceInput {
  #  External reference to the `InvoiceItem`. Must be unique.
  ref: String!

  #  Description of the `InvoiceItem`
  description: String

  #  Reference to the `Product` associated with this object.
  product: ProductKey

  #  `unitQuantity` holds separately the amount and the unit associated.
  unitQuantity: QuantityTypeInput

  #  The tax type of this item. Should only be provided if different to the default invoice tax type.
  unitTaxType: TaxTypeInput

  #  The unit price of the source item.
  unitAmount: AmountTypeInput

  #  The item amount for this item excluding tax
  amount: AmountTypeInput

  #  The tax amount for this item. If not present at the item level, tax amount
  # should be generated based on the tax type set at the invoice parent level.
  taxAmount: AmountTypeInput
}

input UpdateLocationInput {
  #  ID of the object
  id: ID!
  type: String
  status: String
  attributes: [AttributeInput]
  name: String
  supportPhoneNumber: String
  defaultCarrier: String
  primaryAddress: UpdateStoreAddressInput
  retailer: RetailerId
  openingSchedule: UpdateOpeningScheduleInput
  networks: [NetworkId]
  storageAreas: [UpdateStorageAreaWithLocationInput]
}

#  Input for the `updateManifest` mutation.
input UpdateManifestInput {
  #  External reference for this `Manifest`. Must be unique.
  ref: String!

  #  The name of this `Manifest`
  name: String

  #  Reference to the `Carrier` this `Manifest` is for
  carrier: CarrierKey

  #  A list of attributes associated with this `Manifest`. This can be used to
  # extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [AttributeInput]

  #  The type of `Manifest`
  type: String

  #  The status of this `Manifest`
  status: String

  #  A list of references to the `Consignment`s this `Manifest` contains.
  carrierConsignments: [CarrierConsignmentKey]

  #  The `Location` this `Manifest` is associated with
  location: LocationKey

  #  The link where the carrier's manifest is stored. Not all the carriers generates one, so this field is optional.
  carrierManifestLink: String
}

#  Input type to update a `Network`
input UpdateNetworkInput {
  #  ID of the object
  id: ID!

  #  Name of the network
  name: String

  #  Type of the network. For example you could use _CC_ for _Click and Collect_ or
  # _HD_ for _Home Delivery_. These types can be defined by the user and used by
  # the Orchestration
  #  Engine to determine the workflow that should be applied.
  type: String

  #  Status of the network
  status: String

  #  List of the network's `attribute`s
  attributes: [AttributeInput]

  #  List of `location`s within this network
  locations: [LocationId]
}

input UpdateOpeningScheduleInput {
  #  ID of the object
  id: ID!
  allHours: Boolean
  monStart: Int
  monEnd: Int
  tueStart: Int
  tueEnd: Int
  wedStart: Int
  wedEnd: Int
  thuStart: Int
  thuEnd: Int
  friStart: Int
  friEnd: Int
  satStart: Int
  satEnd: Int
  sunStart: Int
  sunEnd: Int
}

#  Input type to update an `Order`
input UpdateOrderInput {
  #  ID of the `Order`
  id: ID!

  #  The current status of the `Order`.<br/>By default, the initial value will be
  # CREATED, however no other status values are enforced by the platform.<br/>The
  # status field is also used within ruleset selection during orchestration. For
  # more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  List of order's `attribute`s
  attributes: [AttributeInput]

  #  Tax price
  totalPrice: Float

  #  Total tax price
  totalTaxPrice: Float

  #  List of `OrderItem`s to be updated
  items: [UpdateOrderItemWithOrderInput]
}

#  Input type to update an `OrderItem` with an `Order`. Intended to be used as an inline input in the _updateOrder_ mutation.
#  <br/><br/>**NOTE**<br/>
#  This mutation has potential implications on existing `Order`s and their
# workflows. We recommend this mutation to be not used directly. It should either
# be called from a user
#  action or from within a workflow.
input UpdateOrderItemWithOrderInput {
  #  ID of the `OrderItem`
  id: ID!

  #  External reference for the object. Recommended to be unique.
  ref: String

  #  External reference for the associated product.
  productRef: String

  #  External reference for the product catalogue containing the associated product
  # (specified using the `productRef`in this object).
  #  When `productCatalogueRef` is not passed, the compatibility catalogue for this product is used.
  productCatalogueRef: String

  #  Status
  status: String

  #  Quantity ordered
  quantity: Int

  #  Price paid. Excludes tax.
  paidPrice: Float

  #  Currency. Should ideally be a 3 letter ISO currency code. For instance _AUD_.
  currency: String

  #  Price
  price: Float

  #  Tax price
  taxPrice: Float

  #  Tax type. Supported values are _GST_, _VAT_, _EXCLTAX_.
  taxType: String

  #  Total price
  totalPrice: Float

  #  Total tax price
  totalTaxPrice: Float

  #  List of `OrderItem` `attribute`s. There's expected a JSON object
  attributes: [AttributeInput]
}

#  Input parameter for the `updateProductCatalogue` mutation. The `ref` field is
# the unique identifier for the catalogue you wish to update. <br /><br />
#  During an update mutation, the following fields behave in an "UPSERT" or UPDATE / INSERT manner:
#  * `attributes` - `name` is the unique key for the Attribute `type` and `value`.
# If an associated Attribute with a matching `name` already exists, then the
# `type` and `value` fields will be updated, else it will be inserted.
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input UpdateProductCatalogueInput {
  #  The unique reference identifier for the Product Catalogue
  ref: String!

  #  Type of the `ProductCatalogue`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String

  #  The current status of the `ProductCatalogue`.<br/>By default, the initial
  # value will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Product Catalogue. This can be used
  # to extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [AttributeInput]

  #  The name of the Product Catalogue
  name: String

  #  A short description of the Product Catalogue
  description: String

  #  A list of Retailer references associated with this Product Catalogue
  retailerRefs: [String]
}

input UpdateRetailerInput {
  #  ID of the object
  id: ID!
  name: String
  status: String
  summary: String
  websiteUrl: String
  urlName: String
  primaryEmail: String
  supportContactName: String
  supportEmail: String
  supportPhone: String
  tradingName: String
  region: String
  networks: [NetworkId]
}

# The lodged location in cases where the return order was directly returned to a store or DC
input UpdateReturnFulfilmentInput {
  #  External reference. Must be unique
  ref: String!

  #  Return order reference related to the fulfilment    
  returnOrder: ReturnOrderKey!

  #  Status of the return fulfilment
  status: String

  #  A list of attributes. Attributes can be used to extend the existing data
  # structure with additional data for use in orchestration rules, etc.    
  attributes: [AttributeInput]

  # The pickup address in the cases of return orders that are being picked up by a carrier
  pickupAddress: StreetAddressInput

  # The lodged location in cases where the return order was directly returned to a store or DC    
  lodgedLocation: LocationLinkInput

  # The destination of the return order items    
  destinationLocation: LocationLinkInput

  # Update fulfilment items     
  returnFulfilmentItems: [UpdateReturnFulfilmentItemWithReturnFulfilmentInput]
}

input UpdateReturnFulfilmentItemInput {
  #  External reference. Must be unique
  ref: String!
  returnOrderFulfilment: ReturnFulfilmentKey!

  #  Unit quantity of return fulfilment item 
  unitQuantity: QuantityTypeInput
  product: ProductLinkInput

  #  A list of attributes. Attributes can be used to extend the existing data
  # structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]
}

#  Input type to update return fulfilment item with return fulfilment 
input UpdateReturnFulfilmentItemWithReturnFulfilmentInput {
  #  External reference. Must be unique
  ref: String!

  #  Unit quantity of return fulfilment item
  unitQuantity: QuantityTypeInput

  # Product reference of return fulfilment item
  product: ProductKey

  #  A list of attributes. Attributes can be used to extend the existing data
  # structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]
}

#  Input type to update return order
input UpdateReturnOrderInput {
  #  External reference of the return order. Must be unique
  ref: String!

  #  Retailer reference of return orders
  retailer: RetailerId!

  #  Status of the return order
  status: String

  #  A list of attributes of the return order. Attributes can be used to extend the
  # existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  Customer reference of the return order. This links the customer to return order
  order: OrderLinkInput

  #  List of return verifications associated with the return order
  returnVerifications: [UpdateReturnVerificationWithReturnOrderInput]

  #  The generated key representing an authorised return order which the customer
  # can use to progress through the return order process
  returnAuthorisationKey: String

  #  The authorised disposition for this return order. This can be different to the
  # return disposition action which reflects the actual action once an item has been inspected
  returnAuthorisationDisposition: SettingValueTypeInput

  #  The time at which the return authorisation expires
  returnAuthorisationKeyExpiry: DateTime

  #  The pickup address in the cases of return orders that are being picked up by a carrier
  pickupAddress: StreetAddressInput

  #  The lodged location in cases where the return order was directly returned to a store or DC
  lodgedLocation: LocationLinkInput

  #  The destination of the return order items
  destinationLocation: LocationLinkInput

  #  The destination of the return order items
  returnOrderItems: [UpdateReturnOrderItemWithReturnOrderInput]

  #  The associated exchange order managed the exchange item
  exchangeOrder: OrderLinkInput

  #  The associated credit memo for this return order
  creditMemo: CreditMemoKey

  #  The currency of this return
  currency: CurrencyKey

  #  The default Tax Type for this return order. Individual return order items can override
  defaultTaxType: TaxTypeInput

  #  The total amount of this return order excluding tax
  subTotalAmount: AmountTypeInput

  #  The total amount of tax for this return order
  totalTax: AmountTypeInput

  #  The total amount of this return order including tax
  totalAmount: AmountTypeInput
}

#  Input type to update return order item when updating the return order
input UpdateReturnOrderItemWithReturnOrderInput {
  #  External reference. Must be unique 
  ref: String!

  #  Status or the return order item
  status: String

  #  A list of attributes. Attributes can be used to extend the existing data
  # structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  Product reference of return order item
  product: ProductKey

  #  Order item of return order item. This field is optional
  orderItem: OrderItemLinkInput

  #  Reason for returning the item 
  returnReason: SettingValueTypeInput

  #  Additional comments related to the returning item
  returnReasonComment: String

  #  The condition in which the return item was received
  returnCondition: SettingValueTypeInput

  #  An optional comment. Required if the condition code required further information such as 'Other'.
  returnConditionComment: String

  #  The actual payment action taken for this return item
  returnPaymentAction: SettingValueTypeInput

  #  The actual disposition action taken for this return item
  returnDispositionAction: SettingValueTypeInput

  #  Return quantity 
  unitQuantity: QuantityTypeInput

  #  Unit price of the returning item
  unitAmount: AmountTypeInput

  #  Unit tax type of the retuning item
  unitTaxType: TaxTypeInput

  #  Item tax amount of the returning item
  itemTaxAmount: AmountTypeInput

  #  Item total amount of returning item
  itemAmount: AmountTypeInput
}

input UpdateReturnVerificationWithReturnOrderInput {
  #  External reference. Must be unique
  ref: String!

  # verification details
  verificationDetails: String
}

#  Input type to update a `Role`
input UpdateRoleInput {
  #  Name of the role. This input is used to identify the role to be updated.
  name: String!

  #  A list of permissions to be assigned to the role. Please note that all new
  # permissions in the input will be added, existing ones will not be affected.
  permissions: [PermissionKey]
}

#  Input type to update a `Setting`
#  <br/><br/>**USAGE**<br/>
#  Use a unique combination of `context` and `contextId` to create settings for various contexts.
#  Not using a unique combination of those two will result in a _ConstraintViolationException_.
#  <br/><br/>**NOTE**<br/>
#  If you are an existing client, you may already be using our <a
# href="https://lingo.fluentretail.com/display/LIN/Configuration+Settings"
# target="_blank">Configuration Settings</a> feature.
#  You can still use this API to update existing settings. However, we advise you
# to be very cautious in doing so as _V4_ APIs may behave unexpectedly
#  if you modify your existing settings. If you have questions, please contact support.
input UpdateSettingInput {
  #  ID of the object
  id: ID!

  #  Name of the setting
  name: String

  #  Data type of the setting's value. Supported types are _LOB_, _STRING_, _INTEGER_, _BOOLEAN_ and _JSON_.
  valueType: String!

  #  Value of the setting. Use this if the value is a JSON.
  lobValue: Json

  #  Value of the setting. Use this if the value is NOT a JSON.
  value: String

  #  The context of the setting. Supported values are ACCOUNT, RETAILER, AGENT or CUSTOMER
  context: String!

  #  `ID` of the context type. For instance, use a retailer's ID when using _RETAILER_ context.
  contextId: Int!
}

#  Input parameter for the `updateStandardProduct` mutation. A standard product
# `ref` is unique within the bounds of the specified `catalogue`, which together
# makes up the unique identifier for the `StandardProduct` record. <br /><br />
#  During an update mutation, the following fields behave in an "UPSERT" or UPDATE / INSERT manner:
#  * `attributes` - `name` is the unique key for the Attribute `type` and `value`.
# If an associated Attribute with a matching `name` already exists, then the
# `type` and `value` fields will be updated, else it will be inserted.
#  * `prices` - `type` and `currency` are the unique key for the Price `value`. If
# an associated Price with a matching `name` and `type` already exists, then the
# `value` field will be updated, else it will be inserted.
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input UpdateStandardProductInput {
  #  The unique reference identifier for the Product
  ref: String!

  #  The Product Catalogue in which this Product is managed
  catalogue: ProductCatalogueKey!

  #  Type of the `StandardProduct`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String

  #  The current status of the `StandardProduct`.<br/>By default, the initial value
  # will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Product. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  The Global Trade Item Number (GTIN) for this Product
  gtin: String

  #  The name of the Product
  name: String

  #  A short description of the Product (max 255 chars)
  summary: String

  #  A list of references to the `Category`'s to which this `Product` relates.
  # Product categories must be a part of the same `ProductCatalogue` (see
  # `catalogue` field). The `Category` must already exist.
  categories: [CategoryKey]

  #  A list of Prices for this Product
  prices: [PriceInput]

  #  The tax information for this Product
  taxType: TaxTypeInput

  #  A list of references to the `VariantProduct`'s to which this `Product`
  # relates. Product variants must be a part of the same `ProductCatalogue` (see
  # `catalogue` field). The `VariantProduct` must already exist.
  variants: [VariantProductKey]
}

#  Output type for bulk updating entity statuses
type UpdateStatusOutput {
  #  Returns the count of data entries that were updated. Count >= 0 implies the query executed successfully
  count: Int
}

input UpdateStorageAreaInput {
  #  ID of the object
  id: ID!
  status: String
  type: String
  attributes: [AttributeInput]
}

input UpdateStorageAreaWithLocationInput {
  #  ID of the object
  id: ID!
  status: String
  type: String
  attributes: [AttributeInput]
}

input UpdateStoreAddressInput {
  #  ID of the object
  id: ID!
  directions: String
  companyName: String
  name: String
  street: String
  city: String
  state: String
  postcode: String
  region: String
  country: String
  latitude: Float
  longitude: Float
  timeZone: String
}

#  Updates an existing `User`s details
input UpdateUserInput {
  #  ID of the object
  id: ID!

  #  External reference of the object. Recommended to be unique.
  ref: String

  #  The user's title. For example _Mr._, _Miss_, _Dr._, _Ms._ etc
  title: String

  #  User's first name
  firstName: String

  #  User's last name
  lastName: String

  #  User's primary email
  primaryEmail: String

  #  User's primary phone number
  primaryPhone: String

  #  Type of the user. For example _ADMIN_, _RETAILER_, _LOCATION_ etc
  type: String

  #  Status of the user
  status: String

  #  API Key. To be used with the Fluent Widget.
  apiKey: String

  #  A list of attributes associated with this object. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  Department
  department: String

  #  Country
  country: String

  #  Timezone
  timezone: String

  #  Determines if the user has opted to receive promotions
  promotionOptIn: Boolean

  #  User's retailer context
  primaryRetailer: RetailerId

  #  User's location context
  primaryLocation: LocationId

  #  A list of roles to be assigned to the user. This operation works in an
  # _upsert_ fashion i.e. any previously assigned roles to the user will not be
  # removed; only new ones
  #  will be added.
  roles: [UserRoleInput]
}

#  Input parameter for the `updateVariantProduct` mutation. A variant product `ref`
# is unique within the bounds of the specified `catalogue`, which together makes
# up the unique identifier for the `VariantProduct` record. <br /><br />
#  During an update mutation, the following fields behave in an "UPSERT" or UPDATE / INSERT manner:
#  * `attributes` - `name` is the unique key for the Attribute `type` and `value`.
# If an associated Attribute with a matching `name` already exists, then the
# `type` and `value` fields will be updated, else it will be inserted.
#  * `prices` - `type` and `currency` are the unique key for the Price `value`. If
# an associated Price with a matching `name` and `type` already exists, then the
# `value` field will be updated, else it will be inserted.
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
input UpdateVariantProductInput {
  #  The unique reference identifier for the Product
  ref: String!

  #  The Product Catalogue in which this Product is managed
  catalogue: ProductCatalogueKey!

  #  Type of the `VariantProduct`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String

  #  The current status of the `VariantProduct`.<br/>By default, the initial value
  # will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Product. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [AttributeInput]

  #  Associated base 'Product' of this variant
  product: ProductKey

  #  The Global Trade Item Number (GTIN) for this Product
  gtin: String

  #  The name of the Product
  name: String

  #  A short description of the Product (max 255 chars)
  summary: String

  #  A list of references to the `Category`'s to which this `Product` relates.
  # Product categories must be a part of the same `ProductCatalogue` (see
  # `catalogue` field). The `Category` must already exist.
  categories: [CategoryKey]

  #  A list of Prices for this Product
  prices: [PriceInput]

  #  The tax information for this Product
  taxType: TaxTypeInput
}

#  Input parameter for the `updateVirtualCatalogue` mutation. The `ref` field is
# the unique identifier for the catalogue you wish to update. <br /><br />
#  During an update mutation, the following fields behave in an "UPSERT" or UPDATE / INSERT manner:
#  * `attributes` - `name` is the unique key for the Attribute `type` and `value`.
# If an associated Attribute with a matching `name` already exists, then the
# `type` and `value` fields will be updated, else it will be inserted.
#  For more information, please refer to the https://lingo.fluentretail.com/display/LIN/Global+Inventory
input UpdateVirtualCatalogueInput {
  #  Reference identifier used to identify this entity object
  ref: String!

  #  Type of the `VirtualCatalogue`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String

  #  The current status of the `VirtualCatalogue`.<br/>By default, the initial
  # value will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  New list of Attribute containing meta data information for this entity object
  attributes: [AttributeInput]

  #  Name of the inventory catalogue
  name: String

  #  Description
  description: String

  #  Inventory Catalogue used for this virtual catalogue
  inventoryCatalogueRef: String

  #  Product Catalogue used for this virtual catalogue
  productCatalogueRef: String

  #  Networks used for this catalogue
  networkIds: [String]

  #  Control group Ref
  controlGroupRef: String

  #  Retailer refs
  retailerRefs: [String]
}

#  Input parameter for the `updateVirtualPosition` mutation. A position `ref`
# should be unique within the bounds of the specified `catalogue`, which together
# makes up the unique identifier for the `inventory position` record. <br /><br />
#  During an update mutation, the following fields behave in an "UPSERT" or UPDATE / INSERT manner:
#  * `attributes` - `name` is the unique key for the Attribute `type` and `value`.
# If an associated Attribute with a matching `name` already exists, then the
# `type` and `value` fields will be updated, else it will be inserted.
#  For more information, please refer to the https://lingo.fluentretail.com/display/LIN/Global+Inventory
input UpdateVirtualPositionInput {
  #  Reference identifier used to identify this entity
  ref: String!

  #  Catalogue
  catalogue: VirtualCatalogueKey!

  #  The current status of the `VirtualPosition`.<br/>By default, the initial value
  # will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  Type of the `VirtualPosition`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String

  #  List of Attribute containing meta data information for this entity
  attributes: [AttributeInput]

  #  Product reference
  productRef: String

  #  Group Reference
  groupRef: String

  #  Quantity
  quantity: Int
}

#  Input type to update a `Wave`
input UpdateWaveInput {
  #  ID of the `Wave` to be updated
  id: ID!

  #  Name of the wave
  name: String

  #  Type of the `Wave`, typically used by the Orchestration Engine to determine
  # the workflow that should be applied. Unless stated otherwise, no values are
  # enforced by the platform.<br/>
  type: String

  #  The current status of the `Wave`.<br/>By default, the initial value will be
  # CREATED, however no other status values are enforced by the platform.<br/>The
  # status field is also used within ruleset selection during orchestration. For
  # more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this wave. `Attribute`s can be used to
  # extend the existing data structure with additional data for use in
  # orchestration rules, UI etc.
  attributes: [AttributeInput]

  #  Fulfilments associated with this wave. This field can be used to add new
  # fulfilments to the wave. Existing fulfilments can't be deleted.
  fulfilments: [FulfilmentId]

  #  `User` who this wave is assigned to
  allocatedTo: UserId
}

#  Represents a `User`
type User implements Node {
  #  ID of the object
  id: ID!

  #  External reference of the object. Recommended to be unique.
  ref: String!

  #  Unique name for the user used for identification and logging purposes.
  username: String!

  #  The user's title. For example _Mr._, _Miss_, _Dr._, _Ms._ etc
  title: String

  #  User's first name
  firstName: String

  #  User's last name
  lastName: String

  #  User's primary email
  primaryEmail: String

  #  User's primary phone number
  primaryPhone: String

  #  Type of the user
  type: String!

  #  Status
  status: String

  #  A list of attributes associated with this object. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [Attribute]

  #  Department
  department: String

  #  Country
  country: String

  #  Timezone
  timezone: String

  #  Determines if the user has opted to receive promotions
  promotionOptIn: Boolean

  #  User's retailer context
  primaryRetailer: Retailer

  #  User's location context
  primaryLocation: Location

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  Roles assigned to the user
  roles: [UserRole]
}

#  A list of results that matched against a User search query
type UserConnection {
  #  A list of edges that links to User type node
  edges: [UserEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a User connection to the User type
type UserEdge {
  #  The item at the end of the User edge
  node: User

  #  A cursor for use in pagination
  cursor: String
}

input UserId {
  #  ID of the object
  id: ID!
}

#  Input type to uniquely identify an `User` object. We use all the fields present in the request to look for this object.
input UserKey {
  #  ID of the object
  id: ID

  #  Unique name for the user used for identification and logging purposes.
  username: String
}

#  An object to represent a user's role with the contexts.
#  <br/>Note: A role is always assigned to a user with a certain context.
type UserRole {
  #  Represents the `Role`
  role: Role!

  #  A list of `RoleContext` objects. It represents the boundaries of the user's role validity.
  contexts: [RoleContext]!
}

#  Input type to assign a `Role` with it's context to the `User` object
input UserRoleInput {
  #  Input to identify the role to be assigned
  role: RoleKey!

  #  Context for the role being assigned
  contexts: [RoleContextInput!]!
}

#  Input type to uniquely identify an `UserRole` object. We use all the fields present in the request to look for this object.
input UserRoleKey {
  #  Key to identify the `Role` object from which to remove the `RoleContext`
  role: RoleKey!

  #  Key to identify the `RoleContext` objects to remove
  contexts: [RoleContextKey!]!
}

#  A `VariantProduct` is a variant based implementation of Product. A variation
# could be based on one or more attributes such as color, size, volume, etc. The
# `ref` field will be the unique identifier for this Product within the specified
# Product Catalogue, as identified by the `catalogue` field. <br /><br />
#  The `VariantProduct` is an orchestrateable entity. Events for these should
# specify a parent entity of Product Catalogue. <br /><br />
#  **Backward Compatibility Note** <br /><br />
#  With the introduction of <a
# href="https://lingo.fluentretail.com/display/LIN/Global+Inventory"
# target="_blank">Global Inventory</a>, we have introduced new data structures to
# support this functionality. Existing orchestration enabled clients will have
# access to their existing product based data via the `COMPATIBILITY:<retailerId>`
# catalogue. <br /><br />
#  For more information, please refer to the <a
# href="https://lingo.fluentretail.com/display/LIN/Compatibility"
# target="_blank">Backward Compatibility Guide on Lingo</a>
type VariantProduct implements Node, Referenceable, Orchestrateable, Extendable, Product {
  #  ID of the object. For internal use, should not be used externally or by any business logic
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  The unique reference identifier for the Product
  ref: String!

  #  Type of the `VariantProduct`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  The current status of the `VariantProduct`.<br/>By default, the initial value
  # will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  A list of attributes associated with this Product. This can be used to extend
  # the existing data structure with additional data for use in orchestration rules, etc.
  attributes: [Attribute]

  #  The associated Standard Product for this Variant Product
  product: StandardProduct!

  #  The Global Trade Item Number (GTIN) for this Product
  gtin: String!

  #  The name of the Product
  name: String!

  #  A short description of the Product (max 255 chars)
  summary: String

  #  A connection to the associated Categories of this Product
  categories(
    createdOn: DateRange
    updatedOn: DateRange

    #  The unique reference identifier for the Category
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  The name of the Category
    name: [String!]

    #  A short description of the Category
    summary: [String]
    catalogue: ProductCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): CategoryConnection

  #  A list of Prices for this Product
  prices: [Price]

  #  The tax information for this Product
  tax: TaxType

  #  The Product Catalogue in which this Product is managed
  catalogue: ProductCatalogue!
}

#  A list of results that matched against a VariantProduct search query
type VariantProductConnection {
  #  A list of edges that links to VariantProduct type node
  edges: [VariantProductEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a VariantProduct connection to the VariantProduct type
type VariantProductEdge {
  #  The item at the end of the VariantProduct edge
  node: VariantProduct

  #  A cursor for use in pagination
  cursor: String
}

#  The `VariantProductKey` input is the parameter for identifying a specific Variant Product.
input VariantProductKey {
  #  The unique reference identifier for the Product
  ref: String

  #  The Product Catalogue in which this Product resides
  catalogue: ProductCatalogueKey!
}

type VirtualCatalogue implements Node, Referenceable, Orchestrateable, Extendable {
  #  ID of the object. For internal use, should not be used externally or by any business logic
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  The reference identifier used to identify an entity
  ref: String!

  #  Type of the `VirtualCatalogue`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  The current status of the `VirtualCatalogue`.<br/>By default, the initial
  # value will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  List of Attribute containing meta data information for an entity
  attributes: [Attribute]

  #  Name of the inventory catalogue
  name: String!

  #  Description
  description: String

  #  Virtual positions
  virtualPositions(
    createdOn: DateRange
    updatedOn: DateRange

    #  The reference identifier used to identify an entity
    ref: [String!]
    type: [String!]
    workflowRef: [String!]
    workflowVersion: [Int!]
    status: [String]

    #  Product reference
    productRef: [String]

    #  On hand quantity
    quantity: [Int]

    #  Group - reference to Location or Category
    groupRef: [String]
    catalogue: VirtualCatalogueKey

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): VirtualPositionConnection

  #  Inventory Catalogue used for this virtual catalogue
  inventoryCatalogueRef: String

  #  Product Catalogue used for this virtual catalogue
  productCatalogueRef: String

  #  Networks used for this catalogue
  networkIds: [String]

  #  Control group Ref
  controlGroupRef: String

  #  Retailer refs
  retailerRefs: [String]
}

#  A list of results that matched against a VirtualCatalogue search query
type VirtualCatalogueConnection {
  #  A list of edges that links to VirtualCatalogue type node
  edges: [VirtualCatalogueEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a VirtualCatalogue connection to the VirtualCatalogue type
type VirtualCatalogueEdge {
  #  The item at the end of the VirtualCatalogue edge
  node: VirtualCatalogue

  #  A cursor for use in pagination
  cursor: String
}

#  The `VirtualCatalogueKey` input is the parameter for identifying a specific Virtual Catalogue
input VirtualCatalogueKey {
  #  Virtual Catalogue reference identifier
  ref: String!
}

#  Response type for the `searchVirtualInventory` query. The response may be empty
# if no stock is found for the request products in any of the configured locations.
type VirtualInventory {
  #  `Location` of the stock
  location: Location

  #  An array of `VirtualPositions`. This will contain all necessary information
  # pertaining to products and corresponding available-to-sell stock.
  virtualPositions: [VirtualPosition]
}

#  A list of results that matched against a VirtualInventory search query
type VirtualInventoryConnection {
  #  A list of edges that links to VirtualInventory type node
  edges: [VirtualInventoryEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a VirtualInventory connection to the VirtualInventory type
type VirtualInventoryEdge {
  #  The item at the end of the VirtualInventory edge
  node: VirtualInventory

  #  A cursor for use in pagination (not yet implemented)
  cursor: String
}

type VirtualPosition implements Node, Referenceable, Orchestrateable, Extendable {
  #  ID of the object. For internal use, should not be used externally or by any business logic
  id: ID!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime

  #  The reference identifier used to identify an entity
  ref: String!

  #  Type of the `VirtualPosition`, typically used by the Orchestration Engine to
  # determine the workflow that should be applied. Unless stated otherwise, no
  # values are enforced by the platform.<br/>
  type: String!

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  The current status of the `VirtualPosition`.<br/>By default, the initial value
  # will be CREATED, however no other status values are enforced by the
  # platform.<br/>The status field is also used within ruleset selection during
  # orchestration. For more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  List of Attribute containing meta data information for an entity
  attributes: [Attribute]

  #  Product reference
  productRef: String

  #  On hand quantity
  quantity: Int

  #  Group - reference to Location or Category
  groupRef: String

  #  Catalogue
  catalogue: VirtualCatalogue
}

#  A list of results that matched against a VirtualPosition search query
type VirtualPositionConnection {
  #  A list of edges that links to VirtualPosition type node
  edges: [VirtualPositionEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a VirtualPosition connection to the VirtualPosition type
type VirtualPositionEdge {
  #  The item at the end of the VirtualPosition edge
  node: VirtualPosition

  #  A cursor for use in pagination
  cursor: String
}

#  Input type used to identify a specific Virtual Position
input VirtualPositionInput {
  #  Represents the current status of the Virtual Position entity
  status: String
}

#  The `VirtualPositionKey` input is the parameter for identifying a specific Virtual Position
input VirtualPositionKey {
  #  Virtual Position reference identifier
  ref: String!

  #  Catalogue
  catalogue: VirtualCatalogueKey!
}

#  Input for filtering out a subset of Virtual Positions
input VirtualPositionsGroupFilterInput {
  #  Virtual Catalogue reference identifier
  catalogue: VirtualCatalogueKey!

  #  Virtual Position Group reference identifier
  groupRef: String!
}

#  Wave represents the pick and pack process that gets carried out in a store or a warehouse.
type Wave implements Node, Orchestrateable, Referenceable, Extendable {
  #  ID of the object
  id: ID!

  #  External reference of the object. Must be unique.
  ref: String!

  #  Name of the wave
  name: String

  #  The current status of the `Wave`.<br/>By default, the initial value will be
  # CREATED, however no other status values are enforced by the platform.<br/>The
  # status field is also used within ruleset selection during orchestration. For
  # more info, see <a
  # href="https://lingo.fluentcommerce.com/ORCHESTRATION-PLATFORM/"
  # target="_blank">Orchestration</a><br/>
  status: String

  #  Type of the `Wave`, typically used by the Orchestration Engine to determine
  # the workflow that should be applied. Unless stated otherwise, no values are
  # enforced by the platform.<br/>
  type: String!

  #  A list of attributes associated with this wave. Attributes can be used to
  # extend the existing data structure with additional data for use in
  # orchestration rules, etc.
  attributes: [Attribute]

  #  The associated retailer
  retailer: Retailer!

  #  Location of the wave operation
  location: Location!

  #  Fulfilments associated with the wave
  fulfilments(
    #  External reference of the object. Recommended to be unique.
    ref: [String]
    status: [String]
    workflowRef: [String!]
    workflowVersion: [Int!]
    createdOn: DateRange
    updatedOn: DateRange

    #  Type of delivery. Supported values are _STANDARD_, _OVERNIGHT_ and _EXPRESS_.
    deliveryType: [String]

    #  Type of fulfilment. Supported types are <br/>
    #  - *CC_PFS* for Click & Collect - Pick from Store
    #  - *CC_PFDC* for Click & Collect - Pick from DC
    #  - *HD_PFS* for Home Delivery - Pick from Store
    #  - *HD_PFDC* for Home Delivery - Pick from DC
    type: [String!]

    #  The estimated time of completing the fulfilment.
    eta: [String]
    expiryTime: DateRange

    #  Returns the first n elements from the list
    first: Int

    #  Returns the last n elements from the list
    last: Int

    #  Returns the elements in the list that come before the specified global ID
    before: String

    #  Returns the elements in the list that come after the specified global ID
    after: String
  ): FulfilmentConnection

  #  `User` who the wave is assigned to
  allocatedTo: User

  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  workflowRef: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  workflowVersion: Int!

  #  Time of creation
  createdOn: DateTime

  #  Time of last update
  updatedOn: DateTime
}

#  A list of results that matched against a Wave search query
type WaveConnection {
  #  A list of edges that links to Wave type node
  edges: [WaveEdge]

  #  Information to aid in pagination
  pageInfo: PageInfo
}

#  The edge in a Wave connection to the Wave type
type WaveEdge {
  #  The item at the end of the Wave edge
  node: Wave

  #  A cursor for use in pagination
  cursor: String
}

input WaveId {
  #  ID of the object
  id: ID!
}

type WorkflowLink {
  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  ref: String

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  version: Int
}

input WorkflowLinkInput {
  #  The reference used for workflow identification. This is defined by a
  # combination of the entity name and the type, in the format
  # [EntityName]::[Type]. For example, an Order of type CC will have the
  # workflowRef "ORDER::CC".<br/>
  ref: String!

  #  The version of the workflow assigned to the entity and used for workflow
  # identification. It comprises a major version and minor version number.<br/>
  version: Int!
}

